<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Pandas(杂)：读取不同空格数的txt或csv</title>
      <link href="/posts/8a34f949/"/>
      <url>/posts/8a34f949/</url>
      
        <content type="html"><![CDATA[<p>今天处理数据时遇到一个特殊情况，正常数据表(txt格式)是按制表符（<mark>\t</mark>&gt;）分隔，其中最后两年的数据<strong>是不等数量的空格分列</strong>，因此需要统一格式。</p><span id="more"></span><p>原始如下图，最后处理成单个空格或制表符分隔，\t或默认</p><img src="/posts/8a34f949/image-20221019190325307.png" class alt="image-20221019190325307"><p>pandas可以读取csv txt等文本文件，<code>read_csv(sep=“\s”)</code>即可，示例：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> glob <span class="keyword">import</span> glob</span><br><span class="line">files = glob(<span class="string">r&quot;D:\气象局数据\天尺度气象数据\存档\201911-202106\*.txt&quot;</span>)</span><br><span class="line">outdir = <span class="string">r&quot;D:\气象局数据\天尺度气象数据\存档\201911-202106-2\\&quot;</span></span><br><span class="line"><span class="comment"># 遍历写出即可，head=None因为这里忽略表头</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">    df = pd.read_csv(file, header=<span class="literal">None</span>,sep=<span class="string">&#x27;\s+&#x27;</span>, encoding = <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    df.to_csv(outdir+os.path.basename(file),index=<span class="literal">False</span>,header=<span class="literal">None</span>,encoding = <span class="string">&#x27;utf-8&#x27;</span>,sep=<span class="string">&#x27;\t&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Pandas数据处理分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pandas </tag>
            
            <tag> read_csv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux系统ubuntu22.04安装qgis</title>
      <link href="/posts/ec7147e8/"/>
      <url>/posts/ec7147e8/</url>
      
        <content type="html"><![CDATA[<p>记录一下在ubuntu系统上安装qgis的过程，参考<a href="https://www.qgis.org/en/site/forusers/alldownloads.html#debian-ubuntu">qgis官方网站</a>及<a href="https://www.youtube.com/watch?v=vbZI1dya6io">youtube</a>。</p><span id="more"></span><h2 id="安装过程及命令记录"><a class="markdownIt-Anchor" href="#安装过程及命令记录"></a> 安装过程及命令记录</h2><blockquote><p>安装过程基本上是step by step，唯一需要转换一下的地方是添加源</p></blockquote><p>如果遇到443等问题和镜像有关，<strong>多执行几次</strong>一般就能通过，打开terminal(<code>ctrl+alt+t</code>)-复制命令(<code>ctrl + c</code>)-粘贴到命令行(<code>ctrl+shift+v</code>)，<code>enter</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gnupg software-properties-common</span><br><span class="line">sudo mkdir -m755 -p /etc/apt/keyrings # 22以上版本本命令可以省略</span><br><span class="line">sudo wget -O /etc/apt/keyrings/qgis-archive-keyring.gpg https://download.qgis.org/downloads/qgis-archive-keyring.gpg</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加仓库源，这里也可以在软件与更新程序中内手动添加</span></span><br><span class="line">sudo add-apt-repository &quot;deb https://qgis.org/ubuntu $(lbs_release -c -s) main&quot;</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install qgis qgis-plugin-grass</span><br></pre></td></tr></table></figure><p>安装后在软件中即可找到，打开即可正常使用：</p><img src="/posts/ec7147e8/qgis.jpg" class alt="qgis">]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QGIS </tag>
            
            <tag> ubuntu </tag>
            
            <tag> 软件安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandas(2)：缺失值即空值na其处理(删除替换或填充)</title>
      <link href="/posts/74993542/"/>
      <url>/posts/74993542/</url>
      
        <content type="html"><![CDATA[<p>常用的pandas表格空值处理方式。如 (1) 删除包含空值的行或者列；(2) 填充某些列的空值为特定值；(3) 基于序列的插值。</p><span id="more"></span><h2 id="空值定义"><a class="markdownIt-Anchor" href="#空值定义"></a> 空值定义</h2><blockquote><p>读取dataframe表格输出的控制都显示为“NAN”，但是具体的情况可能存在一些差别</p></blockquote><p>pandas的数值类型基于numpy dtype，因此缺失值/空值也沿用了numpy。一些“<strong>空值</strong>”：</p><ol><li><mark>None/pd.NA</mark>：Python中的空值表示，即所有的空值指向同一个地址。<strong>NA含义为not available</strong></li><li><mark>np.nan</mark>：该值是有值的，占内存，是一个特殊的浮点数，因此<u>如果导出含NAN的数据会使得该列为浮点型，占用空间增大</u>。<strong>NAN含义为not a number</strong></li><li><mark>NaT</mark>：对于 datetime64[ns] 类型，使用<code>NaT</code>表示缺失值</li><li><mark>‘’</mark>：空字符串，这里实际上也是有值的，但字符串长度为0。</li></ol><p>如何判断是否为空值：<strong>df.isna(); df.notna()</strong>，会返回<strong>True/False</strong>。在此基础上可以进行进一步计算，如<u>df.loc[]的条件选择实际上就是基于中间的条件生成T/F的列然后进行mask筛选行列</u>，具体可以参见<a href="https://hscyber.github.io/posts/f9c7a8a1/#%E6%9D%A1%E4%BB%B6%E7%AD%9B%E9%80%89%E8%A1%8Cdfloc">之前的笔记</a>。</p><ul><li>isnull()函数==isna()函数，但推荐用后者，便于记忆，与填充及删除时一致。</li></ul><h2 id="值的处理"><a class="markdownIt-Anchor" href="#值的处理"></a> 值的处理</h2><p>什么时候对数值进行<strong>整列删除-意味着舍弃某指标</strong>或者<strong>整行删除-舍弃某条记录</strong>或者什么时候选择进行填充需要<font color="#dd0000">视具体的数据和需求</font>来确定。</p><h3 id="删除"><a class="markdownIt-Anchor" href="#删除"></a> 删除</h3><p>DataFrame.dropna(*, axis=0, how=[‘any’, ‘all’], thresh, subset=None, inplace=False…)</p><ul><li><strong>axis</strong>=0表示默认删除包含空值的<strong>行</strong></li><li><strong>subset</strong>用于指定某些列</li><li><strong>how</strong>表示是<strong>全部</strong>为None才删除还是<strong>只要存在</strong>None就删除</li><li><strong>thresh</strong>与how不能同时工作，表示<strong>删除多少个</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除全部空的行</span></span><br><span class="line">df.dropna()</span><br><span class="line"><span class="comment"># 删除全部空的列</span></span><br><span class="line">df.dropna(axis=<span class="string">&#x27;columns&#x27;</span>)</span><br><span class="line">df.dropna(axis=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 删除某些列中存在空值的行</span></span><br><span class="line">df.dropna(subset=[<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;toy&#x27;</span>])</span><br></pre></td></tr></table></figure><h3 id="替换"><a class="markdownIt-Anchor" href="#替换"></a> 替换</h3><h3 id="填充"><a class="markdownIt-Anchor" href="#填充"></a> 填充</h3><h3 id="插值"><a class="markdownIt-Anchor" href="#插值"></a> 插值</h3><h2 id="参考学习"><a class="markdownIt-Anchor" href="#参考学习"></a> 参考学习</h2><ul><li><p><a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/missing_data.html">文档参考</a></p></li><li><p><a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.dropna.html#pandas.DataFrame.dropna">df.dropna()</a></p></li><li><p><a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.fillna.html#pandas.DataFrame.fillna">df.fillna()</a></p></li><li><p><a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.interpolate.html#pandas.DataFrame.interpolate">df.interpolate()</a></p></li><li><p><a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.replace.html#pandas.DataFrame.replace">df.replace()</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Pandas数据处理分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pandas </tag>
            
            <tag> dropna </tag>
            
            <tag> fillna </tag>
            
            <tag> interpolate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对近来生活的思考和一点自我反思</title>
      <link href="/posts/1d48db90/"/>
      <url>/posts/1d48db90/</url>
      
        <content type="html"><![CDATA[<p>尽管时间不差多少，但相较于上半年，下半年的时间过起来总是会格外地快，快到仿佛我再不记点什么就马上回跨到下一个年头……</p><span id="more"></span><h3 id="闲言碎语-不知所云"><a class="markdownIt-Anchor" href="#闲言碎语-不知所云"></a> 闲言碎语-不知所云</h3><blockquote><p>人是一根会思考的芦苇</p></blockquote><p>兴许是下意识将78月归入上半年，将9月视作新的开始，才觉得过得飞快，当然，和秋冬的恶劣天气也脱不了关系。不知不觉现在我也已经进入了读研的第三年，说不出的滋味。抛开一如既往此起彼伏的北京疫情，这几个月我算是无所顾忌地在开始着各种尝试，对于自身和很多东西的看法有了不少的改变，当然，这种尝试是需要成本的，有时还会让人倍感疲惫。</p><p>这几个月工作之余，大量的课外阅读，频繁的运动与奔跑，持续的思索与记录，积极拥抱小团体，勇敢找寻一些自己的热爱和兴趣，让我的生活不再像之前那样“沉重”而“单调”，收获颇丰，但回过头来看，人的精力和目光是有限的，有些东西是牢固的，这种状态不可持续，慢慢地就暴露了一些问题，有浮躁及矫枉过正之嫌。</p><p>最大的收获大致在于：认识到了人的有限性和平凡，接纳和更好地认识了自己，自己的特质与优缺点，也认识到了人具有的巨大潜力和可塑性，没有什么是不能够改变的，缺的是主动性、认知、勇气、行动，没有那么多借口。焦虑是允许的，积极拥抱。每天我们都在做着对抗，与人生来的惰性、刺激与享乐、逃避痛苦而对抗，少有人能够做到极致，除非是极致的热爱。我便在这中间寻找一个地方踏步，并努力地向着另一端慢慢行进。我不再向过去那样思考人生的意义，因为这短短的一生，值得追寻的，除却对自我的认知和探求，余下的是大概是爱情与工作/事业。</p><p>我们好像讨厌工作，抗拒工作，将之视为一种别无选择被迫做的事情，即来自身处社会和人际关系中的外界压力与其所赋予我们的责任。<strong>但慢慢地我发觉，有些东西，一些无可替代的幸福感和平静，我们也别无选择，只能够从劳动中获得</strong>，或许也可以称之为工作，当然，我更愿意称其为创造。像绘画与雕塑、像音乐、像科学、像书作……在劳动中创造价值和表达自我，开拓自己心中的森林。警惕被动而不加思考地比较与自欺，罗翔老师说，内卷的本质是不把人当人。虽然我知道好像不只是内卷如此。</p><p><strong>我们来的时候，什么也没有，不妨大胆一些。二十几岁的年纪，我们不可能做到什么都有，而且每个人真正属于自己的东西，其实都不多</strong>。不少人说，25岁之后人才真正成年。我想，这肯定也是个虚数，即便是从生理上看，毕竟人与人是不一样的，生长过程和经历的人生阶段也各自不同。但是，二十几岁的年纪，一个人再天才再有帮助，所能达到的水平也是有限的，更确切的说，属于他自己的那些东西定然是有限的。不会有完美的人，我们不得不去经历，才能成长。有人在小地方吭哧吭哧长大然后投身人海，有人在繁华都市一步步走向聚光灯和舞台，不同的时间造就不同的人，并无好与坏之分，他有的别人或许没有，但有些人有的，他可能永远也无法收获。每个人都有一些面是智者，一些面是残者。。</p><p>我们都有自己的道路，不应被时间和他人或是什么其他的东西而定义自己或是自己的阶段，只需要<font color="#dd0000">勇敢地走上人生旅途</font>。</p><h3 id="关于提高效率的几点反思"><a class="markdownIt-Anchor" href="#关于提高效率的几点反思"></a> 关于提高效率的几点反思。</h3><blockquote><p>热爱、爱、渴望和目标永远是最纯净的力量源泉。</p></blockquote><ol><li><strong>减少精力和注意力的分散，我们不可能同时盯着很多条进程，大脑CPU的核数和资源都是有限的，适当地削减和调整该资源的分配</strong>。要事第一，当然，或许需要割舍一些次重要的东西，这会难受，但是大多值得。</li><li>我们<strong>不可能什么都有，适当遏止内心纷繁的一些渴望</strong>。减少虚荣，**我们远比我们想象中得难以自我察觉、控制情绪和抵制诱惑。**不能抵挡诱惑就关闭通道，关闭信息通报，比如你可以考虑取关你80%+的公众号，卸掉占据大量时间的ap。而投入眼前的工作，并找寻一些兴趣与热爱。</li><li>不要被时间或节点所限制，将目光聚焦在所做的事情。也即是让一件一件的小事情成为生活的最小分割，而不是1分钟一小时，当然并不是不考虑时间，而是<strong>不需要过分盯着数着时间点做事情，而聚焦到事情本身的完成度上</strong>。可能因为我自己有些强迫症的缘故才会这样~比如说，我知道1个月之后某某答辩，我只需要在此之前花费特定的时间完成准备好即可，而不是一个月都要在做这个事情。比如我规定自己12.30之前要睡觉，并不是说我回去早了就要先玩手机干别的到了这个点才睡，该做的事情做完了就可以睡觉，对我而言，起床亦是如此。</li><li><strong>不要事事都抱着等有充足准备之后再开始做的念头</strong>。You can never be ready. 我们非常喜欢做好充足准备后再开始做任何工作和事情，也就是做有把握的事情，但是真正关键的时刻往往不会让我们准备好，包括那些可能改变我们命运的大时刻，我们就是该硬着头皮去做一些事情，会有更加促进我们的跃升，比如我不可能等学好了什么什么才能开始做东西。</li><li>接上，<strong>不要过度准备和过分焦虑</strong>。假如做事都要面面顾到，那就什么事情都不能做了。事情完成到一定程度即可，锦上添花的事情很多时候是非必要的。<u>焦虑适度即可，不要为太远的事情而担忧，像珍惜礼物那样珍惜今天。对于不可控的事情，我们要保持乐观和自信，对于可控的事情，我们要保持谨慎和节制。</u>对于不可控的事情，说白了，焦虑和恐惧于事无补，焦虑改变不了明天，反而会影响今天的心情，恐惧也改变不了明天，因为人生唯一应该恐惧的就是恐惧本身；但是对于可控的事情，能不能好好利用时间，这是可控的，你要谨慎你要节制，因为如果不谨慎不节制就会乐极生悲。</li><li>难过无法自抑压抑不能自释的时候-多寻求帮助与关怀，我知道失望与难过很难感同身受，但倾述和释放会让我们好很多。</li><li>坚持适当运动和阅读，培养一两个兴趣爱好，可以的话，和志趣相投小伙伴一起，有小伙伴很多时候会让我们更具热情。</li><li>早睡早起，该下班就下班，比如现在，不要用今天来弥补昨天，也不要预支明天。</li><li>……</li></ol><p>2022/10/11 22:59</p>]]></content>
      
      
      <categories>
          
          <category> 生活漫步 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>matplotlib基础(6)：绘制多图的精准布局</title>
      <link href="/posts/cddc42b6/"/>
      <url>/posts/cddc42b6/</url>
      
        <content type="html"><![CDATA[<p>作图时经常需要<mark>绘制多幅图并进行布局调整</mark>，……。</p><span id="more"></span><h2 id="出草图"><a class="markdownIt-Anchor" href="#出草图"></a> 出草图</h2><h2 id="常规布局"><a class="markdownIt-Anchor" href="#常规布局"></a> 常规布局</h2><h2 id="高级布局"><a class="markdownIt-Anchor" href="#高级布局"></a> 高级布局</h2>]]></content>
      
      
      <categories>
          
          <category> Python可视化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Matplotlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matplotlib基础(5)：文本与辅助线的添加及属性设置</title>
      <link href="/posts/4c34a09/"/>
      <url>/posts/4c34a09/</url>
      
        <content type="html"><![CDATA[<p>如果在图中的适当位置<mark>添加辅助线及文本，并设置其属性</mark>，……。</p><span id="more"></span><h2 id="文本属性与布局"><a class="markdownIt-Anchor" href="#文本属性与布局"></a> 文本属性与布局</h2><blockquote><p><a href="https://matplotlib.org/devdocs/tutorials/text/text_props.html">详细可参考</a></p></blockquote><h2 id="axtext文本"><a class="markdownIt-Anchor" href="#axtext文本"></a> ax.text文本</h2><blockquote><p><a href="https://matplotlib.org/devdocs/api/_as_gen/matplotlib.axes.Axes.text.html">api</a></p></blockquote><h2 id="辅助线"><a class="markdownIt-Anchor" href="#辅助线"></a> 辅助线</h2><h3 id="axvlines垂直线"><a class="markdownIt-Anchor" href="#axvlines垂直线"></a> ax.vlines垂直线</h3><blockquote><p>Axes.vlines(x, ymin, ymax, …)——Plot <strong>vertical</strong> lines at each <em>x</em> from <em>ymin</em> to <em>ymax</em>.</p></blockquote><h3 id="axhlines水平线"><a class="markdownIt-Anchor" href="#axhlines水平线"></a> ax.hlines水平线</h3><blockquote><p>Axes.hlines(y, xmin, xmax,…)——Plot <strong>horizontal</strong> lines at each <em>y</em> from <em>xmin</em> to <em>xmax</em>.</p></blockquote><h3 id="axline任意线"><a class="markdownIt-Anchor" href="#axline任意线"></a> axline任意线</h3><blockquote><p>可以绘制斜线，如回归拟合线<a href="https://matplotlib.org/devdocs/gallery/specialty_plots/anscombe.html#sphx-glr-gallery-specialty-plots-anscombe-py">example</a>——Axes.axline(xy1, xy2=None, *, slope=None)…</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python可视化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Matplotlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matplotlib基础(4)：绘图坐标系及注释位置控制</title>
      <link href="/posts/66a3b602/"/>
      <url>/posts/66a3b602/</url>
      
        <content type="html"><![CDATA[<p>绘制图形首先需要明确使用的坐标参考系，通常该操作为默认，但在<mark>图形内添加文本、辅助线、箭头、图例等装说明时常用</mark>，如可将文本放置在每张图想要的位置如正中间(0.5, 0.5)而不需要关心具体数值。由于自己之前作图遇到过，还增加了一个<strong>绘制固定大小正圆</strong>的实现方式。</p><span id="more"></span><h2 id="坐标系及转换"><a class="markdownIt-Anchor" href="#坐标系及转换"></a> 坐标系及转换</h2><h3 id="基础坐标变换"><a class="markdownIt-Anchor" href="#基础坐标变换"></a> 基础坐标变换</h3><blockquote><p><a href="https://matplotlib.org/stable/tutorials/advanced/transforms_tutorial.html">详细介绍</a></p></blockquote><p>除了画布的坐标系（NFC, 0-1）<code>fig.transFigure</code>,画布像素坐标系（FC, pixels）<code>fig.dpi_scale_trans</code>，还包括数据本身的坐标系（DC）<code>ax.transData</code>以及标准化的坐标系（NDC, 0-1）<code>ax.transAxes</code>。</p><img src="/posts/66a3b602/cs.png" class><p>不同坐标之间的变换，即如何从一个坐标系中的数值转换到对应的目标坐标系的数值。会用到的通常只有DC_to_FC、DC_to_NDC、DC_to_NFC，即从数值转到其它坐标系，使用方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.transforms <span class="keyword">as</span> transforms</span><br><span class="line"><span class="comment"># 函数重命名</span></span><br><span class="line">DC_to_FC = ax.transData.transform</span><br><span class="line">FC_to_DC = ax.transData.inverted().transform</span><br><span class="line">NDC_to_FC = ax.transAxes.transform</span><br><span class="line">FC_to_NDC = ax.transAxes.inverted().transform</span><br><span class="line">NFC_to_FC = fig.transFigure.transform</span><br><span class="line">FC_to_NFC = fig.transFigure.inverted().transform</span><br><span class="line">DC_to_NDC = <span class="keyword">lambda</span> x: FC_to_NDC(DC_to_FC(x))</span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">6</span>, <span class="number">5</span>), dpi=<span class="number">100</span>)</span><br><span class="line">ax = fig.add_subplot(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">ax.set_xlim(<span class="number">0</span>, <span class="number">360</span>)</span><br><span class="line">ax.set_ylim(-<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(NFC_to_FC([<span class="number">1</span>, <span class="number">1</span>]))</span><br><span class="line"><span class="comment"># (600,500)</span></span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">源坐标系</th><th style="text-align:center">目标坐标系</th><th style="text-align:center">简写</th><th style="text-align:center">转换函数</th></tr></thead><tbody><tr><td style="text-align:center">数据x-y</td><td style="text-align:center">画布pixels</td><td style="text-align:center">DC_to_FC</td><td style="text-align:center">ax.transData.transform</td></tr><tr><td style="text-align:center">画布pixels</td><td style="text-align:center">数据x-y</td><td style="text-align:center">FC_to_DC</td><td style="text-align:center">ax.transData.inverted().transform</td></tr><tr><td style="text-align:center">数据x-y</td><td style="text-align:center">数据0-1</td><td style="text-align:center">DC_to_NDC</td><td style="text-align:center">lambda x: FC_to_NDC(DC_to_FC(x))</td></tr><tr><td style="text-align:center">数据x-y</td><td style="text-align:center">画布0-1</td><td style="text-align:center">DC_to_NFC</td><td style="text-align:center">lambda x: FC_to_NFC(DC_to_FC(x))</td></tr><tr><td style="text-align:center">数据0-1</td><td style="text-align:center">画布pixels</td><td style="text-align:center">NDC_to_FC</td><td style="text-align:center">ax.transAxes.transform</td></tr><tr><td style="text-align:center">画布pixels</td><td style="text-align:center">数据0-1</td><td style="text-align:center">FC_to_NDC</td><td style="text-align:center">ax.transAxes.inverted().transform</td></tr><tr><td style="text-align:center">画布0-1</td><td style="text-align:center">画布pixels</td><td style="text-align:center">NFC_to_FC</td><td style="text-align:center">fig.transFigure.transform</td></tr><tr><td style="text-align:center">画布pixels</td><td style="text-align:center">画布0-1</td><td style="text-align:center">FC_to_NFC</td><td style="text-align:center">fig.transFigure.inverted().transform</td></tr></tbody></table><h3 id="案例"><a class="markdownIt-Anchor" href="#案例"></a> 案例</h3><p>下图展示了各种变换方式的应用：</p><ul><li>transform=ax.transAxes：使用标准化坐标表示位置，即用<strong>百分比</strong>（0.5,0.5）表示将注释放在<strong>正中间</strong></li><li>transform= transforms.blended_transform_factory(ax.transData, ax.transAxes)：X轴使用数据，Y使用<strong>百分比</strong>确定文本的初始位置，同理transY相反</li><li>见画圆时案例-transform=fig.dpi_scale_trans + ScaledTranslation(x0, y0, ax.transData)：使用像素的坐标系，但是添加偏移量使得图形从ax的左下角开始绘制</li></ul><img src="/posts/66a3b602/ex2.png" class alt="ex2"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.transforms <span class="keyword">as</span> transforms</span><br><span class="line"><span class="keyword">import</span> matplotlib.patches <span class="keyword">as</span> mpatches</span><br><span class="line"><span class="keyword">from</span> matplotlib.transforms <span class="keyword">import</span> ScaledTranslation</span><br><span class="line"></span><br><span class="line">mpl.rcParams[<span class="string">&#x27;figure.dpi&#x27;</span>] = <span class="number">120</span></span><br><span class="line">mpl.rcParams[<span class="string">&#x27;font.size&#x27;</span>]=<span class="number">10.5</span></span><br></pre></td></tr></table></figure><p><mark>案例1-文本注释</mark>：对应上方前三幅图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># matplotlib是行优先的，也就是索引先数行再列</span></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">ax = fig.add_subplot(<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line">ax.set_xlim(<span class="number">0</span>,<span class="number">5</span>)</span><br><span class="line">ax.set_ylim(<span class="number">0</span>,<span class="number">10</span>)</span><br><span class="line">ax.text(<span class="number">0.05</span>, <span class="number">0.85</span>, <span class="string">&quot;(0.05, 0.85)&quot;</span>, transform=ax.transAxes,</span><br><span class="line">        fontsize=<span class="number">8</span>, fontweight=<span class="string">&#x27;bold&#x27;</span>, va=<span class="string">&#x27;top&#x27;</span>)</span><br><span class="line">ax.scatter(<span class="number">0.05</span>,<span class="number">0.85</span>,s=<span class="number">5</span>,c=<span class="string">&#x27;r&#x27;</span>,transform=ax.transAxes)</span><br><span class="line"><span class="comment"># *************************************************************</span></span><br><span class="line">ax = fig.add_subplot(<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line">ax.set_xlim(<span class="number">0</span>,<span class="number">5</span>)</span><br><span class="line">ax.set_ylim(<span class="number">0</span>,<span class="number">10</span>)</span><br><span class="line">transX = transforms.blended_transform_factory(</span><br><span class="line">    ax.transData, ax.transAxes)</span><br><span class="line">ax.text(<span class="number">3</span>, <span class="number">0.5</span>, <span class="string">&quot;(3, 0.5)&quot;</span>, transform=transX,</span><br><span class="line">        fontsize=<span class="number">8</span>, fontweight=<span class="string">&#x27;bold&#x27;</span>, va=<span class="string">&#x27;top&#x27;</span>)</span><br><span class="line">ax.scatter(<span class="number">3</span>,<span class="number">0.5</span>,s=<span class="number">5</span>,c=<span class="string">&#x27;r&#x27;</span>,transform=transX)</span><br><span class="line"><span class="comment"># *************************************************************</span></span><br><span class="line">ax = fig.add_subplot(<span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">ax.set_xlim(<span class="number">0</span>,<span class="number">5</span>)</span><br><span class="line">ax.set_ylim(<span class="number">0</span>,<span class="number">10</span>)</span><br><span class="line">transY = transforms.blended_transform_factory(</span><br><span class="line">    ax.transAxes, ax.transData)</span><br><span class="line">ax.text(<span class="number">0.5</span>, <span class="number">4</span>, <span class="string">&quot;(0.5, 4)&quot;</span>, transform=transY,</span><br><span class="line">        fontsize=<span class="number">8</span>, fontweight=<span class="string">&#x27;bold&#x27;</span>, va=<span class="string">&#x27;top&#x27;</span>)</span><br><span class="line">ax.scatter(<span class="number">0.5</span>,<span class="number">4</span>,s=<span class="number">5</span>,c=<span class="string">&#x27;r&#x27;</span>,transform=transY)</span><br></pre></td></tr></table></figure><p><mark>案例2-绘固定的圆形</mark>：对应图4 图5，不转换的画绘制圆形会因为XY像素比例不一致而变形，注意圆半径r的单位是英寸，此处画布的大小为10*6英寸</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ax = fig.add_subplot(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">ax.set_xlim(<span class="number">0</span>,<span class="number">6</span>)</span><br><span class="line">ax.set_ylim(<span class="number">0</span>,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">circ = mpatches.Circle((<span class="number">0.5</span>, <span class="number">0.5</span>), radius=<span class="number">0.25</span>, transform=ax.transAxes,</span><br><span class="line">                       facecolor=<span class="string">&#x27;blue&#x27;</span>, alpha=<span class="number">0.75</span>)</span><br><span class="line">ax.add_patch(circ)</span><br><span class="line">ax.scatter(<span class="number">0.5</span>,<span class="number">0.5</span>,s=<span class="number">5</span>,c=<span class="string">&#x27;r&#x27;</span>,transform=ax.transAxes)</span><br><span class="line"><span class="comment"># *************************************************************</span></span><br><span class="line">ax = fig.add_subplot(<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line">ax.set_xlim(<span class="number">0</span>,<span class="number">6</span>)</span><br><span class="line">ax.set_ylim(<span class="number">0</span>,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">x0, y0 = <span class="number">3</span>, <span class="number">4</span> <span class="comment"># 圆心</span></span><br><span class="line">offset = ScaledTranslation(x0, y0, ax.transData)</span><br><span class="line"></span><br><span class="line">circ = mpatches.Circle((<span class="number">0</span>, <span class="number">0</span>), radius=<span class="number">0.5</span>, transform=fig.dpi_scale_trans + offset,</span><br><span class="line">                       facecolor=<span class="string">&#x27;g&#x27;</span>, alpha=<span class="number">0.75</span>)</span><br><span class="line">ax.add_patch(circ)</span><br><span class="line">ax.scatter(x0,y0,c=<span class="string">&#x27;r&#x27;</span>)</span><br></pre></td></tr></table></figure><p><mark>案例3-矩形注释</mark>，对应图6</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ax = fig.add_subplot(<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">x = np.random.randn(<span class="number">1000</span>)</span><br><span class="line">ax.hist(x, <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">transX = transforms.blended_transform_factory(</span><br><span class="line">    ax.transData, ax.transAxes)</span><br><span class="line">    <span class="comment"># 变换X为数据坐标，y为标准化的值，宽度也相应变换</span></span><br><span class="line">rect = mpatches.Rectangle((-<span class="number">1.5</span>, <span class="number">0</span>), width=<span class="number">2.5</span>, height=<span class="number">0.8</span>, transform=transX,</span><br><span class="line">                          color=<span class="string">&#x27;yellow&#x27;</span>, alpha=<span class="number">0.7</span>)</span><br><span class="line">ax.add_patch(rect)</span><br></pre></td></tr></table></figure><h3 id="图外注释添加"><a class="markdownIt-Anchor" href="#图外注释添加"></a> 图外注释添加</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib.transforms <span class="keyword">import</span> blended_transform_factory, ScaledTranslation</span><br><span class="line"><span class="comment"># 长6英寸</span></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">6</span>, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">ax = fig.add_subplot(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, aspect=<span class="number">1</span>)</span><br><span class="line">ax.set_xlim(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">ax.set_xticks(<span class="built_in">range</span>(<span class="number">11</span>))</span><br><span class="line">ax.set_ylim(<span class="number">0</span>, <span class="number">5</span>)</span><br><span class="line">ax.set_xticks(<span class="built_in">range</span>(<span class="number">11</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># dy = 3*12/72英寸 ，往外偏移</span></span><br><span class="line">point = <span class="number">1</span> / <span class="number">72</span></span><br><span class="line">fontsize = <span class="number">12</span></span><br><span class="line">dx, dy = <span class="number">0</span>, -<span class="number">3</span> * fontsize * point</span><br><span class="line">offset = ScaledTranslation(dx, dy, fig.dpi_scale_trans)</span><br><span class="line">transform = blended_transform_factory(ax.transData, ax.transAxes + offset)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>):</span><br><span class="line">    plt.text(x, <span class="number">0</span>, <span class="string">&quot;↑&quot;</span>, transform=transform, ha=<span class="string">&quot;center&quot;</span>, va=<span class="string">&quot;top&quot;</span>, fontsize=fontsize)</span><br><span class="line"></span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/posts/66a3b602/ex3.png" class alt="ex2"><h3 id="公式或辅助线或箭头注释的案例"><a class="markdownIt-Anchor" href="#公式或辅助线或箭头注释的案例"></a> 公式或辅助线或箭头注释的案例</h3><p>关于注释的内容比较多，置于后续展开参考</p><ol><li><a href="https://matplotlib.org/devdocs/tutorials/text/annotations.html">Annotating text with Matplotlib.</a></li><li><a href="https://matplotlib.org/devdocs/api/_as_gen/matplotlib.axes.Axes.annotate.html">ax.annotate</a>，下方有很多案例，如：</li></ol><img src="/posts/66a3b602/annotate0.png" class alt="annotate0"><img src="/posts/66a3b602/annotate1.png" class alt="annotate0"><img src="/posts/66a3b602/annotate5.png" class alt="annotate0"><img src="/posts/66a3b602/annotate2.png" class alt="annotate0"><img src="/posts/66a3b602/annotate3.png" class alt="annotate0"><img src="/posts/66a3b602/annotate4.png" class alt="annotate0"><h2 id="极坐标"><a class="markdownIt-Anchor" href="#极坐标"></a> 极坐标</h2><blockquote><p>暂不展开</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python可视化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Matplotlib </tag>
            
            <tag> transform </tag>
            
            <tag> fig.transFigure </tag>
            
            <tag> ax.transAxes </tag>
            
            <tag> ax.transData </tag>
            
            <tag> 文本注释 </tag>
            
            <tag> 辅助线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python环境(5)：win/linux配置现成conda环境以运行脚本</title>
      <link href="/posts/d452592e/"/>
      <url>/posts/d452592e/</url>
      
        <content type="html"><![CDATA[<p>【conda基础环境完结篇5】前面已经记录了一些<a href="https://hscyber.github.io/tags/Python%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/">基础概念和如何安装配置环境</a>，这里<mark>共享我本机的conda环境（涵盖常见矢量栅格处理包）</mark>，可以直接下载yml文件安装，安装完即可用，也可在其他系统中直接安装如ubuntu系统，输入相应的命令完成配置。所以如果从0开始配置环境的话，只需参照<a href="https://hscyber.github.io/posts/9089f596/">Python环境(2)</a>及本博客。</p><span id="more"></span><h2 id="环境配置"><a class="markdownIt-Anchor" href="#环境配置"></a> 环境配置</h2><h3 id="window下环境配置"><a class="markdownIt-Anchor" href="#window下环境配置"></a> Window下环境配置</h3><blockquote><p>如果需要安装其他包自行再安装即可，我使用的是3.9的Python环境，当前GIS数据处理推荐</p></blockquote><p>这里是我导出的<a href="https://github.com/HSCyber/Data_public/blob/main/Conda_env/geop20220918.yml">yml文件</a>，下载后通过命令行或者Anaconda Prompt进入base环境，路径自行修改，<font color="#dd0000">如果需要自定义环境名称请使用文本编辑器打开yml文件第一行修改</font>。安装完后激活使用即可（不需要梯子可完成安装，如遇网路问题多试几次），</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(base) C:\Users\huangs\Desktop\test&gt;conda env create -f C:\Users\huangs\Desktop\test\geop20220918.yml</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">激活环境</span></span><br><span class="line">(base) C:\Users\huangs\Desktop\test&gt;conda activate geop</span><br></pre></td></tr></table></figure><p>也可以自己<strong>手动执行</strong>如下命令，尽管用到的包很多，但是由于<mark>包之间的依赖关系</mark>，仅安装部分包就可以完成大量包的安装，如先安装geopandas会安装依赖fiona,gdal, hdf4, hdf5, networkx, shapely, numpy, pandas, scipy, pillow, requests, scikit-learn等等包，非常省事，其中安装openpyxl是pandas导出xlsx文件的需要。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">conda create -n geop python=3.9</span><br><span class="line">conda install -c conda-forge geopandas</span><br><span class="line">conda install -c conda-forge rasterio rasterstats</span><br><span class="line">conda install -c conda-forge netcdf4</span><br><span class="line">conda install -c anaconda openpyxl</span><br><span class="line">conda install -c conda-forge matplotlib seaborn bokeh cartopy  </span><br><span class="line">conda install -c conda-forge ipykernel</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可选，如果需要使用jupyter lab或者jupyter notebook的安装</span></span><br><span class="line">conda install -c conda-forge jupyterlab</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者conda install -c conda-forge jupyter notebook</span></span><br></pre></td></tr></table></figure><h3 id="linux环境配置"><a class="markdownIt-Anchor" href="#linux环境配置"></a> linux环境配置</h3><blockquote><p>不能使用yml文件直接安装，有些包安装不了</p></blockquote><p>以下过程在ubuntu22.04系统运行无误</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过命令行或者Anaconda Prompt进入base环境</span></span><br><span class="line">conda create -n geop python=3.9</span><br><span class="line">conda install -c conda-forge geopandas</span><br><span class="line">conda install -c conda-forge rasterio rasterstats</span><br><span class="line">conda install -c conda-forge netcdf4</span><br><span class="line">conda install -c anaconda openpyxl</span><br><span class="line">conda install -c conda-forge matplotlib seaborn bokeh cartopy  </span><br><span class="line">conda install -c conda-forge ipykernel</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可选</span></span><br><span class="line">conda install -c conda-forge jupyterlab</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者conda install -c conda-forge jupyter notebook</span></span><br></pre></td></tr></table></figure><h3 id="选读本机win测试安装过程"><a class="markdownIt-Anchor" href="#选读本机win测试安装过程"></a> (选读)本机win测试安装过程</h3><p>记录了一下测试的全过程，从<strong>创建到安装到删除环境</strong>，方便查看依赖和回顾，也可以看到哪些包占空间大。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br></pre></td><td class="code"><pre><span class="line">(base) C:\Users\huangs\Desktop\test&gt;conda create -n geop python=3.9</span><br><span class="line">Collecting package metadata (current_repodata.json): done</span><br><span class="line">Solving environment: done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">==&gt; WARNING: A newer version of conda exists. &lt;==</span><br><span class="line">  current version: 4.13.0</span><br><span class="line">  latest version: 4.14.0</span><br><span class="line"></span><br><span class="line">Please update conda by running</span><br><span class="line"></span><br><span class="line">    $ conda update -n base -c defaults conda</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Package Plan ##</span></span></span><br><span class="line"></span><br><span class="line">  environment location: D:\Miniconda3\envs\geop</span><br><span class="line"></span><br><span class="line">  added / updated specs:</span><br><span class="line">    - python=3.9</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">The following packages will be downloaded:</span><br><span class="line"></span><br><span class="line">    package                    |            build</span><br><span class="line">    ---------------------------|-----------------</span><br><span class="line">    ca-certificates-2022.9.14  |       h5b45459_0         189 KB  conda-forge</span><br><span class="line">    libzlib-1.2.12             |       hcfcfb64_3          71 KB  conda-forge</span><br><span class="line">    openssl-3.0.5              |       hcfcfb64_2         7.8 MB  conda-forge</span><br><span class="line">    python-3.9.13              |hcf16a7b_0_cpython        17.9 MB  conda-forge</span><br><span class="line">    tzdata-2022c               |       h191b570_0         119 KB  conda-forge</span><br><span class="line">    ------------------------------------------------------------</span><br><span class="line">                                           Total:        26.1 MB</span><br><span class="line"></span><br><span class="line">The following NEW packages will be INSTALLED:</span><br><span class="line"></span><br><span class="line">done</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># To activate this environment, use</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#     $ conda activate geop</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># To deactivate an active environment, use</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#     $ conda deactivate</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(base) C:\Users\huangs\Desktop\test&gt;conda activate geop</span><br><span class="line"></span><br><span class="line">(geop) C:\Users\huangs\Desktop\test&gt;conda install -c conda-forge geopandas</span><br><span class="line">Collecting package metadata (current_repodata.json): done</span><br><span class="line">Solving environment: done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">==&gt; WARNING: A newer version of conda exists. &lt;==</span><br><span class="line">  current version: 4.13.0</span><br><span class="line">  latest version: 4.14.0</span><br><span class="line"></span><br><span class="line">Please update conda by running</span><br><span class="line"></span><br><span class="line">    $ conda update -n base -c defaults conda</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Package Plan ##</span></span></span><br><span class="line"></span><br><span class="line">  environment location: D:\Miniconda3\envs\geop</span><br><span class="line"></span><br><span class="line">  added / updated specs:</span><br><span class="line">    - geopandas</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">The following packages will be downloaded:</span><br><span class="line"></span><br><span class="line">    package                    |            build</span><br><span class="line">    ---------------------------|-----------------</span><br><span class="line">    attrs-22.1.0               |     pyh71513ae_1          48 KB  conda-forge</span><br><span class="line">    boost-cpp-1.78.0           |       h9f4b32c_1        17.1 MB  conda-forge</span><br><span class="line">    brotlipy-0.7.0             |py39hb82d6ee_1004         329 KB  conda-forge</span><br><span class="line">    cairo-1.16.0               |    hd694305_1013         2.3 MB  conda-forge</span><br><span class="line">    certifi-2022.9.14          |     pyhd8ed1ab_0         156 KB  conda-forge</span><br><span class="line">    cffi-1.15.1                |   py39h0878f49_0         223 KB  conda-forge</span><br><span class="line">    charset-normalizer-2.1.1   |     pyhd8ed1ab_0          36 KB  conda-forge</span><br><span class="line">    click-8.1.3                |   py39hcbf5309_0         146 KB  conda-forge</span><br><span class="line">    contourpy-1.0.5            |   py39h1f6ef14_0         173 KB  conda-forge</span><br><span class="line">    fiona-1.8.21               |   py39h0a5cb73_2         892 KB  conda-forge</span><br><span class="line">    fonttools-4.37.2           |   py39ha55989b_0         1.7 MB  conda-forge</span><br><span class="line">    freetype-2.12.1            |       h546665d_0         506 KB  conda-forge</span><br><span class="line">    gdal-3.5.2                 |   py39hddddcaf_0         1.6 MB  conda-forge</span><br><span class="line">    hdf4-4.2.15                |       h0e5069d_4         1.1 MB  conda-forge</span><br><span class="line">    hdf5-1.12.2                |nompi_h57737ce_100        24.0 MB  conda-forge</span><br><span class="line">    joblib-1.2.0               |     pyhd8ed1ab_0         205 KB  conda-forge</span><br><span class="line">    kealib-1.4.15              |       hdf81f3a_1         159 KB  conda-forge</span><br><span class="line">    kiwisolver-1.4.4           |   py39h2e07f2f_0          61 KB  conda-forge</span><br><span class="line">    lerc-4.0.0                 |       h63175ca_0         190 KB  conda-forge</span><br><span class="line">    libdeflate-1.14            |       hcfcfb64_0          73 KB  conda-forge</span><br><span class="line">    libgdal-3.5.2              |       hec59f66_0         9.5 MB  conda-forge</span><br><span class="line">    libkml-1.3.0               |    hf2ab4e4_1015         2.9 MB  conda-forge</span><br><span class="line">    libnetcdf-4.8.1            |nompi_h85765be_104         676 KB  conda-forge</span><br><span class="line">    libpng-1.6.38              |       h19919ed_0         773 KB  conda-forge</span><br><span class="line">    libpq-14.5                 |       h1ea2d34_0         3.9 MB  conda-forge</span><br><span class="line">    libssh2-1.10.0             |       h9a1e1f7_3         228 KB  conda-forge</span><br><span class="line">    libtiff-4.4.0              |       h8e97e67_4         1.1 MB  conda-forge</span><br><span class="line">    libwebp-base-1.2.4         |       h8ffe710_0         328 KB  conda-forge</span><br><span class="line">    libxml2-2.9.14             |       hf5bbc77_4         3.4 MB  conda-forge</span><br><span class="line">    libzip-1.9.2               |       h519de47_1         143 KB  conda-forge</span><br><span class="line">    markupsafe-2.1.1           |   py39hb82d6ee_1          25 KB  conda-forge</span><br><span class="line">    matplotlib-base-3.6.0      |   py39haf65ace_0         7.5 MB  conda-forge</span><br><span class="line">    networkx-2.8.6             |     pyhd8ed1ab_0         1.6 MB  conda-forge</span><br><span class="line">    numpy-1.23.3               |   py39h9061af7_0         6.3 MB  conda-forge</span><br><span class="line">    openjpeg-2.5.0             |       hc9384bd_1         256 KB  conda-forge</span><br><span class="line">    pandas-1.4.4               |   py39h80a8885_0        11.2 MB  conda-forge</span><br><span class="line">    pillow-9.2.0               |   py39hcef8f5f_2        45.2 MB  conda-forge</span><br><span class="line">    poppler-22.04.0            |       hb57f792_3         2.7 MB  conda-forge</span><br><span class="line">    postgresql-14.5            |       he353ca9_0        23.3 MB  conda-forge</span><br><span class="line">    pyproj-3.4.0               |   py39h2de216b_0         412 KB  conda-forge</span><br><span class="line">    pysocks-1.7.1              |     pyh0701188_6          19 KB  conda-forge</span><br><span class="line">    requests-2.28.1            |     pyhd8ed1ab_1          53 KB  conda-forge</span><br><span class="line">    rtree-1.0.0                |   py39h09fdee3_1          49 KB  conda-forge</span><br><span class="line">    scikit-learn-1.1.2         |   py39hfd4428b_0         7.6 MB  conda-forge</span><br><span class="line">    scipy-1.9.1                |   py39h316f440_0        28.2 MB  conda-forge</span><br><span class="line">    shapely-1.8.4              |   py39he0923fe_0         408 KB  conda-forge</span><br><span class="line">    tiledb-2.11.2              |       h3132609_0         3.2 MB  conda-forge</span><br><span class="line">    unicodedata2-14.0.0        |   py39hb82d6ee_1         492 KB  conda-forge</span><br><span class="line">    win_inet_pton-1.1.0        |   py39hcbf5309_4           9 KB  conda-forge</span><br><span class="line">    zlib-1.2.12                |       hcfcfb64_3         116 KB  conda-forge</span><br><span class="line">    zstd-1.5.2                 |       h7755175_4         401 KB  conda-forge</span><br><span class="line">    ------------------------------------------------------------</span><br><span class="line">                                           Total:       212.7 MB</span><br><span class="line"></span><br><span class="line">The following NEW packages will be INSTALLED:</span><br><span class="line"></span><br><span class="line">  attrs              conda-forge/noarch::attrs-22.1.0-pyh71513ae_1</span><br><span class="line">  blosc              conda-forge/win-64::blosc-1.21.1-h74325e0_3</span><br><span class="line">  boost-cpp          conda-forge/win-64::boost-cpp-1.78.0-h9f4b32c_1</span><br><span class="line">  branca             conda-forge/noarch::branca-0.5.0-pyhd8ed1ab_0</span><br><span class="line">  brotli             conda-forge/win-64::brotli-1.0.9-h8ffe710_7</span><br><span class="line">  brotli-bin         conda-forge/win-64::brotli-bin-1.0.9-h8ffe710_7</span><br><span class="line">  brotlipy           conda-forge/win-64::brotlipy-0.7.0-py39hb82d6ee_1004</span><br><span class="line">  cairo              conda-forge/win-64::cairo-1.16.0-hd694305_1013</span><br><span class="line">  certifi            conda-forge/noarch::certifi-2022.9.14-pyhd8ed1ab_0</span><br><span class="line">  cffi               conda-forge/win-64::cffi-1.15.1-py39h0878f49_0</span><br><span class="line">  cfitsio            conda-forge/win-64::cfitsio-4.1.0-h5a969a9_0</span><br><span class="line">  charset-normalizer conda-forge/noarch::charset-normalizer-2.1.1-pyhd8ed1ab_0</span><br><span class="line">  click              conda-forge/win-64::click-8.1.3-py39hcbf5309_0</span><br><span class="line">  click-plugins      conda-forge/noarch::click-plugins-1.1.1-py_0</span><br><span class="line">  cligj              conda-forge/noarch::cligj-0.7.2-pyhd8ed1ab_1</span><br><span class="line">  colorama           conda-forge/noarch::colorama-0.4.5-pyhd8ed1ab_0</span><br><span class="line">  contourpy          conda-forge/win-64::contourpy-1.0.5-py39h1f6ef14_0</span><br><span class="line">  cryptography       pkgs/main/win-64::cryptography-37.0.1-py39h21b164f_0</span><br><span class="line">  curl               conda-forge/win-64::curl-7.83.1-h789b8ee_0</span><br><span class="line">  cycler             conda-forge/noarch::cycler-0.11.0-pyhd8ed1ab_0</span><br><span class="line">  expat              conda-forge/win-64::expat-2.4.8-h39d44d4_0</span><br><span class="line">  fiona              conda-forge/win-64::fiona-1.8.21-py39h0a5cb73_2</span><br><span class="line">  folium             conda-forge/noarch::folium-0.12.1.post1-pyhd8ed1ab_1</span><br><span class="line">  font-ttf-dejavu-s~ conda-forge/noarch::font-ttf-dejavu-sans-mono-2.37-hab24e00_0</span><br><span class="line">  font-ttf-inconsol~ conda-forge/noarch::font-ttf-inconsolata-3.000-h77eed37_0</span><br><span class="line">  font-ttf-source-c~ conda-forge/noarch::font-ttf-source-code-pro-2.038-h77eed37_0</span><br><span class="line">  font-ttf-ubuntu    conda-forge/noarch::font-ttf-ubuntu-0.83-hab24e00_0</span><br><span class="line">  fontconfig         conda-forge/win-64::fontconfig-2.14.0-hce3cb01_0</span><br><span class="line">  fonts-conda-ecosy~ conda-forge/noarch::fonts-conda-ecosystem-1-0</span><br><span class="line">  fonts-conda-forge  conda-forge/noarch::fonts-conda-forge-1-0</span><br><span class="line">  fonttools          conda-forge/win-64::fonttools-4.37.2-py39ha55989b_0</span><br><span class="line">  freetype           conda-forge/win-64::freetype-2.12.1-h546665d_0</span><br><span class="line">  freexl             conda-forge/win-64::freexl-1.0.6-ha8e266a_0</span><br><span class="line">  gdal               conda-forge/win-64::gdal-3.5.2-py39hddddcaf_0</span><br><span class="line">  geopandas          conda-forge/noarch::geopandas-0.11.1-pyhd8ed1ab_0</span><br><span class="line">  geopandas-base     conda-forge/noarch::geopandas-base-0.11.1-pyha770c72_0</span><br><span class="line">  geos               conda-forge/win-64::geos-3.11.0-h39d44d4_0</span><br><span class="line">  geotiff            conda-forge/win-64::geotiff-1.7.1-h714bc5f_3</span><br><span class="line">  gettext            conda-forge/win-64::gettext-0.19.8.1-ha2e2712_1008</span><br><span class="line">  hdf4               conda-forge/win-64::hdf4-4.2.15-h0e5069d_4</span><br><span class="line">  hdf5               conda-forge/win-64::hdf5-1.12.2-nompi_h57737ce_100</span><br><span class="line">  icu                conda-forge/win-64::icu-70.1-h0e60522_0</span><br><span class="line">  idna               conda-forge/noarch::idna-3.3-pyhd8ed1ab_0</span><br><span class="line">  intel-openmp       conda-forge/win-64::intel-openmp-2022.1.0-h57928b3_3787</span><br><span class="line">  jinja2             conda-forge/noarch::jinja2-3.1.2-pyhd8ed1ab_1</span><br><span class="line">  joblib             conda-forge/noarch::joblib-1.2.0-pyhd8ed1ab_0</span><br><span class="line">  jpeg               conda-forge/win-64::jpeg-9e-h8ffe710_2</span><br><span class="line">  kealib             conda-forge/win-64::kealib-1.4.15-hdf81f3a_1</span><br><span class="line">  kiwisolver         conda-forge/win-64::kiwisolver-1.4.4-py39h2e07f2f_0</span><br><span class="line">  krb5               conda-forge/win-64::krb5-1.19.3-hc8ab02b_0</span><br><span class="line">  lcms2              conda-forge/win-64::lcms2-2.12-h2a16943_0</span><br><span class="line">  lerc               conda-forge/win-64::lerc-4.0.0-h63175ca_0</span><br><span class="line">  libblas            conda-forge/win-64::libblas-3.9.0-16_win64_mkl</span><br><span class="line">  libbrotlicommon    conda-forge/win-64::libbrotlicommon-1.0.9-h8ffe710_7</span><br><span class="line">  libbrotlidec       conda-forge/win-64::libbrotlidec-1.0.9-h8ffe710_7</span><br><span class="line">  libbrotlienc       conda-forge/win-64::libbrotlienc-1.0.9-h8ffe710_7</span><br><span class="line">  libcblas           conda-forge/win-64::libcblas-3.9.0-16_win64_mkl</span><br><span class="line">  libcurl            conda-forge/win-64::libcurl-7.83.1-h789b8ee_0</span><br><span class="line">  libdeflate         conda-forge/win-64::libdeflate-1.14-hcfcfb64_0</span><br><span class="line">  libgdal            conda-forge/win-64::libgdal-3.5.2-hec59f66_0</span><br><span class="line">  libglib            conda-forge/win-64::libglib-2.72.1-h3be07f2_0</span><br><span class="line">  libiconv           conda-forge/win-64::libiconv-1.16-he774522_0</span><br><span class="line">  libkml             conda-forge/win-64::libkml-1.3.0-hf2ab4e4_1015</span><br><span class="line">  liblapack          conda-forge/win-64::liblapack-3.9.0-16_win64_mkl</span><br><span class="line">  libnetcdf          conda-forge/win-64::libnetcdf-4.8.1-nompi_h85765be_104</span><br><span class="line">  libpng             conda-forge/win-64::libpng-1.6.38-h19919ed_0</span><br><span class="line">  libpq              conda-forge/win-64::libpq-14.5-h1ea2d34_0</span><br><span class="line">  librttopo          conda-forge/win-64::librttopo-1.1.0-h2842628_11</span><br><span class="line">  libspatialindex    conda-forge/win-64::libspatialindex-1.9.3-h39d44d4_4</span><br><span class="line">  libspatialite      conda-forge/win-64::libspatialite-5.0.1-ha17912d_18</span><br><span class="line">  libssh2            conda-forge/win-64::libssh2-1.10.0-h9a1e1f7_3</span><br><span class="line">  libtiff            conda-forge/win-64::libtiff-4.4.0-h8e97e67_4</span><br><span class="line">  libwebp-base       conda-forge/win-64::libwebp-base-1.2.4-h8ffe710_0</span><br><span class="line">  libxcb             conda-forge/win-64::libxcb-1.13-hcd874cb_1004</span><br><span class="line">  libxml2            conda-forge/win-64::libxml2-2.9.14-hf5bbc77_4</span><br><span class="line">  libzip             conda-forge/win-64::libzip-1.9.2-h519de47_1</span><br><span class="line">  lz4-c              conda-forge/win-64::lz4-c-1.9.3-h8ffe710_1</span><br><span class="line">  m2w64-gcc-libgfor~ conda-forge/win-64::m2w64-gcc-libgfortran-5.3.0-6</span><br><span class="line">  m2w64-gcc-libs     conda-forge/win-64::m2w64-gcc-libs-5.3.0-7</span><br><span class="line">  m2w64-gcc-libs-co~ conda-forge/win-64::m2w64-gcc-libs-core-5.3.0-7</span><br><span class="line">  m2w64-gmp          conda-forge/win-64::m2w64-gmp-6.1.0-2</span><br><span class="line">  m2w64-libwinpthre~ conda-forge/win-64::m2w64-libwinpthread-git-5.0.0.4634.697f757-2</span><br><span class="line">  mapclassify        conda-forge/noarch::mapclassify-2.4.3-pyhd8ed1ab_0</span><br><span class="line">  markupsafe         conda-forge/win-64::markupsafe-2.1.1-py39hb82d6ee_1</span><br><span class="line">  matplotlib-base    conda-forge/win-64::matplotlib-base-3.6.0-py39haf65ace_0</span><br><span class="line">  mkl                conda-forge/win-64::mkl-2022.1.0-h6a75c08_874</span><br><span class="line">  msys2-conda-epoch  conda-forge/win-64::msys2-conda-epoch-20160418-1</span><br><span class="line">  munch              conda-forge/noarch::munch-2.5.0-py_0</span><br><span class="line">  munkres            conda-forge/noarch::munkres-1.1.4-pyh9f0ad1d_0</span><br><span class="line">  networkx           conda-forge/noarch::networkx-2.8.6-pyhd8ed1ab_0</span><br><span class="line">  numpy              conda-forge/win-64::numpy-1.23.3-py39h9061af7_0</span><br><span class="line">  openjpeg           conda-forge/win-64::openjpeg-2.5.0-hc9384bd_1</span><br><span class="line">  packaging          conda-forge/noarch::packaging-21.3-pyhd8ed1ab_0</span><br><span class="line">  pandas             conda-forge/win-64::pandas-1.4.4-py39h80a8885_0</span><br><span class="line">  pcre               conda-forge/win-64::pcre-8.45-h0e60522_0</span><br><span class="line">  pillow             conda-forge/win-64::pillow-9.2.0-py39hcef8f5f_2</span><br><span class="line">  pixman             conda-forge/win-64::pixman-0.40.0-h8ffe710_0</span><br><span class="line">  poppler            conda-forge/win-64::poppler-22.04.0-hb57f792_3</span><br><span class="line">  poppler-data       conda-forge/noarch::poppler-data-0.4.11-hd8ed1ab_0</span><br><span class="line">  postgresql         conda-forge/win-64::postgresql-14.5-he353ca9_0</span><br><span class="line">  proj               conda-forge/win-64::proj-9.0.1-h1cfcee9_1</span><br><span class="line">  pthread-stubs      conda-forge/win-64::pthread-stubs-0.4-hcd874cb_1001</span><br><span class="line">  pycparser          conda-forge/noarch::pycparser-2.21-pyhd8ed1ab_0</span><br><span class="line">  pyopenssl          conda-forge/noarch::pyopenssl-22.0.0-pyhd8ed1ab_0</span><br><span class="line">  pyparsing          conda-forge/noarch::pyparsing-3.0.9-pyhd8ed1ab_0</span><br><span class="line">  pyproj             conda-forge/win-64::pyproj-3.4.0-py39h2de216b_0</span><br><span class="line">  pysocks            conda-forge/noarch::pysocks-1.7.1-pyh0701188_6</span><br><span class="line">  python-dateutil    conda-forge/noarch::python-dateutil-2.8.2-pyhd8ed1ab_0</span><br><span class="line">  python_abi         conda-forge/win-64::python_abi-3.9-2_cp39</span><br><span class="line">  pytz               conda-forge/noarch::pytz-2022.2.1-pyhd8ed1ab_0</span><br><span class="line">  requests           conda-forge/noarch::requests-2.28.1-pyhd8ed1ab_1</span><br><span class="line">  rtree              conda-forge/win-64::rtree-1.0.0-py39h09fdee3_1</span><br><span class="line">  scikit-learn       conda-forge/win-64::scikit-learn-1.1.2-py39hfd4428b_0</span><br><span class="line">  scipy              conda-forge/win-64::scipy-1.9.1-py39h316f440_0</span><br><span class="line">  shapely            conda-forge/win-64::shapely-1.8.4-py39he0923fe_0</span><br><span class="line">  six                conda-forge/noarch::six-1.16.0-pyh6c4a22f_0</span><br><span class="line">  snappy             conda-forge/win-64::snappy-1.1.9-h82413e6_1</span><br><span class="line">  tbb                conda-forge/win-64::tbb-2021.5.0-h91493d7_2</span><br><span class="line">  threadpoolctl      conda-forge/noarch::threadpoolctl-3.1.0-pyh8a188c0_0</span><br><span class="line">  tiledb             conda-forge/win-64::tiledb-2.11.2-h3132609_0</span><br><span class="line">  unicodedata2       conda-forge/win-64::unicodedata2-14.0.0-py39hb82d6ee_1</span><br><span class="line">  urllib3            conda-forge/noarch::urllib3-1.26.11-pyhd8ed1ab_0</span><br><span class="line">  win_inet_pton      conda-forge/win-64::win_inet_pton-1.1.0-py39hcbf5309_4</span><br><span class="line">  xerces-c           conda-forge/win-64::xerces-c-3.2.3-h0e60522_5</span><br><span class="line">  xorg-libxau        conda-forge/win-64::xorg-libxau-1.0.9-hcd874cb_0</span><br><span class="line">  xorg-libxdmcp      conda-forge/win-64::xorg-libxdmcp-1.1.3-hcd874cb_0</span><br><span class="line">  xyzservices        conda-forge/noarch::xyzservices-2022.6.0-pyhd8ed1ab_0</span><br><span class="line">  zlib               conda-forge/win-64::zlib-1.2.12-hcfcfb64_3</span><br><span class="line">  zstd               conda-forge/win-64::zstd-1.5.2-h7755175_4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Proceed ([y]/n)? y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Downloading and Extracting Packages</span><br><span class="line">openjpeg-2.5.0       | 256 KB    | ######################################################################################## | 100%</span><br><span class="line">cffi-1.15.1          | 223 KB    | ######################################################################################## | 100%</span><br><span class="line">joblib-1.2.0         | 205 KB    | ######################################################################################## | 100%</span><br><span class="line">gdal-3.5.2           | 1.6 MB    | ######################################################################################## | 100%</span><br><span class="line">tiledb-2.11.2        | 3.2 MB    | ######################################################################################## | 100%</span><br><span class="line">markupsafe-2.1.1     | 25 KB     | ######################################################################################## | 100%</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">(geop) C:\Users\huangs\Desktop\test&gt;conda install -c conda-forge netcdf4</span><br><span class="line">Collecting package metadata (current_repodata.json): done</span><br><span class="line">Solving environment: done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">==&gt; WARNING: A newer version of conda exists. &lt;==</span><br><span class="line">  current version: 4.13.0</span><br><span class="line">  latest version: 4.14.0</span><br><span class="line"></span><br><span class="line">Please update conda by running</span><br><span class="line"></span><br><span class="line">    $ conda update -n base -c defaults conda</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Package Plan ##</span></span></span><br><span class="line"></span><br><span class="line">  environment location: D:\Miniconda3\envs\geop</span><br><span class="line"></span><br><span class="line">  added / updated specs:</span><br><span class="line">    - netcdf4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">The following packages will be downloaded:</span><br><span class="line"></span><br><span class="line">    package                    |            build</span><br><span class="line">    ---------------------------|-----------------</span><br><span class="line">    netcdf4-1.6.1              |nompi_py39h34fa13a_100         382 KB  conda-forge</span><br><span class="line">    ------------------------------------------------------------</span><br><span class="line">                                           Total:         382 KB</span><br><span class="line"></span><br><span class="line">The following NEW packages will be INSTALLED:</span><br><span class="line"></span><br><span class="line">  cftime             conda-forge/win-64::cftime-1.6.1-py39h5d4886f_0</span><br><span class="line">  netcdf4            conda-forge/win-64::netcdf4-1.6.1-nompi_py39h34fa13a_100</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Proceed ([y]/n)? y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Downloading and Extracting Packages</span><br><span class="line">netcdf4-1.6.1        | 382 KB    | ######################################################################################## | 100%</span><br><span class="line">Preparing transaction: done</span><br><span class="line">Verifying transaction: done</span><br><span class="line">Executing transaction: done</span><br><span class="line"></span><br><span class="line">(geop) C:\Users\huangs\Desktop\test&gt;conda install -c anaconda openpyxl</span><br><span class="line">Collecting package metadata (current_repodata.json): done</span><br><span class="line">Solving environment: done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">==&gt; WARNING: A newer version of conda exists. &lt;==</span><br><span class="line">  current version: 4.13.0</span><br><span class="line">  latest version: 4.14.0</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">(geop) C:\Users\huangs\Desktop\test&gt;conda install -c conda-forge cartopy</span><br><span class="line">Collecting package metadata (current_repodata.json): done</span><br><span class="line">Solving environment: done</span><br><span class="line"></span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">(geop) C:\Users\huangs\Desktop\test&gt;conda install -c conda-forge seaborn</span><br><span class="line">Collecting package metadata (current_repodata.json): done</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">(geop) C:\Users\huangs\Desktop\test&gt;conda install -c conda-forge matplotlib</span><br><span class="line">Collecting package metadata (current_repodata.json): done</span><br><span class="line">Solving environment: done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">==&gt; WARNING: A newer version of conda exists. &lt;==</span><br><span class="line">  current version: 4.13.0</span><br><span class="line">  latest version: 4.14.0</span><br><span class="line"></span><br><span class="line">Please update conda by running</span><br><span class="line"></span><br><span class="line">    $ conda update -n base -c defaults conda</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Package Plan ##</span></span></span><br><span class="line"></span><br><span class="line">  environment location: D:\Miniconda3\envs\geop</span><br><span class="line"></span><br><span class="line">  added / updated specs:</span><br><span class="line">    - matplotlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">The following packages will be downloaded:</span><br><span class="line"></span><br><span class="line">    package                    |            build</span><br><span class="line">    ---------------------------|-----------------</span><br><span class="line">    gdal-3.5.2                 |   py39h27f735e_0         1.6 MB  conda-forge</span><br><span class="line">    gst-plugins-base-1.20.3    |       h001b923_1         2.4 MB  conda-forge</span><br><span class="line">    gstreamer-1.20.3           |       h6b5321d_1         2.1 MB  conda-forge</span><br><span class="line">    hdf5-1.12.2                |nompi_h2a0e4a3_100        24.0 MB  conda-forge</span><br><span class="line">    libgdal-3.5.2              |       hc386656_0         9.5 MB  conda-forge</span><br><span class="line">    libpq-14.5                 |       hfcc5ef8_0         3.8 MB  conda-forge</span><br><span class="line">    libssh2-1.10.0             |       h680486a_3         228 KB  conda-forge</span><br><span class="line">    libzip-1.9.2               |       hfed4ece_1         145 KB  conda-forge</span><br><span class="line">    matplotlib-3.6.0           |   py39hcbf5309_0           7 KB  conda-forge</span><br><span class="line">    postgresql-14.5            |       h1c22c4f_0        23.2 MB  conda-forge</span><br><span class="line">    pyqt-5.15.7                |   py39hb08f45d_0         4.7 MB  conda-forge</span><br><span class="line">    pyqt5-sip-12.11.0          |   py39h415ef7b_0          82 KB  conda-forge</span><br><span class="line">    python-3.9.13              |h9a09f29_0_cpython        17.9 MB  conda-forge</span><br><span class="line">    qt-main-5.15.6             |       hf0cf448_0        68.8 MB  conda-forge</span><br><span class="line">    sip-6.6.2                  |   py39h415ef7b_0         542 KB  conda-forge</span><br><span class="line">    tiledb-2.11.2              |       h5689973_0         3.2 MB  conda-forge</span><br><span class="line">    tornado-6.2                |   py39hb82d6ee_0         657 KB  conda-forge</span><br><span class="line">    ------------------------------------------------------------</span><br><span class="line">                                           Total:       162.9 MB</span><br><span class="line"></span><br><span class="line">The following NEW packages will be INSTALLED:</span><br><span class="line"></span><br><span class="line">  glib               conda-forge/win-64::glib-2.72.1-h7755175_0</span><br><span class="line">  glib-tools         conda-forge/win-64::glib-tools-2.72.1-h7755175_0</span><br><span class="line">  gst-plugins-base   conda-forge/win-64::gst-plugins-base-1.20.3-h001b923_1</span><br><span class="line">  gstreamer          conda-forge/win-64::gstreamer-1.20.3-h6b5321d_1</span><br><span class="line">  libclang           conda-forge/win-64::libclang-14.0.6-default_h77d9078_0</span><br><span class="line">  libclang13         conda-forge/win-64::libclang13-14.0.6-default_h77d9078_0</span><br><span class="line">  libogg             conda-forge/win-64::libogg-1.3.4-h8ffe710_1</span><br><span class="line">  libvorbis          conda-forge/win-64::libvorbis-1.3.7-h0e60522_0</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">(geop) C:\Users\huangs\Desktop\test&gt;conda install -c conda-forge ipykernel</span><br><span class="line">Collecting package metadata (current_repodata.json): done</span><br><span class="line">Solving environment: done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">==&gt; WARNING: A newer version of conda exists. &lt;==</span><br><span class="line">  current version: 4.13.0</span><br><span class="line">  latest version: 4.14.0</span><br><span class="line"></span><br><span class="line">Please update conda by running</span><br><span class="line"></span><br><span class="line">    $ conda update -n base -c defaults conda</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Package Plan ##</span></span></span><br><span class="line"></span><br><span class="line">  environment location: D:\Miniconda3\envs\geop</span><br><span class="line"></span><br><span class="line">  added / updated specs:</span><br><span class="line">    - ipykernel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">The following packages will be downloaded:</span><br><span class="line"></span><br><span class="line">    package                    |            build</span><br><span class="line">    ---------------------------|-----------------</span><br><span class="line">    asttokens-2.0.8            |     pyhd8ed1ab_0          24 KB  conda-forge</span><br><span class="line">    debugpy-1.6.3              |   py39h415ef7b_0         3.2 MB  conda-forge</span><br><span class="line">    executing-1.0.0            |     pyhd8ed1ab_0          19 KB  conda-forge</span><br><span class="line">    ipykernel-6.15.3           |     pyh025b116_0         100 KB  conda-forge</span><br><span class="line">    ipython-8.5.0              |     pyh08f2357_1         553 KB  conda-forge</span><br><span class="line">    jedi-0.18.1                |     pyhd8ed1ab_2         799 KB  conda-forge</span><br><span class="line">    jupyter_client-7.3.5       |     pyhd8ed1ab_0          91 KB  conda-forge</span><br><span class="line">    jupyter_core-4.11.1        |   py39hcbf5309_0         106 KB  conda-forge</span><br><span class="line">    matplotlib-inline-0.1.6    |     pyhd8ed1ab_0          12 KB  conda-forge</span><br><span class="line">    prompt-toolkit-3.0.31      |     pyha770c72_0         254 KB  conda-forge</span><br><span class="line">    psutil-5.9.2               |   py39ha55989b_0         364 KB  conda-forge</span><br><span class="line">    pygments-2.13.0            |     pyhd8ed1ab_0         821 KB  conda-forge</span><br><span class="line">    pywin32-303                |   py39hb82d6ee_0         6.9 MB  conda-forge</span><br><span class="line">    pyzmq-24.0.0               |   py39hea35a22_0         437 KB  conda-forge</span><br><span class="line">    stack_data-0.5.0           |     pyhd8ed1ab_0          24 KB  conda-forge</span><br><span class="line">    traitlets-5.4.0            |     pyhd8ed1ab_0          85 KB  conda-forge</span><br><span class="line">    ------------------------------------------------------------</span><br><span class="line">                                           Total:        13.6 MB</span><br><span class="line"></span><br><span class="line">The following NEW packages will be INSTALLED:</span><br><span class="line"></span><br><span class="line">  asttokens          conda-forge/noarch::asttokens-2.0.8-pyhd8ed1ab_0</span><br><span class="line">  backcall           conda-forge/noarch::backcall-0.2.0-pyh9f0ad1d_0</span><br><span class="line">  backports          conda-forge/noarch::backports-1.0-py_2</span><br><span class="line">  backports.functoo~ conda-forge/noarch::backports.functools_lru_cache-1.6.4-pyhd8ed1ab_0</span><br><span class="line">  debugpy            conda-forge/win-64::debugpy-1.6.3-py39h415ef7b_0</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">(geop) C:\Users\huangs\Desktop\test&gt;conda env export &gt; C:\Users\huangs\Desktop\test\geop20220918.yml</span><br><span class="line"></span><br><span class="line">(geop) C:\Users\huangs\Desktop\test&gt;conda activate base</span><br><span class="line">(base) C:\Users\huangs\Desktop\test&gt;conda env create -f C:\Users\huangs\Desktop\test\geop20220918.yml</span><br><span class="line">(geop) C:\Users\huangs\Desktop\test&gt;conda remove --name geop_test --all</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python环境配置 </tag>
            
            <tag> Conda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栅格处理(杂)：ArcGIS处理栅格时压缩</title>
      <link href="/posts/7a29f7e7/"/>
      <url>/posts/7a29f7e7/</url>
      
        <content type="html"><![CDATA[<p>ArcGIS处理栅格数据时如常用的<mark>栅格裁剪</mark>默认并不会压缩，因此生成文件可能会很大（对比过<a href="https://hscyber.github.io/posts/a9be2430/">压缩</a>的区别），一般需要在工具箱的环境参数里设置数据压缩格式<a href="https://desktop.arcgis.com/zh-cn/arcmap/latest/tools/environments/compression.htm">参考</a>。此外，如果栅格处理会报错，一般需要<strong>关闭并行</strong>。</p><span id="more"></span><h3 id="栅格压缩与并行设置"><a class="markdownIt-Anchor" href="#栅格压缩与并行设置"></a> 栅格压缩与并行设置</h3><p>ArcGIS环境变量设置<a href="https://desktop.arcgis.com/zh-cn/arcmap/latest/tools/environments/compression.htm">参考</a>，裁剪栅格举例：Data Management Tools.tbx\Raster\Raster Processing\Clip。</p><img src="/posts/7a29f7e7/image.png" class alt="image"><p>如果是ArcPy代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> arcpy</span><br><span class="line">arcpy.env.parallelProcessingFactor = <span class="string">&quot;0&quot;</span></span><br><span class="line">arcpy.env.compression = <span class="string">&quot;LZW&quot;</span></span><br><span class="line"><span class="comment"># 常用，设置覆盖输出</span></span><br><span class="line">arcpy.env.overwriteOutput = <span class="literal">True</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 时空数据处理分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ArcGIS </tag>
            
            <tag> 栅格 </tag>
            
            <tag> 栅格运算报错 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电脑重装系统Ubuntu22.04.1 LTS记录</title>
      <link href="/posts/2fb61b4d/"/>
      <url>/posts/2fb61b4d/</url>
      
        <content type="html"><![CDATA[<p>记录一下旧笔记本重装Ubuntu Desktop22.04.1 LTS的简要过程</p><span id="more"></span><h3 id="主要步骤"><a class="markdownIt-Anchor" href="#主要步骤"></a> 主要步骤</h3><ol><li>下载<a href="https://rufus.ie/zh/">rufus</a>以及<a href="https://ubuntu.com/download/desktop">ubuntu destop镜像</a>创建启动盘，参数默认即可</li><li>按照<a href="https://ubuntu.com/tutorials/install-ubuntu-desktop#1-overview">官网教程</a>逐步安装并完成更新，电脑启动项自查，见参考<a href="https://zhuanlan.zhihu.com/p/496107394">知乎</a></li><li>安装vim ，切换系统镜像源为阿里源，备份初始文件再使用vim编辑器操作，清空之前的内容，<code>i</code>复制粘贴内容，再输入<code>=</code>以及<code>:wq</code>保存并退出，然后再<code>sudo apt-get update &amp;&amp; apt-get upgrade</code></li><li>安装搜狗输入法<a href="https://shurufa.sogou.com/linux">下载.deb</a>，后续参考这个<a href="https://www.cnblogs.com/star-another/p/16298866.html">教程</a></li><li>下载配置<a href="https://github.com/Dreamacro/clash/releases">clash for linux</a>以访问谷歌【参考代理教程】</li><li>安装<a href="https://www.google.com/intl/zh-CN/chrome/">Chrome</a>并登陆完成同步</li><li>安装<a href="https://im.qq.com/linuxqq/download.html">腾讯QQ</a>，腾讯<a href="https://meeting.tencent.com/download?mfrom=OfficialIndex_TopBanner1_Download">会议</a></li><li>Typora安装并激活<a href="https://typora.io/#linux">install</a></li><li>QGIS for ubuntu【可选】</li><li>WPS，ubuntu自带的office可以打开word ppt excel，暂可不安装【可选】</li><li>安装Miniconda3并迁移配置之前的环境，基于yml文件</li><li>安装vs code</li><li>安装gotohttp</li><li>……</li></ol><img src="/posts/2fb61b4d/image-20220912223323738.png" class alt="image-20220912223323738"><h3 id="问题记录"><a class="markdownIt-Anchor" href="#问题记录"></a> 问题记录</h3><ol><li>window上制作启动盘推荐rufus</li><li>vim编辑器的使用可先掌握基本的插入 复制粘贴及保存</li><li>typora激活失败可以选择离线激活</li><li>……</li></ol>]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 重装系统 </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电脑管理(杂)：数据清理备份以便系统重装</title>
      <link href="/posts/3d00caa6/"/>
      <url>/posts/3d00caa6/</url>
      
        <content type="html"><![CDATA[<p>这两天准备重装一下旧笔记本，记录一下过程。先是数据的清理和备份，由于应用可以直接参考我的台式机所以仅迁移数据，如果是单电脑最好记录一下现在用的一些主要的应用程序避免遗漏。主要备份内容：</p><span id="more"></span><p>如果<strong>只涉及C盘换系统，可直接将C盘文件转存至其他数据盘即可</strong>，或者用一个1T/500G固态硬盘用于数据拷贝（现在不管是电脑内存还是固态移动硬盘都一直在掉价，不贵，买一两个日常使用和数据备份用）。由于我的电脑一般不分超过3个盘（推荐），这里我的笔记本分盘是</p><ol><li>C系统盘，拷用户及桌面数据；（500G，三星pcie固态）</li><li>D数据盘先清理再拷，减少细碎的文件，因为机械硬盘小文件传输会比较耗时（机械500G）</li><li>E程序盘2，会装一些容易数据增长的软件比如qq微信这种，拷一下数据（机械500G）</li></ol><p>具体而言：</p><ol><li>User文件夹(会包含桌面文件)；比如我的文件夹在<strong>C:\Users\huangs</strong></li><li>数据及文档，包括百度网盘下载路径等；</li><li>QQ微信等程序提前导出数据并备份，找到文件路径拷贝；</li><li>主要应用的用户配置文件，可选，包括python或者R的环境</li><li>……其他依个人需求定</li></ol><p>备份完确认关键数据无缺失，检查一下大小和文件数目，相差不大就可以准备重装了</p>]]></content>
      
      
      <categories>
          
          <category> 计算机软硬件知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记本电脑 </tag>
            
            <tag> 重装系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电脑管理(杂)：笔记本电池不耐用？换电池？</title>
      <link href="/posts/39c4a07/"/>
      <url>/posts/39c4a07/</url>
      
        <content type="html"><![CDATA[<p>笔记本电脑用久了尤其是游戏本发现电池会很不耐用甚至是不插外接电源都没法工作，这时候可能需要<strong>更换电池</strong>，但换之前先排查一下是不是有<strong>异常耗电</strong>的情况……主要针对<strong>WINDOWS</strong></p><span id="more"></span><p>其次电脑用了几年感觉卡可以花几天时间<strong>重装系统</strong>，尤其是windows，一般都会<strong>越用越臃肿</strong>碎片垃圾累积导致电脑变卡。而且现在装系统都是一键式的很方便，麻烦的是迁移数据而言。我自己就准备趁着中秋重装一下瘦瘦身。当然，给旧电脑升级配置也是一个选项，加内存条换固态是最常用的。</p><p>如果电脑安装了一些杂七杂八的软件，尤其是诸如某某壁纸浏览器之类的，包括360的一些产品，会在电脑里附带一些奇怪的exe，在后台一直运行导致耗电异常。排查</p><ol><li>笔记本设置不接通电源时不关机保持后台运行</li><li>打开电脑任务管理器，查看进程和启动项，大部分自启动的都可以关闭</li><li>关闭显示屏放电，联网，即自然状态让电脑耗尽，看看大概待机多长时间关机</li><li>开机，点击右下角的电池看一下电池设置，查看电池24小时的应用使用情况</li><li>针对耗电量大的exe挨个搜索看看是什么软件</li><li>非系统的软件建议直接清理或者卸载</li><li>非必要的系统<strong>服务</strong>也建议关闭并设置为手动启动</li><li>再充放电一次，查看电脑使用情况</li><li>如果现在待机时间正常且没有异常耗电的应用，那么说明问题已解决</li><li>如果没有异常应用但是待机时间很短，那么可以考虑换个电池，找原装的即可，一般150-300</li></ol><img src="/posts/39c4a07/image-20220911213439135.png" class alt="image-20220911213439135"><img src="/posts/39c4a07/image-20220911214328717.png" class alt="image-20220911214328717">]]></content>
      
      
      <categories>
          
          <category> 计算机软硬件知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记本电脑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pyinstaller最小化打包py脚本为可执行exe</title>
      <link href="/posts/9acc11ef/"/>
      <url>/posts/9acc11ef/</url>
      
        <content type="html"><![CDATA[<p>今天帮同学打包py脚本为可执行程序exe时遇到了文件过大的问题（基于conda环境&amp;<a href="https://pyinstaller.org/en/stable/installation.html">pyinstaller</a>），网上查了一下但是很多方案都没说明问题，在此记录一下简要方案以及个人案例。</p><span id="more"></span><p>包安装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install pyinstaller</span><br><span class="line"><span class="comment"># or upgrade to a newer version:</span></span><br><span class="line">pip install --upgrade pyinstaller</span><br></pre></td></tr></table></figure><p>py打包为exe可以干嘛？<strong>不需要安装Python软件环境即可执行程序完成响应的处理，便于共享和处理</strong></p><h2 id="步骤及案例参考"><a class="markdownIt-Anchor" href="#步骤及案例参考"></a> 步骤及案例参考</h2><p><strong>原因</strong>：如果直接使用conda环境进行打包会出现文件过大的问题，通常是因为<mark>基于conda安装的包会比正常pip安装的包更大</mark>，打包时会增加依赖，导致最终的exe很大，如只要是包含numpy或者pandas模块的py脚本打包，基本都会大于200M，测试过程略（可以自行新建环境测试包依赖），因此建议是<strong>新建环境安装包并打包</strong>。这里我一开始<strong>直接打包是300M，新环境中打包后为29M</strong>，而且由于生成的文件小了，<font color="#dd0000">速度也快了很多</font></p><h3 id="新建环境并安装"><a class="markdownIt-Anchor" href="#新建环境并安装"></a> 新建环境并安装</h3><p>更多包和环境管理可见<a href="https://hscyber.github.io/posts/42743416/">Python环境管理</a>，打开命令行依次执行，<font color="#dd0000">包通过pip命令安装</font></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">conda create -n exe python=3.8</span><br><span class="line">conda activate exe</span><br><span class="line">pip install --upgrade pyinstaller</span><br><span class="line">pip install pandas</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装pandas会直接安装numpy及其依赖，如果有其他包也直接pip安装</span></span><br></pre></td></tr></table></figure><h3 id="打包"><a class="markdownIt-Anchor" href="#打包"></a> 打包</h3><p>打包会在目录下默认生成临时文件夹Building及包含exe的dist文件夹，可以添加参数指定位置，或生成后删除即可。<a href="https://pyinstaller.org/en/stable/usage.html#options">参数解释</a></p><ul><li>-F 指定生成单个exe程序</li><li>–distpath后跟的是exe文件存放路径，<strong>可以使用相对或绝对路径，正反斜杠都可以</strong></li><li>–workpath后跟的是中间过程文件路径，可以使用相对或绝对路径</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入指定要打包的脚本文件夹</span></span><br><span class="line">cd C:\Users\huangs\Desktop\test</span><br><span class="line">pyinstaller -F myscript.py</span><br><span class="line"><span class="comment"># 相对路径，./代表当期路径下</span></span><br><span class="line">pyinstaller -F zxzdm.py --distpath ./res --workpath ./res</span><br><span class="line">pyinstaller -F zxzdm.py --distpath .\res --workpath .\res</span><br><span class="line"><span class="comment"># 绝对路径</span></span><br><span class="line">pyinstaller -F myscript.py --distpath C:\Users\huangs\Desktop\test\res --workpath C:\Users\huangs\Desktop\test\res</span><br></pre></td></tr></table></figure><h3 id="案例"><a class="markdownIt-Anchor" href="#案例"></a> 案例</h3><blockquote><p>举例一下应用的场景</p></blockquote><p>比如我有一个任务，每周下载数据并将其按天和城市提取为csv，下载的文件为多个zip压缩文件，压缩文件中为原始的txt，我需要<strong>定期多次</strong>下载数据并转换。也可以给他人共享</p><ul><li>每次都要打开脚本运行会有点心烦，但是又必须经常检查是否下载缺失，于是就可以将脚本转换为exe，将下载的压缩包统统丢进一个文件夹，然后双击exe自动提取和去重文件并转换为按天分割的csv。</li></ul><p>写好脚本后进行以下改动，需要注意一下<strong>路径问题即可，将所有的绝对路径改成相对路径</strong>，涉及文件输出可以新建文件夹<strong>mkdir</strong>，涉及路径则使用<strong>os.path.join</strong>拼接，更多文件/文件夹操作可<a href="https://hscyber.github.io/posts/290b74f/">参考</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判断文件夹是否存在并新建的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_dir</span>(<span class="params">cwd</span>):</span><br><span class="line">    isExists = os.path.exists(cwd)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isExists:</span><br><span class="line">        os.makedirs(cwd)</span><br><span class="line">    <span class="keyword">return</span> cwd</span><br><span class="line"><span class="comment"># 这里默认获取当前路径，即将exe放在指定文件夹下即可执行</span></span><br><span class="line">root = os.getcwd()</span><br><span class="line"><span class="comment"># process</span></span><br><span class="line">...</span><br><span class="line"><span class="comment"># output</span></span><br><span class="line">outfounder = os.path.join(root, <span class="string">&#x27;tables&#x27;</span>)</span><br><span class="line">outfounder = create_dir(outfounder)</span><br><span class="line"><span class="meta">... </span>   </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(outcsvs)):</span><br><span class="line">    <span class="built_in">print</span>(names[i])</span><br><span class="line">    path = os.path.join(outfounder,names[i])</span><br><span class="line">    outcsvs[i].to_csv(path, index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>如果是需要手动指定路径：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root=<span class="built_in">input</span>(<span class="string">&#x27;请输入data_zip路径:  &#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pyinstaller </tag>
            
            <tag> exe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【笔记内容部分汇总】</title>
      <link href="/posts/6ce40869/"/>
      <url>/posts/6ce40869/</url>
      
        <content type="html"><![CDATA[<center>最近更新时间：2022/09/01，查看左侧目录；详细类别见分类</center><span id="more"></span><h2 id="python基础相关"><a class="markdownIt-Anchor" href="#python基础相关"></a> Python基础相关</h2><h3 id="python环境"><a class="markdownIt-Anchor" href="#python环境"></a> Python环境</h3><p><a href="https://hscyber.github.io/posts/c5ac1642/">Python环境(1)：基础知识</a></p><p><a href="https://hscyber.github.io/posts/9089f596/">Python环境(2)：安装及配置</a></p><p><a href="https://hscyber.github.io/posts/42743416/">Python环境(3)：环境及包管理Conda+pypi</a></p><p><a href="https://hscyber.github.io/posts/911c717a/">Python环境(4)：环境迁移及共享</a></p><p><a href="https://hscyber.github.io/posts/364976c7/">Python环境(杂)：conda update CondaHTTPError</a></p><h3 id="python性能"><a class="markdownIt-Anchor" href="#python性能"></a> Python性能</h3><p><a href="https://hscyber.github.io/posts/4b434785/">python性能(1)：multiprocessing多进程</a></p><p><a href="https://hscyber.github.io/posts/a8ff5b9/">python性能(2)：大文件处理思路</a></p><h3 id="基础操作"><a class="markdownIt-Anchor" href="#基础操作"></a> 基础操作</h3><p><a href="https://hscyber.github.io/posts/659ef075/">浅析Python中的类、模块、包</a></p><p><a href="https://hscyber.github.io/posts/a0dd2ef9/">Python中的时间格式(1)：详细版</a></p><p><a href="https://hscyber.github.io/posts/13994161/">Python中的时间格式(2)：速查版</a></p><p><a href="https://hscyber.github.io/posts/3c868742/">Python处理Json文件</a></p><p><a href="https://hscyber.github.io/posts/da405e24/">正则表达式re模块用法</a></p><p><a href="https://hscyber.github.io/posts/290b74f/">Python文件路径及目录批处理</a></p><h2 id="python可视化"><a class="markdownIt-Anchor" href="#python可视化"></a> Python可视化</h2><h3 id="matplotlib基础篇"><a class="markdownIt-Anchor" href="#matplotlib基础篇"></a> Matplotlib基础篇</h3><p><a href="https://hscyber.github.io/posts/8dfff56a/">matplotlib基础(1)：图的组成元素</a></p><p><a href="https://hscyber.github.io/posts/5524eff4/">matplotlib基础(2)：绘图逻辑与输出尺寸/格式</a></p><p><a href="https://hscyber.github.io/posts/459b5ff7/">matplotlib基础(3)：图片存储常用格式及参数设置</a></p><p><a href="https://hscyber.github.io/posts/152b5c56/">matplotlib基础(杂)：边框spines及刻度ticks/labels属性设置及隐藏</a></p><h2 id="gis基础及空间数据处理"><a class="markdownIt-Anchor" href="#gis基础及空间数据处理"></a> GIS基础及空间数据处理</h2><h3 id="gis基础"><a class="markdownIt-Anchor" href="#gis基础"></a> GIS基础</h3><p><a href="https://hscyber.github.io/posts/c82d0555/">GIS基础(1)：浅析地理/投影坐标系</a></p><p><a href="https://hscyber.github.io/posts/286d5938/">GIS基础(2)：ArcGIS常用工具清单及用途概述</a></p><h3 id="矢量及栅格数据基础"><a class="markdownIt-Anchor" href="#矢量及栅格数据基础"></a> 矢量及栅格数据基础</h3><p><a href="https://hscyber.github.io/posts/54103437/">矢栅处理(1)：分区统计sjoin|zonal</a></p><p><a href="https://hscyber.github.io/posts/a9be2430/">矢栅处理(2)：GeoTIFF数值类型及压缩</a></p><p><a href="https://hscyber.github.io/posts/f61ccf5/">矢栅处理(3)：Python读和写TIFF文件</a></p><p><a href="https://hscyber.github.io/posts/448bb583/">矢栅处理(4)：Python读取NC文件</a></p><p><a href="https://hscyber.github.io/posts/ef2a4876/">矢栅处理(5)：R语言nc转多张Geotif</a></p><p><a href="https://hscyber.github.io/posts/2f2d96ec/">矢栅处理(6)：点矢量提取栅格值extract</a></p><p><a href="https://hscyber.github.io/posts/57d7f29/">矢栅处理(杂)：geopandas常用函数小结</a></p><p><a href="https://hscyber.github.io/posts/42111e30/">矢量处理(杂)：OSM数据下载及shapefile读写</a></p><p><a href="https://hscyber.github.io/posts/1ac444bb/">栅格处理(杂)：栅格重分类或特定值转图层(批处理)</a></p><h3 id="pandas数据处理"><a class="markdownIt-Anchor" href="#pandas数据处理"></a> Pandas数据处理</h3><p><a href="https://hscyber.github.io/posts/f9c7a8a1/">Pandas(1)：数据选取/条件筛选小结</a></p><p><a href="https://hscyber.github.io/posts/18b022c/">Pandas(杂)：表格的各种连接方式</a></p><p><a href="https://hscyber.github.io/posts/4d972282/">Pandas(杂)：List/pandas文本包含筛选</a></p><p><a href="https://hscyber.github.io/posts/374675e0/">Pandas(杂)：字符串列拆分及合并</a></p><p><a href="https://hscyber.github.io/posts/a234f8ea/">Pandas(杂)：多表格写出excel</a></p><h2 id="研究生相关"><a class="markdownIt-Anchor" href="#研究生相关"></a> 研究生相关</h2><h3 id="文献与跟踪"><a class="markdownIt-Anchor" href="#文献与跟踪"></a> 文献与跟踪</h3><p><a href="https://hscyber.github.io/posts/33f7b1b7/">文献篇(1) 论文检索</a></p><p><a href="https://hscyber.github.io/posts/99dce68a/">文献篇(2) 论文下载</a></p><p><a href="https://hscyber.github.io/posts/e8c71149/">文献篇(3) 如何开展研究背景调研和总结？</a></p><p><a href="https://hscyber.github.io/posts/4270937d/">研究跟踪(1)：感兴趣期刊及研究方向的最新动态获取</a></p><h3 id="杂"><a class="markdownIt-Anchor" href="#杂"></a> 杂</h3><p><a href="https://hscyber.github.io/posts/81af99e4/">快速提升学术论文写作能力的1313法则</a></p><p><a href="https://hscyber.github.io/posts/9730787a/">数据处理习惯</a></p><h3 id="统计相关"><a class="markdownIt-Anchor" href="#统计相关"></a> 统计相关</h3><p><a href="https://hscyber.github.io/posts/ca790165/">论文学习(1)：Generalized Linear Mixed Models</a></p><p><a href="https://hscyber.github.io/posts/aff1e629/">【预】统计基础(1)：概念学习与理解1</a></p><p><a href="https://hscyber.github.io/posts/5663ac13/">【预】回归建模(2)：变量预览及预处理</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记库分类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栅格处理(杂)：栅格重分类或特定值转图层(批处理)</title>
      <link href="/posts/1ac444bb/"/>
      <url>/posts/1ac444bb/</url>
      
        <content type="html"><![CDATA[<p>今天与同学交流的一个问题：如果提取一个栅格数据<mark>tif中特定的值</mark>并生成新的栅格数据，其他值设为空，这和重分类比较像，存放一下代码实现。</p><span id="more"></span><p>栅格读写tif的<a href="https://hscyber.github.io/posts/f61ccf5/">参考这</a>，关于并行的看一下<a href="https://hscyber.github.io/posts/4b434785/">multiprocessing多进程</a>，先看一下电脑的最大核数。关于<a href="https://hscyber.github.io/posts/a9be2430/">tif压缩格式</a>可以看之前笔记最底部的测试。</p><h2 id="非并行"><a class="markdownIt-Anchor" href="#非并行"></a> 非并行</h2><p>代码逻辑比较直白。这里提取的是[10,20,30,40]，空值设为了0，新文件名称这里直接将默认值添加到了后缀，可自行修改，代码测试无误</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">@File    :   reclass_tif.py</span></span><br><span class="line"><span class="string">@Time    :   2022/08/30 21:15:45</span></span><br><span class="line"><span class="string">@Author  :   huangsh </span></span><br><span class="line"><span class="string">@Version :   1.0</span></span><br><span class="line"><span class="string">@Contact :   1126456109@qq.com</span></span><br><span class="line"><span class="string">@Desc    :   None</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#未安装包可以先安装 conda install -c conda-forge rasterio</span></span><br><span class="line"><span class="keyword">import</span> rasterio</span><br><span class="line"><span class="keyword">from</span> glob <span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">path = <span class="string">r&quot;C:\Users\huangs\Desktop\test\inpath\\&quot;</span></span><br><span class="line">files = glob(path+<span class="string">&quot;*.tif&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(files)</span><br><span class="line">outpath = <span class="string">r&quot;C:\Users\huangs\Desktop\test\outpath\\&quot;</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">    <span class="keyword">with</span> rasterio.<span class="built_in">open</span>(file) <span class="keyword">as</span> src_dataset:</span><br><span class="line">        profiles = src_dataset.profile</span><br><span class="line">        band = src_dataset.read(<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 目标值更新</span></span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>]:</span><br><span class="line">        band_up = np.array(band)</span><br><span class="line">        band_up[band_up!=value] = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 设置输出文件路径，压缩格式可以选择&#x27;DEFLATE&#x27;</span></span><br><span class="line">        outfile = outpath+os.path.basename(file).replace(<span class="string">&quot;.tif&quot;</span>,<span class="string">&quot;_&quot;</span>+<span class="built_in">str</span>(value)+<span class="string">&quot;.tif&quot;</span>)</span><br><span class="line">        profiles.update(nodata=<span class="number">0</span>,compress=<span class="string">&#x27;LZW&#x27;</span>)</span><br><span class="line">        <span class="keyword">with</span> rasterio.<span class="built_in">open</span>(outfile, <span class="string">&#x27;w&#x27;</span>, **profiles) <span class="keyword">as</span> dst:</span><br><span class="line">                dst.write(band_up, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="并行"><a class="markdownIt-Anchor" href="#并行"></a> 并行</h2><p><a href="https://hscyber.github.io/posts/4b434785/">multiprocessing多进程</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*-coding:utf-8 -*-</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">@File    :   reclass_tif.py</span></span><br><span class="line"><span class="string">@Time    :   2022/08/30 21:15:45</span></span><br><span class="line"><span class="string">@Author  :   huangsh </span></span><br><span class="line"><span class="string">@Version :   1.0</span></span><br><span class="line"><span class="string">@Contact :   1126456109@qq.com</span></span><br><span class="line"><span class="string">@Desc    :   None</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># conda install -c conda-forge rasterio</span></span><br><span class="line"><span class="keyword">import</span> rasterio</span><br><span class="line"><span class="keyword">from</span> glob <span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">outpath = <span class="string">r&quot;C:\Users\huangs\Desktop\test\outpath\\&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reclass</span>(<span class="params">file</span>):</span><br><span class="line">    <span class="keyword">with</span> rasterio.<span class="built_in">open</span>(file) <span class="keyword">as</span> src_dataset:</span><br><span class="line">        profiles = src_dataset.profile</span><br><span class="line">        band = src_dataset.read(<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 目标值更新</span></span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>]:</span><br><span class="line">        band_up = np.array(band)</span><br><span class="line">        band_up[band_up!=value] = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 设置输出文件路径，压缩格式可以选择&#x27;DEFLATE&#x27;</span></span><br><span class="line">        outfile = outpath+os.path.basename(file).replace(<span class="string">&quot;.tif&quot;</span>,<span class="string">&quot;_&quot;</span>+<span class="built_in">str</span>(value)+<span class="string">&quot;.tif&quot;</span>)</span><br><span class="line">        profiles.update(nodata=<span class="number">0</span>,compress=<span class="string">&#x27;LZW&#x27;</span>)</span><br><span class="line">        <span class="keyword">with</span> rasterio.<span class="built_in">open</span>(outfile, <span class="string">&#x27;w&#x27;</span>, **profiles) <span class="keyword">as</span> dst:</span><br><span class="line">                dst.write(band_up, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    path = <span class="string">r&quot;C:\Users\huangs\Desktop\test\inpath\\&quot;</span></span><br><span class="line">    files = glob(path+<span class="string">&quot;*.tif&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(files)</span><br><span class="line">    </span><br><span class="line">    pool = Pool(<span class="number">8</span>)</span><br><span class="line">    <span class="comment"># files是一个参数列表list,[file1, file2, ...]</span></span><br><span class="line">    pool.<span class="built_in">map</span>(reclass, files)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 时空数据处理分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> rasterio </tag>
            
            <tag> reclass </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matplotlib基础(杂)：边框spines及刻度ticks/labels属性设置及隐藏</title>
      <link href="/posts/152b5c56/"/>
      <url>/posts/152b5c56/</url>
      
        <content type="html"><![CDATA[<p>绘制图形的时候，有时候绘制草图或者绘制<strong>多轴时</strong>，需要根据隐藏边框、刻度及标签，或者设置它们的属性，如颜色、尺寸等等。</p><span id="more"></span><h2 id="单图案例"><a class="markdownIt-Anchor" href="#单图案例"></a> 单图案例</h2><h3 id="隐藏或不显示"><a class="markdownIt-Anchor" href="#隐藏或不显示"></a> 隐藏或不显示</h3><p>模块及测试数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">mpl.rcParams[<span class="string">&#x27;figure.dpi&#x27;</span>] = <span class="number">120</span></span><br><span class="line">mpl.rcParams[<span class="string">&#x27;font.size&#x27;</span>]=<span class="number">10.5</span></span><br><span class="line">cm = <span class="number">1</span>/<span class="number">2.54</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># x[0,2pi],400个点，y=sin(x^2)</span></span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">2</span> * np.pi, <span class="number">400</span>)</span><br><span class="line">y = np.sin(x ** <span class="number">2</span>)</span><br><span class="line">y2 = np.sin(x)</span><br></pre></td></tr></table></figure><p>隐藏部件spines及ticks及tickslabels，根据参数要求传入<strong>空的列表或者空字符串即可</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ax.spines[[<span class="string">&#x27;top&#x27;</span>, <span class="string">&#x27;right&#x27;</span>]].set_visible(<span class="literal">False</span>)</span><br><span class="line">ax.spines[:].set_visible(<span class="literal">False</span>) <span class="comment"># 设置四根轴全部不可见</span></span><br><span class="line">ax.set_xticks([])</span><br><span class="line">ax.set_yticks([])</span><br><span class="line">ax.set_xticklabels([])</span><br><span class="line">ax.set_yticklabels([])</span><br><span class="line">ax.set_xlabel(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">ax.set_title(<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>设置属性，由于<strong>多图</strong>的时候会出现叠盖，可以设置zoder属性或者分别设置，这里两张图，分别设置即可，关于label中的文本样式均可以参考<a href="https://matplotlib.org/stable/api/text_api.html#matplotlib.text.Text">text</a>的参数进行调节</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">12</span>*cm,<span class="number">8</span>*cm), facecolor=<span class="string">&#x27;w&#x27;</span>,constrained_layout=<span class="literal">True</span>)</span><br><span class="line">ax.plot(x, y,c=<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ax.spines[[<span class="string">&#x27;top&#x27;</span>, <span class="string">&#x27;right&#x27;</span>]].set_visible(<span class="literal">False</span>)</span><br><span class="line">ax.spines[[<span class="string">&#x27;left&#x27;</span>]].set_color(c=<span class="string">&quot;g&quot;</span>)</span><br><span class="line">ax.spines[[<span class="string">&#x27;bottom&#x27;</span>]].set_color(c=<span class="string">&quot;b&quot;</span>)</span><br><span class="line"><span class="comment"># ticks，pad代表与轴的距离</span></span><br><span class="line">ax.tick_params(axis=<span class="string">&#x27;x&#x27;</span>, direction=<span class="string">&#x27;out&#x27;</span>, length=<span class="number">6</span>, width=<span class="number">2</span>, colors=<span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">pad=<span class="number">12</span>,labelcolor=<span class="string">&#x27;y&#x27;</span>,labelsize=<span class="number">12</span>,labelrotation=<span class="number">30</span>)</span><br><span class="line">ax.tick_params(axis=<span class="string">&#x27;y&#x27;</span>, direction=<span class="string">&#x27;in&#x27;</span>, length=<span class="number">4</span>, width=<span class="number">1</span>, colors=<span class="string">&#x27;orange&#x27;</span>,</span><br><span class="line">labelcolor=<span class="string">&#x27;b&#x27;</span>,labelsize=<span class="number">8</span>)</span><br><span class="line"><span class="comment"># 单位注释等，label</span></span><br><span class="line">ax.set_ylabel(<span class="string">&quot;y1&quot;</span>)</span><br><span class="line">ax.set_title(<span class="string">&#x27;A single plot&#x27;</span>)</span><br><span class="line"><span class="comment"># 另一张重叠的图</span></span><br><span class="line">ax2 = ax.twinx()</span><br><span class="line">ax2.plot(x, y2,c=<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">ax2.spines[[<span class="string">&#x27;right&#x27;</span>]].set_color(c=<span class="string">&quot;m&quot;</span>)</span><br><span class="line">ax2.spines[[<span class="string">&#x27;top&#x27;</span>,<span class="string">&#x27;left&#x27;</span>,<span class="string">&#x27;bottom&#x27;</span>]].set_visible(<span class="literal">False</span>)</span><br><span class="line">ax2.set_ylabel(<span class="string">&quot;y2&quot;</span>,labelpad=<span class="number">5</span>,c = <span class="string">&#x27;m&#x27;</span>,rotation=<span class="string">&#x27;horizontal&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fig.savefig(<span class="string">&quot;./spines_ticks.png&quot;</span>,dpi=<span class="number">300</span>,bbox_inches=<span class="string">&#x27;tight&#x27;</span>,pad_inches=<span class="number">0.2</span>)</span><br></pre></td></tr></table></figure><img src="/posts/152b5c56/spines_ticks.png" class alt="spines_ticks"><h3 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h3><ul><li><a href="https://matplotlib.org/stable/api/index.html"> Matplotlib API</a></li><li><a href="https://matplotlib.org/stable/api/spines_api.html">spines</a></li><li><a href="https://matplotlib.org/stable/api/_as_gen/matplotlib.axis.Axis.set_tick_params.html">set_tick_params</a></li><li><a href="https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.set_xticklabels.html">ticklabels</a></li><li><a href="https://matplotlib.org/stable/api/text_api.html#matplotlib.text.Text">text</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python可视化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Matplotlib </tag>
            
            <tag> spines </tag>
            
            <tag> tick_params </tag>
            
            <tag> set_xticklabels </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python环境(杂)：conda update CondaHTTPError</title>
      <link href="/posts/364976c7/"/>
      <url>/posts/364976c7/</url>
      
        <content type="html"><![CDATA[<p>之前在安装包的时候遇到过这样的问题，能够检索到环境但是报<font color="#dd0000">conda update CondaHTTPError</font>，这里给出一种常规的解决方案。</p><span id="more"></span><p>既然是网络问题一般都可以，挂梯子解决，比如我这里用clash代理，进入CMD后切换环境，再安装即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda activate base</span><br><span class="line">conda activate gis</span><br><span class="line">conda install -c conda-forge seaborn</span><br></pre></td></tr></table></figure><img src="/posts/364976c7/image1.png" class alt="name"><img src="/posts/364976c7/image2.png" class alt="name2">]]></content>
      
      
      <categories>
          
          <category> Python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Conda </tag>
            
            <tag> CondaHTTPError </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python环境(4)：环境迁移及共享</title>
      <link href="/posts/911c717a/"/>
      <url>/posts/911c717a/</url>
      
        <content type="html"><![CDATA[<p>承接<a href="https://hscyber.github.io/posts/42743416/">Python环境(3)：环境及包管理</a>，此处记录环境的迁移与共享，包括本地的yml及离线</p><span id="more"></span><h2 id="常规迁移"><a class="markdownIt-Anchor" href="#常规迁移"></a> 常规迁移</h2><p>首选，支持跨平台安装。通过yml文件进行环境迁移，导出环境的配置信息，具体<a href="https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#sharing-an-environment">参考</a>，导出后，删除最后一行path路径，name也可以改，默认为创建新环境时的名称</p><ol><li>导出环境</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda activate geo39</span><br><span class="line">conda env export &gt; C:\Users\huangs\Desktop\test\geo_39.yml</span><br></pre></td></tr></table></figure><ol start="2"><li>其他人的电脑或者平台上安装环境</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda activate base <span class="comment"># 下面conda.bat是手误，但不影响</span></span><br><span class="line">conda env create -f C:\Users\huangs\Desktop\test\geo_39.yml</span><br></pre></td></tr></table></figure><img src="/posts/911c717a/image-20220827211808200.png" class alt="image-20220827211808200"><img src="/posts/911c717a/image-20220827212015481.png" class alt="image-20220827212015481"><ol start="3"><li>其他，也可以自己手动写yml文件，见<a href="https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#sharing-an-environment">网站文档</a></li><li>r<strong>equirements.txt</strong>，使用pip创建、安装和迁移包，具体可见<a href="https://stackoverflow.com/questions/31684375/automatically-create-requirements-txt">参考</a></li></ol><h2 id="离线迁移共享"><a class="markdownIt-Anchor" href="#离线迁移共享"></a> 离线迁移共享</h2><p>上面是在有网的情况下进行的迁移，但有的情况可能没有网络，前段时间我试用所里的阿里云服务器就是只能访问内网，因此查到了离线打包的方式，也非常方便，但有点小问题是两个电脑的系统需要一直，如均为Windows</p><p>其实这里也很好理解，实际上就是将<font color="#dd0000">环境整个目录压缩一下再放到另一个电脑装上去</font>，需要环境一致才能运行</p><h3 id="方式1conda-pack"><a class="markdownIt-Anchor" href="#方式1conda-pack"></a> 方式1<a href="https://conda.github.io/conda-pack/">conda-pack</a></h3><ol><li>在本机<strong>base环境</strong>中安装condapack并导出环境</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda install conda-pack</span><br><span class="line">conda install -c conda-forge conda-pack</span><br><span class="line">pip install conda-pack</span><br></pre></td></tr></table></figure><ol start="2"><li>cd切换进入到准备用来存方压缩包的文件夹,建议非C盘，因为后续不能设置输出的目录</li><li>进入base环境，输入如下命令，导出环境pachong，打包需要一定的时间。完成后在当前目录下可以找到<strong>pachong.tar.gz</strong>，即打包完成</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda pack -p D:\Miniconda3\envs\pachong</span><br></pre></td></tr></table></figure><ol start="4"><li>文件拷贝到新的电脑或者通过ftp传到服务器，(需提前离线安装好miniconda或anaconda)</li><li>打开命令行anaconda prompt, 这是刚刚压缩的文件在的路径<code>D:\miniconda3\envs\pachong.tar.gz</code>，<code>D:\miniconda3\envs\pachong</code>是新建的文件夹用来存放对应环境</li><li>激活环境并测试，成功，如果个别包不能运行属于正常，毕竟电脑环境不会完全一致</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir D:\miniconda3\envs\pachong</span><br><span class="line">tar -xzf D:\miniconda3\envs\pachong.tar.gz -C D:\miniconda3\envs\pachong</span><br><span class="line">conda activate pachong</span><br><span class="line">conda-unpack</span><br><span class="line">python</span><br></pre></td></tr></table></figure><p>部分操作截图</p><img src="/posts/911c717a/image-20220827213900656.png" class alt="image-20220827213900656"><img src="/posts/911c717a/image-20220827215106407.png" class alt="image-20220827215106407"><h3 id="其他略"><a class="markdownIt-Anchor" href="#其他略"></a> 其他略</h3><img src="/posts/911c717a/image-20220827213619426.png" class alt="image-20220827213619426">]]></content>
      
      
      <categories>
          
          <category> Python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python环境配置 </tag>
            
            <tag> Conda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python环境(3)：环境及包管理Conda+pypi</title>
      <link href="/posts/42743416/"/>
      <url>/posts/42743416/</url>
      
        <content type="html"><![CDATA[<p>承接<a href="https://hscyber.github.io/posts/9089f596/">Python环境(2)：安装及配置</a>，此处记录环境及包管理，同时汇总一下常用的环境及包管理命令以便速查。</p><span id="more"></span><h2 id="基础概念"><a class="markdownIt-Anchor" href="#基础概念"></a> 基础概念</h2><h3 id="包package"><a class="markdownIt-Anchor" href="#包package"></a> 包Package</h3><blockquote><p>关于这块之前也写过一点<a href="https://hscyber.github.io/posts/659ef075/">Python中的类、模块、包</a></p></blockquote><p><strong>模块</strong><a href="https://docs.python.org/3/tutorial/modules.html">Modules</a>：一个.py文件就构成了一个模块，模块名即为去掉后缀之后的名。模块包含内置模块、标准模块以及第三方模块</p><p><strong>包</strong>：一个包含<code>__init__.py</code>文件(包的标识文件)+若干子包+若干模块的文件夹，文件夹名字即为包名，包的位置位于<strong>Lib文件夹下，三方包位于site-packages</strong></p><ul><li>初始安装Python自带的包是<font color="#dd0000">内置的包，不需要额外安装即可调用</font>、更多的是<font color="#dd0000">第三方包</font>，个人或者团体或社区各自开发和维护的包，需要<strong>安装</strong></li><li>Python的巨大优势即在于可拓展性和便捷，有大量的第三方包可供使用。另外，、我们也可以自己写模块和包用于调用，也可以发布自己的包到<strong>包仓库</strong>供别人使用，包默认都托管在Github上</li><li>开源社区的力量很强大，如这里就列出了大量GIS相关的可用的包<a href="https://ecosystem.pythongis.org/">Python×GIS</a></li></ul><p>但是，由于<font color="#dd0000">不同的包维护的群体(数量/质量)不一致</font>，因此导致了不同的包更新频率和问题解决的速度都不一样，而不同的包之间又存在相互依赖关系，这就容易导致常见的<font color="#dd0000">Inconsistency问题，即由于包的版本不一致会引发错误</font>，尤其是当包进行大版本更新，如2.1.x-2.2.x甚至从2.x-&gt;3.x，代码运行就可能出错</p><p>这也就是Conda; Conda forge等包仓库、环境管理工具出现的原因。因此除了尽量选择维护快优化得比较好的包之外，还可以优先通过Conda等工具进行包管理，下面就看一下包仓库。</p><h3 id="包仓库repository"><a class="markdownIt-Anchor" href="#包仓库repository"></a> 包仓库repository</h3><p>在写代码过程需要用到很多包，因此如何查找安装和管理包，就是接下来需要考虑的问题，这些都有人帮我们做好了。</p><ul><li><a href="https://pypi.org/">官方提供的最完整的包仓库(PyPI)</a>-The Python Package Index ，任何人都可以在上面发布自己写的包,安装完Python或者conda都会自动安装pypi。如下附图我们可以搜索并查看包的主页及各种说明文档，包括安装方式，通过pypi安装的命令默认为<code>pip install **</code></li><li><a href="https://docs.conda.io/en/latest/">Conda</a>：一个在pip基础上<strong>更进一步维护</strong>和之后的<strong>开源包和环境管理系统</strong>（可以理解为有人做了一层筛选和把关）。可在 Windows、macOS、Linux上运行。Conda 可以快速安装、运行和更新软件包及其依赖项。Conda 在本地计算机上轻松创建、保存、加载和切换环境。它是为 Python 程序创建的，但它可以打包和分发任何语言的软件(Python, R, Ruby, Lua, Scala, Java, JavaScript, C/ C++, Fortran, and more)。包检索的地址<a href="https://anaconda.org/">anaconda</a></li><li><a href="https://conda-forge.org/docs/">Conda-forge文档</a>，为什么选择Conda forge?<a href="https://conda-forge.org/docs/user/introduction.html#why-conda-forge">说明</a>，在Anaconda的基础上进一步有社区管理的包仓库，目前安装包的顺序是<font color="#dd0000">Conda forge; Anaconda(即Conda默认); pypi</font></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels conda-forge</span><br></pre></td></tr></table></figure><img src="/posts/42743416/image-20220828215819178.png" class alt="image-20220828215819178"><img src="/posts/42743416/image-20220828215949043.png" class alt="image-20220828215949043"><img src="/posts/42743416/image-20220828223242494.png" class alt="image-20220828223242494"><img src="/posts/42743416/image-20220828223311778.png" class alt="image-20220828223311778"><img src="/posts/42743416/image-20220828223430643.png" class alt="image-20220828223430643"><h3 id="环境environment"><a class="markdownIt-Anchor" href="#环境environment"></a> 环境Environment</h3><h3 id="多环境创建"><a class="markdownIt-Anchor" href="#多环境创建"></a> 多环境创建</h3><p><font color="#dd0000">不同的工作场景需要不同的工具</font>，比如写爬虫和空间数据处理或者是机器学习甚至是深度学习，用的包就有很大的差别，或者有的时候Python的版本也不一致，有时候为了用别人写好的代码需要匹配别人的环境等等……这时候<font color="#dd0000">环境隔离</font>的重要性就凸显出来了。根据不同的场景创建不同的环境，或者临时环境，能够减少包之间的冲突以及方便共享。因此，针对不同的工作，带不同的工具箱，比如我：</p><ul><li>空间、矢量栅格处理新建一个环境</li><li>机器学习新建一个环境</li><li>深度学习新建一个环境</li><li>数据抓取新建一个环境</li><li>……</li><li>包括有时候用其他人的一套脚本，可以直接复刻一套他的环境，更快地上手运行他人的代码！</li><li>Anaconda/Miniconda默认的环境安装在``.\miniconda3\envs`目录下，在这里，每一个环境有一个单独的文件夹，<strong>切换环境的过程也就是进入不同的文件夹调用下运行脚本</strong>。<strong>每个环境对应一些包，分门别类</strong>,如果因为一些包或者误删把环境搞坏了，也可以直接删掉重建新环境而不影响base环境</li></ul><h2 id="conda环境包管理"><a class="markdownIt-Anchor" href="#conda环境包管理"></a> Conda环境/包管理</h2><blockquote><p>现在安装包已经不需要设置镜像源，如果有个别包或者包的某些版本在国内安不上，再切换梯子cmd安装即可</p></blockquote><p>以下可参考：</p><ul><li><a href="https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/index.html">手册官网</a>，<a href="https://conda.io/projects/conda/en/latest/commands.html">API</a>，<a href="https://docs.conda.io/projects/conda/en/latest/commands/clean.html">清洁环境</a></li><li>关于环境的迁移共享，或者安装别人的环境配置，见<a href="https://hscyber.github.io/posts/42743416/">Python环境(3)：环境及包管理</a></li></ul><h3 id="环境管理命令"><a class="markdownIt-Anchor" href="#环境管理命令"></a> 环境管理命令</h3><p>创建新环境，比如这里创建一个Python3.9版本的环境，取名为gis</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda create -n gis python=<span class="number">3.9</span></span><br><span class="line"><span class="comment"># 基于base环境安装一个新环境</span></span><br><span class="line">conda create --name base2 --clone base</span><br></pre></td></tr></table></figure><p>查看当前所有的环境，以下一致，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">conda env <span class="built_in">list</span></span><br><span class="line">conda info --envs</span><br><span class="line"><span class="comment"># 查看当前环境的信息：配置、路径、channels及缓存等</span></span><br><span class="line">conda info</span><br></pre></td></tr></table></figure><p>激活和退出环境，比如我这里有环境名为geo39</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda activate gis</span><br><span class="line">conda activate base</span><br><span class="line">conda deactivate</span><br></pre></td></tr></table></figure><p>删除环境gis，清洁环境内存，删掉一些缓存或不需要的版本文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">conda remove --name gis --<span class="built_in">all</span></span><br><span class="line"><span class="comment"># 针对当前环境运行</span></span><br><span class="line">conda clean -a</span><br><span class="line">conda clean -i <span class="comment">#清除包索引</span></span><br></pre></td></tr></table></figure><h3 id="conda包管理命令"><a class="markdownIt-Anchor" href="#conda包管理命令"></a> Conda包管理命令</h3><p>即<strong>针对某一个环境</strong>对环境内的包进行管理,安装包时<strong>如果不指定版本则为当前环境下可支持的最新版本</strong></p><p>列出当前环境下所有的包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda <span class="built_in">list</span></span><br></pre></td></tr></table></figure><p>安装包，-c表示严格控制源来自Anaconda.org，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">conda install -c conda-forge geopandas</span><br><span class="line">conda install -c geopandas</span><br><span class="line">conda install geopandas</span><br><span class="line">conda install scipy=<span class="number">0.15</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><p>查看某包的依赖信息建议看官网github说明<code>./pkgs/geopandas.../info/index.json</code></p><p>更新包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">conda update geopandas</span><br><span class="line"><span class="comment"># 更新系统环境包，慎用，一般出现bug可以考虑</span></span><br><span class="line">conda update conda</span><br><span class="line">conda update anaconda</span><br></pre></td></tr></table></figure><p>删除包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda remove scipy</span><br><span class="line">conda remove scipy numpy</span><br></pre></td></tr></table></figure><h3 id="pip包管理"><a class="markdownIt-Anchor" href="#pip包管理"></a> pip包管理</h3><blockquote><p>总有些包是Conda安装不了的或者没有收纳的，这时候就需要通过pip进行安装，如果依旧直接命令不行，则可能需要下载文件进行安装，一种是在<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/">pythonlibs这里</a>搜索下载，也可以在pypi官网搜索并下载文件安装</p></blockquote><p>具体可以查看文档：<a href="https://pip.pypa.io/en/stable/cli/pip_install/">https://pip.pypa.io/en/stable/cli/pip_install/</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">py -m pip install SomePackage            <span class="comment"># latest version</span></span><br><span class="line">py -m pip install SomePackage==<span class="number">1.0</span><span class="number">.4</span>     <span class="comment"># specific version</span></span><br><span class="line">py -m pip install <span class="string">&#x27;SomePackage&gt;=1.0.4&#x27;</span>   <span class="comment"># minimum version</span></span><br><span class="line">pip install Sonepackage</span><br></pre></td></tr></table></figure><p>通过环境安装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">py -m pip install -r requirements.txt</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过文件或者github源码源文件安装</span></span><br><span class="line">py -m pip install D:\...\whl</span><br><span class="line">py -m pip install SomeProject@http://my.package.repo/SomeProject-<span class="number">1.2</span><span class="number">.3</span>-py33-none-<span class="built_in">any</span>.whl</span><br><span class="line">py -m pip install SomeProject@http://my.package.repo/<span class="number">1.2</span><span class="number">.3</span>.tar.gz</span><br></pre></td></tr></table></figure><h2 id="问题debug"><a class="markdownIt-Anchor" href="#问题debug"></a> 问题debug</h2><p>待续</p>]]></content>
      
      
      <categories>
          
          <category> Python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python环境配置 </tag>
            
            <tag> Conda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python环境(2)：安装及配置</title>
      <link href="/posts/9089f596/"/>
      <url>/posts/9089f596/</url>
      
        <content type="html"><![CDATA[<p>承接<a href="https://hscyber.github.io/posts/c5ac1642/">Python环境(1)：基础知识</a>，接下来记录一下当前我Python环境的配置及Vscode、pycharm软件安装，至于为什么建议安装Conda看<a href="https://hscyber.github.io/posts/42743416/">Python环境(3)：环境及包管理</a></p><span id="more"></span><h2 id="minicondaanaconda安装"><a class="markdownIt-Anchor" href="#minicondaanaconda安装"></a> Miniconda/Anaconda安装</h2><blockquote><p>个人目前使用的环境，并不适用于每个人</p></blockquote><p>GIS个人均推荐3.9版本。Miniconda是Anaconda的精简版，前者仅安装Python和Conda环境及必要的基础包；后者会自动安装jupyter lab、Spyder编辑器且base环境初始自动安装了较多的数据处理分析包。视情况选择</p><h3 id="步骤"><a class="markdownIt-Anchor" href="#步骤"></a> 步骤</h3><ol><li>网站下载<a href="https://docs.conda.io/en/latest/miniconda.html">Miniconda</a>或<a href="https://www.anaconda.com/products/distribution">Anaconda</a>，并双击运行,<strong>Next</strong></li><li>选择用户，如果是个人电脑一般无所谓<strong>Just Me</strong>即可，服务器或多用户电脑安装则可以考虑全体用户</li><li>安装目录，可以默认也可以更改，如我会直接放在C盘或者D盘<strong>D:\moniconda3</strong></li><li>完成安装后，可以看到最近安装程序Anaconda下有<strong>Anaconda prompt</strong>，通过该程序启动cmd并自动激活<strong>base环境</strong>，如：</li></ol><img src="/posts/9089f596/image-20220827202632781.png" class alt="image-20220827202632781"><ol><li>该环境激活后相当于进入了默认的Conda环境，可以在此进行新环境的创建及维护、包管理等等，但不建议在base环境中安装过多的包，而建议新建多个环境用于不同版本/类型的工作，环境隔离的重要性和好处暂不展开。关于环境及包的管理以及常用命令见<a href>(3)环境及包管理</a></li><li>如果是安装Miniconda，为了能在vscode中运行jupyter，需要在对应的环境中安装ipykernel，由于环境隔离，每个新环境都需要各自安装。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install -c conda-forge ipykernel</span><br></pre></td></tr></table></figure><h2 id="编辑器安装"><a class="markdownIt-Anchor" href="#编辑器安装"></a> 编辑器安装</h2><blockquote><p>个人只用过vscode和pycharm，进入官网下载安装即可。<a href="https://code.visualstudio.com/">vsode官网下载</a>，<a href="https://www.jetbrains.com/pycharm/download/#section=windows">pycharm社区版下载</a></p><p>安装过程，建议勾选”将打开文件添加到右键菜单”，方便在任意文件夹右击新建脚本</p></blockquote><h3 id="vscode"><a class="markdownIt-Anchor" href="#vscode"></a> vscode</h3><p>官方文档<a href="https://code.visualstudio.com/api">VSCode API</a>，安装插件Learn:<a href="https://code.visualstudio.com/docs/datascience/jupyter-notebooks">Jupyter Notebooks in VS Code</a></p><p>进入文件夹，启动，也可以在程序栏启动并切换工程目录，几个注意的点</p><ol><li>新建文件时选择jupyter或者文本文件，先保存再编写代码运行</li><li>对于Python代码，需要打开终端并通过cd进入对应环境，再python输入py脚本名运行代码（配合tab键提示文件名）</li><li>一般会自动检测本地安装的jupyter环境，如果没有，可以手动添加, 依次点击文件→首选项→设置→拓展→python→<strong>Conda Path</strong>添加进入setting.json编辑文件添加如下即可</li><li>添加用户配置片段</li><li>其他的诸如主题、字体等等自行设置即可</li></ol><img src="/posts/9089f596/image-20220827203348746.png" class alt="image-20220827203348746"><img src="/posts/9089f596/image-20220827203633874.png" class alt="image-20220827203633874"><img src="/posts/9089f596/image-20220827204858425.png" class alt="image-20220827204858425"><img src="/posts/9089f596/image-20220827204113884.png" class alt="image-20220827204113884"><p>为python脚本添加用户片段信息的方式，在文件/file-&gt;首选项/reference-&gt;配置用户代码片段/user snippets，更多的可以看<a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets#:~:text=Single%2Dlanguage%20user%2Ddefined%20snippets,for%20which%20it%20is%20defined.">文档</a>我这里是：</p><p><code>$CURRENT_YEAR/$CURRENT_MONTH/$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND&quot;</code></p><img src="/posts/9089f596/image-20220827205304096.png" class alt="image-20220827205304096"><p>用法输入英文headerz找到对应提示即可，效果如下：</p><img src="/posts/9089f596/image-20220827205438092.png" class alt="image-20220827205438092"><img src="/posts/9089f596/image-20220827205501698.png" class alt="image-20220827205501698"><h3 id="pycharm"><a class="markdownIt-Anchor" href="#pycharm"></a> pycharm</h3><p>下载并完成安装后，一路<strong>next</strong>既可以，这里其他不建议勾选，是否添加环境路径试情况，随时也可以自行添加，运行后打开一个工程目录（即防止代码的文件）。</p><ul><li>一般会自动检索环境，建议手动添加一下确认</li><li>其他的设置均可自定搜索查阅</li></ul><img src="/posts/9089f596/image-20220827205747159.png" class alt="image-20220827205747159"><img src="/posts/9089f596/image-20220827210259673.png" class alt="image-20220827210259673"><h2 id="python安装"><a class="markdownIt-Anchor" href="#python安装"></a> Python安装</h2><p>如果安装了Miniconda可以不安装Python，因为其他需求需要安装的话去此处找到对应的版本下载安装即可。至于安装步骤，可以全程点击下一步。具体内容可以看一下第一节的安装python</p>]]></content>
      
      
      <categories>
          
          <category> Python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python环境配置 </tag>
            
            <tag> Conda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python环境(1)：基础知识</title>
      <link href="/posts/c5ac1642/"/>
      <url>/posts/c5ac1642/</url>
      
        <content type="html"><![CDATA[<p>本系列笔记《Python环境》预计包含五块内容：1 基础知识; 2 环境配置; 3 环境及包管理; 4 环境迁移与共享; 5 环境debug。此处记录<font color="#dd0000">我认为的关于Python及环境的前置必要知识</font>。</p><span id="more"></span><h2 id="前言-python学习"><a class="markdownIt-Anchor" href="#前言-python学习"></a> 前言-Python学习</h2><blockquote><p>官方/包的发布者提供的教程文档及接口文档Documentary及API是很好的学习和应用教材。</p></blockquote><p>Python是一门高效易用的语言，语法简洁，入门上手很快，但实际中我们开展的绝大部分数据工作主要基于大量已有的<strong>包(packages)<font color="#dd0000">实质上就是其他人已经实现并封装的大量py脚本</font></strong>。因此，从应用的角度来说，学习Python更重要的是在了解其基本语法、对象及函数使用等的基础上→<strong>学会快速上手使用包并熟悉各种常用包的功能</strong>，熟能生巧，在具体的案例中思考及学习。<u>但是，</u></p><ul><li>回顾我自己的学习经历，一开始我信心满满准备开始工作前以及编程过程中，容易被<strong>环境、包及其他各种问题</strong>消磨心神，从而疲于应对，这即是此文想要重新梳理的内容。</li><li>同时还想小结一下常用的包及环境管理等，毕竟现在也<strong>需要频繁的查阅文档和代码</strong>，且随着学习的深入和需求的增加，也会用到更多的知识和遇到更多的问题，这都在此陆续总结</li></ul><h2 id="python及其脚本"><a class="markdownIt-Anchor" href="#python及其脚本"></a> Python及其脚本</h2><p>脚本语言(<strong>Scripting language</strong>)不需要编译，由<strong>解释器</strong>来负责解释并运行代码，脚本常以文本存储(后缀多种多样，但实际都是文本，<strong>.py也是文本文件</strong>)，在被调用时进行解释或编译。Python也属于脚本语言，常见的还有<a href="https://baike.baidu.com/item/JavaScript">JavaScript</a>，故py文件也称脚本文件(<strong>Script</strong>)。</p><p>实质上，在本机已经下载/安装好Python之后，我们执行Python程序的手动过程是(简化示意)：</p><ol><li>在文本文件里写好Python代码，后缀为py，<a href="http://test.py">test.py</a></li><li>找到并进入python.exe(解释器)所在的文件夹，使用python.exe test.py命令开始执行</li><li>解释器读一遍代码，确认没逻辑问题并根据代码的import找环境目录下的调用的包，逐步执行</li><li>按代码逻辑逐步执行指令，返回结果……</li></ol><p>所以我们运行代码不一定需要借助软件或者工具，安装后之后打开目录在cmd中运行也可。找到python.exe直接右击，我们会发现自动弹出一个cmd并提示可以运行代码。Python安装了些什么看下文。接下来需要了解一下命令行及环境变量</p><h2 id="命令行"><a class="markdownIt-Anchor" href="#命令行"></a> 命令行</h2><blockquote><p>命令提示符CMD(command)，是 Windows 系统的一种命令行操作工具，<strong>接收用户命令来完成一些系统或程序操作</strong></p></blockquote><p>初学觉得命令行很“高级”，但是，通过上述过程会发现，命令行窗口实际上可视为<strong>一个执行程序/文件的界面</strong>，与Python交互窗口及IDLE类似，只不过：</p><ul><li>它可以操作/管理电脑系统的一些设置以及文件等；还可以操作一些更为底层的，基础的程序，如我们最常用的切换路径的<code>cd </code>(change directory)命令，也可以当做一个<u>系统内置的函数**（函数名是<code>cd</code> 接收一个字符串）**，我们在其后传入参数，多个参数默认用空格分隔，它执行/输出</u>。</li><li>打开CMD,依次输入<code>d:</code>,<code>cd D:\Miniconda3\envs\gis</code>就可以进入到我一个环境的目录下运行Python</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\huangs&gt;d:</span><br><span class="line">D:\&gt;cd D:\Miniconda3\envs\gis</span><br><span class="line">D:\Miniconda3\envs\gis&gt;python C:\Users\huangs\Desktop\test.py</span><br></pre></td></tr></table></figure><p><font color="#dd0000">命令行本身也是一个应用程序</font>（.exe），其路径在<code>C:\Windows\system32</code>，我们如果将外部exe程序放在这里，就可以直接通过cmd执行程序，如：通过<a href="https://www.gnu.org/software/wget/?">wget</a>命令批量下载文件时，就习惯先把下载好的<code>wget.exe</code>放在这个目录下,方便执行命令，为什么可以直接执行？因为<font color="#dd0000">系统环境变量Path中默认添加了该路径%SystemRoot%\system32</font></p><ul><li>因此，可以将<strong>命令行(cmd.exe)及其他各种exe如python.exe、Conda.exe等(文件在.\Miniconda3\Scripts.…)</strong>，视为一个<u><strong>脚本/“函数集”</strong></u>，它可以根据我们提供的输入，执行相应的操作！</li></ul><img src="/posts/c5ac1642/image-20220811193526828.png" class alt="image-20220811193526828"><p>通常很多软件都会提供GUI和命令行模式，GUI（图形界面）实际上就是让用户通过界面及鼠标点击/键盘来实现命令→从而执行程序。<strong>不同场景下各有优劣，图形界面本身会带来额外的内存消耗，而有时候通过一系列代码可以更快实现很多的鼠标操作</strong>。因此</p><ul><li>在实际的学习和工作中，最好能够都熟悉并加以运用，这也能够提高提高编程及办公效率，加深对工具的理解，也能提高动手能力，让电脑的使用更加自然得心应手，也便于debug。</li></ul><p>接下来顺带提一下<strong>我对环境变量的理解</strong></p><h2 id="环境变量"><a class="markdownIt-Anchor" href="#环境变量"></a> 环境变量</h2><blockquote><p>环境变量是整个电脑<strong>操作系统的变量</strong>，其中的PATH——主要用于存储解释(器)路径。</p></blockquote><p><strong>添加环境变量可以让我们可以更方便地调用本地文件夹中的应用程序</strong></p><ul><li>未添加环境变量之前，每次都需要进入指定目录才能运行目录下的程序(.exe)，对于使用频繁的程序来说显得麻烦，因此可将其exe所在的路径添加到系统环境变量下的Path解释器变量，添加之后，直接在<strong>cmd</strong>中输入名称如<code>Python</code>就可以运行/调用指定目录下的可执行文件(windows中一般是指exe)，省略后缀。</li><li>若是涉及多个Python或多个不同版本但同名的程序，可以重命名exe的名字(不影响使用)，如python37, python38</li></ul><p>比如我安装Anaconda或Miniconda并添加环境变量后，打开cmd输入<strong>ipython/python</strong>即可以运行Python（实际上运行的是D:\Miniconda3\Scripts\ipython.exe）：</p><img src="/posts/c5ac1642/image-20220827171710015.png" class alt="image-20220827171710015"><h2 id="python安装了些啥选读"><a class="markdownIt-Anchor" href="#python安装了些啥选读"></a> python安装了些啥(选读)</h2><blockquote><p>搬运自2021年写的笔记因此内容较旧，但大体不影响</p></blockquote><h3 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h3><p>以Python解释器为例（仅为演示而安装），打开<a href="https://www.python.org/downloads/">Python官网</a>任意下载一个版本的Python，软件都提供嵌入版以及安装版，这里我做案例讲解下载<a href="https://www.python.org/ftp/python/3.8.10/python-3.8.10-amd64.exe">python 3.8.10</a>，运行安装，可选的有pip、及idle编辑器（窗口管理python文件），随后安装到自定义目录： <strong>3.8.10为版本号，第一个小数点前为大版本，第二个为小版本，第三个为补丁，前两个变动较大</strong></p><img src="/posts/c5ac1642/image-20211019085800203.png" class alt="image-20211019085800203"><h3 id="python安装目录介绍"><a class="markdownIt-Anchor" href="#python安装目录介绍"></a> Python安装目录介绍</h3><p>Lib为内置包，如<strong>os</strong>模块可以在此找到<code>C:\Users\huangs\Desktop\temp\python38\Lib\os.py</code></p><p>拓展包目录通常在<code>..\python38\Lib\site-packages</code></p><img src="/posts/c5ac1642/image-20211019090940839.png" class alt="image-20211019090940839"><img src="/posts/c5ac1642/image-20211019091155057.png" class alt="image-20211019091155057"><p>scripts路径下有三个文件，均为pip，用于安装<a href="https://pypi.org/"> PyPI</a>，无本质区别</p><img src="/posts/c5ac1642/image-20211019091714247.png" class alt="image-20211019091714247"><h3 id="代码运行"><a class="markdownIt-Anchor" href="#代码运行"></a> 代码运行</h3><p>先打开安装后系统应用中出现的<strong>IDLE (Python 3.8 64-bit)</strong></p><ol><li><p>比如编写如下代码（Tab键候选补全,如输入<code>os.</code>，再按<code>tab</code>键）</p><img src="/posts/c5ac1642/image-20211019091831313.png" class alt="image-20211019091831313"></li><li><p>也可以在File中新建，输入代码并保存运行<code>run</code>，在这个过程中：</p><ol><li><p>调用python解释器（即<strong>Python.exe</strong>），运行命令或者保存的<code>test.py</code>文件，输出结果</p></li><li><p>本过程在可视化界面执行，若在命令行执行文件，类似：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#先打开CMD：输入cd path</span></span><br><span class="line"><span class="comment">#如cd .\Desktop\temp\python38</span></span><br><span class="line">python + file_path</span><br></pre></td></tr></table></figure><img src="/posts/c5ac1642/image-20211019092856016.png" class alt="image-20211019092856016"></li><li><p>这里Python实际上就会检索目录下的以Python为名称的exe文件，并执行.py脚本，<strong>该解释器也可视为一个函数</strong>，输入为‘path’时会判断并执行</p></li><li><p>代码中包含的<code>import os</code>，即会在执行过程中检索目录下的<code>os.py</code>并运行</p></li></ol></li><li><p>此即为基础的Python脚本运行全过程</p></li><li><p>交互模式：直接打开命令行输入<code>Python</code>，如果已添加环境变量（下节会讲），则会出现交互运行模式，其他的还有ipython模式，jupyter notebook自带，jupyter的文件后缀<code>.ipynb</code>即是<code>ipython notebook</code>的意思</p><img src="/posts/c5ac1642/image-20211023111239766.png" class alt="image-20211023111239766"></li></ol><p><code>exit()</code>退出，<strong>cmd</strong>常用；题外话退出数据库环境(如mysql mongodb)则用<code>quit()</code></p>]]></content>
      
      
      <categories>
          
          <category> Python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python环境配置 </tag>
            
            <tag> Conda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组会是第一生产力？</title>
      <link href="/posts/e70a45b6/"/>
      <url>/posts/e70a45b6/</url>
      
        <content type="html"><![CDATA[<p>今天顺利开完了一月一次的组会，和往常一样到了接近晚饭饭点才结束。汇报的主体~建模部分的工作都是在这一周的时间里完成的，尤其是最后两天，晚上回到宿舍都会和室友不禁感慨组会前几天的效率为什么可以这么高，这么说来人的潜力真的很大啊，是嘛？</p><span id="more"></span><hr><p>既然如此，如果能够通过一些方式使平时<strong>更多地达到这样的状态</strong>工作推进应该能快不少。细细想一下，就我个人而言的原因：压力+动力+全面思考等</p><ol><li>外界双重压迫：截止日期Deadline的压迫 + 一个月一次的面对培养我信任我的导师的压迫感</li><li>内在价值驱动：想要告诉导师这一个月(虽然在摸鱼但确实是)做了很多工作，组会上好好表现的内驱力</li><li>汇报准备促进的思考：集中几天时间专注地进行——研究框架回顾、工作总结及梳理带来的对所作的工作的再思考和重组织，以及随之带来的新的问题和灵感。</li></ol><p>等等吧，前提是这一个月确实有实打实地做各种相关的探究和储备。抛开外界因素而言，自我的主观能动性，<strong>主动倾注</strong>注意力对于高效做好任何事情都是必要的，另外，跳出细枝末节的具体工作来<strong>俯瞰</strong>自己的研究和问题也能带来一些灵感，加深和打通对一些问题的理解。</p><p>此外，组会上老师和师兄师姐师弟师妹会提出很多问题和建议，有些点其实不难想到但是自己之前确实忽略了，即便自以为想得很全面，这因此带来的思考能给研究工作有了进一步的促进</p><hr><p>对后续的启发——可行措施，当然，前提还是主观能动。</p><ol><li>尽管一月一次组会，但可以给自己立Flag（也可以被迫立比如周一先和老师约周五的时候交流）两周或三周一次主动找小导或导师汇报工作及主动提问，尤其是在确实是比较困惑的时候。</li><li>定期回顾和重组织研究思路和目标，思考并写下当前的状态及所处的阶段，准备干的事情，有哪些问题静下心来捋个清单。<strong>享受快思考和慢思考的过程</strong>。</li><li>平时茶余饭后或者遇到问题多和师兄师姐交流讨论，毕竟师兄师姐有更多的研究基础和经验，我们踩过的坑他们或许也踩过。而且和老师不同，对师兄师姐–哪怕是几行代码写不出或者debug的小问题也是可问的（前提是自己确实查过没搞定）。从别人身上学习也是研究生阶段的必修课。</li><li>以上吧，保持平常心和主动性。</li></ol><p>今天继续打卡了奥森跑道，北京初秋的夜晚竟已冷得不能穿夏装了。组会后的周末，睡个好觉。周末两天flag~把欠下的笔记补好。</p><p>2022/08/26 23:36</p>]]></content>
      
      
      <categories>
          
          <category> 生活漫步 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>研究跟踪(1)：感兴趣期刊及研究方向的最新动态获取</title>
      <link href="/posts/4270937d/"/>
      <url>/posts/4270937d/</url>
      
        <content type="html"><![CDATA[<p>看最新的文献(尤其是<strong>top</strong>)是必要的，尤其是在比较热门的领域。一方面可以学习膜拜借鉴收获灵感，开阔研究思路，同时也能熟悉自己学科或工作相关的当前的国际研究热点/前言理论方法，有助于论文选题，工作开展及撰写。<strong>地理</strong>方面，国内的文章可以通过期刊官网和一些公众号，英文SCI则主要借助RSS（需要梯子）。关于论文检索和下载可以看之前的<a href="https://hscyber.github.io/posts/33f7b1b7/">论文检索</a>、<a href="https://hscyber.github.io/posts/99dce68a/">论文下载</a></p><span id="more"></span><h2 id="rss订阅"><a class="markdownIt-Anchor" href="#rss订阅"></a> RSS订阅</h2><blockquote><p>大三开始接触了RSS，从那之后便一直使用RSS来追踪特定英文期刊及自己感兴趣方向的文章，收获良多，也可以跟踪一些<strong>其他平台如少数派、国家地理</strong>等等。</p></blockquote><p><font color="#dd0000">RSS平台可以自动抓取订阅源的推送更新，因此我们可以不打开期刊就批量看到最近文章及摘要</font>。</p><p>我个人的话英文除了顶刊（NSP及子刊以及一区）还会关注一些灾害及环境生态领域的较好的杂志，中文少，我一般只关注地理学报及地球信息科学学报等期刊，因人而异。</p><p>RSS订阅平台很多，我用的是免费网页版的<a href="https://www.inoreader.com/apps">inoreader</a>，需要梯子，以下是简要使用步骤：</p><ol><li>注册并登陆账号</li><li>批量检索期刊出版社：如<a href="https://www.nature.com/">Nature</a>，<a href="https://www.science.org/">Science</a>，<a href="https://www.pnas.org/loi/pnas">PNAS</a>，<a href="https://www.elsevier.com/books-and-journals/elsevier">ELESVIER</a>，<a href="https://www.tandfonline.com/action/showPublications?pubType=journal">tandfonline</a>，Springer，Wiley，MDPI</li><li>进入期刊主页，找subscribe类似的字样，找到RSS即可，据我目前的是NSP及其子刊，ELESVIER等主流期刊都提供了RSS订阅。另外，<strong>NSP等一些出版商支持高级检索关键词RSS订阅</strong>。</li><li>结合自己的兴趣订阅期刊并归类，接下来就是自己一周打开一次网页查看最新文章即可，感兴趣的<strong>星标</strong></li><li>使用<font color="#dd0000">荧光标</font>标记高亮的关键词</li></ol><h3 id="操作示例"><a class="markdownIt-Anchor" href="#操作示例"></a> 操作示例</h3><img src="/posts/4270937d/image-20220826174114761.png" class alt="image-20220826174114761"><img src="/posts/4270937d/image-20220826173931032.png" class alt="image-20220826173931032"><img src="/posts/4270937d/image-20220826174023680.png" class alt="image-20220826174023680"><img src="/posts/4270937d/image-20220826173446841.png" class alt="image-20220826173446841"><img src="/posts/4270937d/image-20220829171153071.png" class alt="image-20220829171153071">]]></content>
      
      
      <categories>
          
          <category> 科研门外汉 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 期刊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速提升学术论文写作能力的1313法则</title>
      <link href="/posts/81af99e4/"/>
      <url>/posts/81af99e4/</url>
      
        <content type="html"><![CDATA[<p>全文原封不动转载自公众号“学术海豹”,3实际上也可以是更多，听说最初好像是大组的老师提的。</p><span id="more"></span><blockquote><p>推文是组里已经毕业的优秀博士师兄之前写的2020，可惜我刚入学的时候师兄就毕业了没能和师兄当面取经而且师兄现在在公司不更新了hh</p></blockquote><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>上一篇公众号文章发出去之后，后台有些同学给我留言，对我写的内容表达了肯定，或者提了一些很有价值的问题，我都一一作了回复。感谢大家的阅读，写这些内容就是希望能够帮助到刚踏入学术圈的同学们。</p><p>前几天因为导师给了个急活，忙得没有时间和精力来写公众号文章。今天得空来谈一下我认识到的学术论文写作，这里说的“学术论文”包括了英文SCI和中文期刊论文。作为现代社会的八股文，学术论文的写作真的是个非常折磨人的事，尤其是<font color="#dd0000">写第一篇学术论文的时候，大部分同学往往毫无章法</font>，瞎写一通，反复修改，浪费大量时间。我记得自己第1篇英文SCI论文从2017年3月上旬开始动笔写，到2017年6月28日正式投稿出去，耗费了至少3个半月时间，期间根据老师们的意见至少大改了5次，在最后投出去的稿件中第一次写的内容基本没用上，尤其是前言和讨论部分，整个写作过程踩了无数坑。这几个月指导师弟写他的第一篇SCI英文论文，发现好多同样的问题也会在他的身上出现。</p><p>需要特别说明的是，我也还处在学术论文写作的学习和锤炼阶段，由于水平有限，本文表述的观点可能存在偏差，所以有任何问题欢迎大家留言批评指正。我会在文末开通留言功能，并着重把真诚的批评和有效的建议贴出来，方便大家沟通交流，兼听则明。</p><h2 id="本文针对的问题"><a class="markdownIt-Anchor" href="#本文针对的问题"></a> 本文针对的问题</h2><p>在此，我总结一下自己和师弟最开始写学术论文所遇到的共性问题，这应该也是很多第一次进行学术论文写作的同学会遇到的问题。</p><p>（1）<font color="#dd0000">不清楚如何提炼和突出科学问题和论文亮点</font>。“画龙画虎难画骨”，核心科学问题和亮点贡献就是一篇文章的骨骼和灵魂，一篇论文投出去后不被拒稿，很大程度上是看你是否清晰地提炼和表达了论文的核心问题和贡献。如何提炼核心问题，然后针对这个核心问题进行明确地拆解，并写明得到的核心结论和亮点贡献，是需要每篇文章尤其注重的。</p><p>（2）<font color="#dd0000">搞不懂论文各部分的组织结构和侧重点</font>。学术论文就像鸟笼里的鸟，具有非常明确的限制和有限的写作自由。每部分应该写什么，结构是怎么样的，如何组织和规范语言，都有强烈的规律可循，并不是胡乱写的。可惜的是，大多数学生最开始写学术论文时，只是理解了摘要、数据方法、结果、讨论、结论这些词的字面意思，并不清楚这些词背后代表的组织逻辑和表述重点是什么。</p><p>（3）<font color="#dd0000">不了解学术论文写作的表达规矩和内在逻辑</font>。每个人写作都有自己的表述风格，但是学术论文写作在表达的方式和逻辑上有特定的要求，每段的开头、中间、结尾怎么写，前后两句和上下两段之间如何有序衔接，都是有要求的。这样规矩出现的目的其实是为了尽可能让大家清晰规范地传达出自己的学术观点。就算杜甫李白写诗都还要求对仗工整和平仄押韵呢，但这些规矩并不妨碍他们表达自己的观点，学术论文也是同样的道理啊。</p><h2 id="学术论文写作1313法则"><a class="markdownIt-Anchor" href="#学术论文写作1313法则"></a> 学术论文写作1313法则</h2><p>针对以上问题，我提出<font color="#dd0000">学术论文写作1313法则</font>，记住这个规律可有效提升学术论文写作的表达能力和逻辑性。</p><ul><li><font color="#dd0000">第一个“13”法则是针对全文而言的</font>，具体是指全文要提炼<font color="#dd0000">1个核心问题</font>，然后将这个核心问题在论文结果部分拆解为<font color="#dd0000">3个子问题</font>来进行详细阐述，从而在整体上准确控制全文表达的逻辑性。</li><li><font color="#dd0000">第二个“13”法则是针对每段话而言的</font>，具体是指每段话开头就要用<font color="#dd0000">1句话概括</font>这段要表达的主要内容，然后分<font color="#dd0000">3条观点</font>对段首的话进行分别阐述。当然，这里的<strong>3是虚指</strong>，也可以用更多条观点来表达。</li></ul><p>下面对论文每部分进行讲解，并将1313法则贯串于本文讲解过程中。为方便本文的表达和大家的理解，我接下来将结合自己前一段时间写的<strong>疫情论文</strong>《基于多源时空大数据的区际迁徙人群多层次空间分布估算模型—以COVID-19疫情期间自武汉迁出人群为例》来进行讲解，大家可以关注公众号后回复<strong>paper</strong>来获取全文，或者自行到CNKI下载全文。</p><h3 id="引言"><a class="markdownIt-Anchor" href="#引言"></a> 引言</h3><p>引言部分通常包括5段话，需要达到4个目的，具体如下：</p><p><font color="#dd0000">第1段，介绍研究背景，并说明你的研究问题为什么是重要的</font>。比如在疫情论文中，我全文目的是为了计算封城前从武汉流入到湖北省各地的人群数量及其空间分布，那么在引言第一段中，我先就说明了武汉封城前人群大量流入湖北省其他各地级市这一事实，并指出准确计算这部分人群在湖北省内的空间分布特征，对于疫情防控决策的制定是非常重要的，这样我的研究才有很强的现实意义。同时，我还说明了计算人群空间分布所面临的核心学术问题和限制是什么。总之，第一段需要说清楚全文研究问题的学术价值或者现实价值，告诉别人研究这个问题是非常重要且急迫的。</p><p><font color="#dd0000">第2-3段，综述现有研究进展，并结合本文的研究问题，说明现有研究存在的不足</font>，从而进一步表明本文研究的必要性，并引出本文的核心贡献和亮点。这里就需要利用第二个“13”法则来写作了。在疫情论文中，第1段结尾我提出解决区际人群空间分布估算的关键在于结合节假日人口迁徙网络分析方法和动态人口估算方法，因此第2、3段我分别对节假日人口迁徙网络分析方法、动态人口估算方法进行综述。以第3段为例，我在段首第1句话就说明动态人口估算的核心思想是什么。然后，提出现有动态人口估算方法可分为三类，并对这三类进行分别阐述。最后，结合全文的研究问题，对现有动态人口估算方法的优点和不足进行评述。</p><p><font color="#dd0000">第4段，清楚说明全文的核心贡献和亮点</font>。这一段非常重要，用来引导评审人明确和认可你文章价值的。这段话要表达的中心思想就是“研究本文的问题将有助于解决某关键的学术问题和重要的现实问题”，一般3-4句话就能说明白了。在疫情论文中，因为当时时间非常紧张，我脑子一下子抽风忘写了…如果要写的话，我会进行如下表达:“总的来看，已有研究很少关注区际迁徙人群的多层次空间分布估算这一问题，这一问题的解决将有助于深入了解区际迁徙人群的规模以及其在区域内部的空间分布及动态变化的特征，进而为突发重大公共卫生事件中空间防疫决策的制定提供快速有效的科学支撑”。</p><p><font color="#dd0000">第5段，概述本文的主要研究内容，并对接下来的内容安排进行说明</font>。这一段大家写起来都相对容易，只需要注意表述时注意使用首先、然后、接下来、最后这样的类似句式对内容进行拆分既可，这样看起来逻辑性会强很多。</p><h3 id="数据和方法"><a class="markdownIt-Anchor" href="#数据和方法"></a> 数据和方法</h3><p><font color="#dd0000">数据部分，需要把每种数据的关键信息都表述到</font>。比如，对于GIS和遥感领域的常用数据，通常需要介绍其<strong>来源、空间分辨率、时间分辨率、用到了哪些时段的数据、一句话简单说明这个数据在全文用来干啥的</strong>。有些模型的数据还需要简单说明数据生成的过程或原理等。</p><p><font color="#dd0000">方法部分，需要用到第二个“13”法则</font>。首先用一段话概述方法部分的内容，然后有一个全文的数据分析流程图，方便大家从整体上快速了解你的研究方案和分析思路，这张图有些同学会忘记画，所以这里重点说明一下。然后，对将全文的方法拆分为几个子部分，分别加上一个小标题，再进行详细表述。</p><h3 id="结论"><a class="markdownIt-Anchor" href="#结论"></a> 结论</h3><p>结论部分，需要同时用到第一个和第二个“13”法则。</p><p>首先，<font color="#dd0000">结论部分的整体结构需要用到第一个“13”法则</font>。**结论部分的三个小节是对全文研究问题的拆解，每个小节要具体阐述一个子问题，合起来就支撑了全文的研究问题。**比如疫情论文中，我的研究问题是COVID-19疫情期间湖北各地级市自武汉迁出人群的多层次空间分布估算，在结论部分我包含了三个子问题，具体如下：</p><p><em>3.1 春节期间地级市尺度人群变化特征</em></p><p><em>3.2 春节期间各地级市由武汉迁入人群的分布特征</em></p><p><em>3.3 春节期间区县尺度人群变化特征。</em></p><p>可以看出，这三个问题都是围绕我的研究问题展开的，而且有前后递进关系，合起来就从不同尺度上阐明了各地级市自武汉迁出人群的多层次空间分布特征。</p><p>然后，<font color="#dd0000">每段话都需要尽量用到第二个“13”法则</font>。**段落开头就用一段话说清楚这段的核心内容、观点或结论，然后分（1）、（2）、（3）点来说明这段要表达的内容。**很多同学在结果描述部分容易泛泛而谈，让人不容易读懂其内容的逻辑感和层次感，尤其是GIS或遥感领域的空间分析结果，时空规律往往非常多而且杂乱，让人无从下手进行表述。针对类似的情况，严格采用第二个“13”法则，强制自己分条来表述结果，会很好的促进让自己在写作过程中思考和梳理结果。如果你没法对结果应用第二个“13”法则，那就说明对结果的梳理和总结还不到位，这时候就要尤其注意了。结果阐述其实也有规律可循的，比如对于空间分析结果，一般都是先说明整体的空间模式，然后针对不同区域说明正常或异常的空间模式，并对导致这一空间模式的原因进行简要分析。</p><h3 id="讨论"><a class="markdownIt-Anchor" href="#讨论"></a> 讨论</h3><p>讨论部分应该讨论一些什么，其实是个挺难把握的问题。记得经常给我改文章的梁老师说：“中国学生写文章总是讨论的不够深入和精彩，文章读起来就干巴巴的”。讨论部分最容易看出一个人对自己学术领域了解的深入和全面的程度，需要大量文献阅读和独立思考才能逐步提升讨论部分的写作质量。一般来说，针对刚进行学术论文写作的同学，可以从以下几个方面展开讨论：对部分结果出现的原因进行解释和讨论；与同类研究结果进行对比，发现共通的或新的知识或规律；对数据、方法的不确定性进行讨论；对本研究可能推动哪些研究问题或相关领域发展进行讨论。</p><p>讨论部分也需要用到第二个“13”法则。首先，将讨论部分分为三到四个子部分，给每个子部分起一个标题，然后对每个子部分进行分条阐述。在疫情论文中，我的讨论分为两大部分：基于春节期间人群流动模式的未来疫情发展判断、不确定性分析。其中，基于春节期间人群流动模式的未来疫情发展判断又分为三个小部分，不确定性分析则分为4个小部分。</p><h3 id="结论-2"><a class="markdownIt-Anchor" href="#结论-2"></a> 结论</h3><p>很多同学对结论部分要写的内容存在误解，结论部分的写作最后要达到的效果是：<font color="#dd0000">别人不看你论文其他部分，只看结论部分就能快速知道你的研究问题是什么、你用了什么数据和方法流程来进行研究、你得到了哪些主要结论</font>。因而，<strong>结论部分通常包括三部分</strong>，首先第一段话说明你研究针对的问题，采用的数据和主要方法是什么。然后，分条阐述全文的主要结论。最后，用一小段话总结全文研究内容，例如疫情论文中，我用的总结性语句是“总体来说，本文提出一种融合多源地理时空大数据的区际迁徙人群多层次空间分布动态估算模型，实现了 2020年1月24日除夕前从武汉流入湖北省内各市县及其农村地区人群数量的快速估算及空间特征分析”。</p><h3 id="摘要"><a class="markdownIt-Anchor" href="#摘要"></a> 摘要</h3><p>摘要部分先用一两句话说明本研究的重要性。然后，说明我们的研究问题是什么，主要用了什么方法。最后，选择一些亮点的结果进行展示，最好也分条写。大概200-300字左右即可。</p><h2 id="总结回顾"><a class="markdownIt-Anchor" href="#总结回顾"></a> 总结回顾</h2><p>初次进行学术论文写作时容易遇到的三个问题包括：不清楚如何提炼和突出科学问题和论文亮点、搞不懂论文各部分的组织结构和侧重点、不了解学术论文写作的表达规矩和内在逻辑。</p><p>针对以上问题，本文提出<font color="#dd0000">学术论文写作1313法则。第一个“13”法则</font>是针对全文而言的，具体是指全文要提炼1个核心问题，然后将这个核心问题在论文结果部分拆解为3个子问题来进行详细阐述，从而在整体上准确控制全文表达的逻辑性。<font color="#dd0000">第二个“13”法则</font>是针对每段话而言的，具体是指每段话开头就要用1句话概括这段要表达的主要内容，然后分3条观点对段首的话进行分别阐述。实际上，学术论文写作1313法则背后强调的思想是一定要对论文的问题和内容进行逐层地拆解和表达，让段落、小节、研究主题之间相互支撑和关联，使文章内容成为一个有机的整体。</p>]]></content>
      
      
      <categories>
          
          <category> 科研门外汉 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【预】GIS基础(2)：ArcGIS常用工具清单及用途概述</title>
      <link href="/posts/286d5938/"/>
      <url>/posts/286d5938/</url>
      
        <content type="html"><![CDATA[<p>ArcGIS是进行空间数据处理分析及制图的常用软件，功能强大。尽管esri截止10.7已停止对其的维护转向ArcGIS Pro，但平时用的还是以ArcGIS为主。在此罗列一下遇到的问题需求及<strong>可用的工具箱ArcToolbox模块</strong>以供查阅。</p><span id="more"></span><p>学习的过程需要循序渐进且持续的，大学时候开始接触的ArcGIS，从陌生到逐渐熟练使用工具，到使用ArcPy批处理，再到现在的转向主Python处理以及QGIS。学习新工具永远在路上…</p><h2 id="相关部件及布局"><a class="markdownIt-Anchor" href="#相关部件及布局"></a> 相关部件及布局</h2><h2 id="功能"><a class="markdownIt-Anchor" href="#功能"></a> 功能</h2><blockquote><p>待后续填充，先举个例子，建议使用/切换英文版，方便search和检索工具箱，search窗口打开方式【Ctrl+f】</p></blockquote><ol><li>进行缓冲区和最近邻距离分析：Analysis Tools -&gt; Proximity工具箱含Buffer, Near等</li><li>栅格数据分区统计：Spatial Analyst Tools -&gt; Zonal</li><li>…</li></ol>]]></content>
      
      
      <categories>
          
          <category> GIS基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ArcGIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【预】GIS基础(1)：浅析地理/投影坐标系;转换脚本</title>
      <link href="/posts/c82d0555/"/>
      <url>/posts/c82d0555/</url>
      
        <content type="html"><![CDATA[<p><strong>空间参考</strong>即地理/投影坐标系是地理研究、GIS数据处理及空间分析的基础。好早就学，但直到现在也还是好像懂但又不怎么懂的一个点。在此希望基于资料和自己当前的理解及实践，用尽可能短的篇幅小结一下：<strong>(1)  空间参考、地理/投影坐标系相关的概念；(2) 常用坐标系及选择依据；(3) 软件(ArcGIS/QGIS)及代码(Python/R)的坐标系(批)处理方式。</strong></p><span id="more"></span><h2 id="基础概念"><a class="markdownIt-Anchor" href="#基础概念"></a> 基础概念</h2><h2 id="坐标系选择"><a class="markdownIt-Anchor" href="#坐标系选择"></a> 坐标系选择</h2><h2 id="设置及转换"><a class="markdownIt-Anchor" href="#设置及转换"></a> 设置及转换</h2><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><h3 id="软件"><a class="markdownIt-Anchor" href="#软件"></a> 软件</h3><h2 id="补充资源"><a class="markdownIt-Anchor" href="#补充资源"></a> 补充资源</h2>]]></content>
      
      
      <categories>
          
          <category> GIS基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 坐标系 </tag>
            
            <tag> GIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【预】统计基础(1)：概念学习与理解1</title>
      <link href="/posts/aff1e629/"/>
      <url>/posts/aff1e629/</url>
      
        <content type="html"><![CDATA[<p>近期在进行统计广义回归建模及不断查阅请教的过程中温习、学习了一些统计相关的概念，也有了更多的理解，准备结合之前上课的笔记和看的一些书籍/博客陆续整理一下基础概念，以加深理解及便于复用。持续更新…</p><span id="more"></span><h2 id="变量与概率"><a class="markdownIt-Anchor" href="#变量与概率"></a> 变量与概率</h2><h2 id="分布"><a class="markdownIt-Anchor" href="#分布"></a> 分布</h2><h2 id="样本与估计"><a class="markdownIt-Anchor" href="#样本与估计"></a> 样本与估计</h2><h2 id="统计假设检验"><a class="markdownIt-Anchor" href="#统计假设检验"></a> 统计假设检验</h2>]]></content>
      
      
      <categories>
          
          <category> 空间分析与统计基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【预】回归建模(2)：变量预览及预处理</title>
      <link href="/posts/5663ac13/"/>
      <url>/posts/5663ac13/</url>
      
        <content type="html"><![CDATA[<p>在建模前不论是机器学习还是统计模型(统计模型尤其)首先需要对变量有深入的了解，包括其数值类型、服从的分布等等，并针对不同数据可能的异常值进行不同的预处理，标准化？log变换？剔除？等，快速通过Python/R进行出图探索。</p><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 空间分析与统计基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机相关(杂)：列或者行优先顺序</title>
      <link href="/posts/e64e8e1e/"/>
      <url>/posts/e64e8e1e/</url>
      
        <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Row-_and_column-major_order">wiki</a> 在计算中，行优先顺序(Row-major order)和列优先顺序(column-major order)是在<a href="https://en.wikipedia.org/wiki/Random_access_memory">随机存取存储器</a> 等线性存储器中<strong>存储多维数组</strong>的方法。顺序之间的区别在于数组的哪些元素<strong>在内存中是连续的</strong>。在行优先顺序中，行的连续元素彼此相邻。它对遍历数组时的性能也很重要，<strong>因为 CPU 处理顺序数据比处理非顺序数据更有效</strong>。</p><span id="more"></span><p>常见的语言，NumPy的多维数据和Torch当前默认为行优先，可以推广至任意维。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.array([<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">array([[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>],</span><br><span class="line">       [ <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">0</span>]</span><br><span class="line">array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a.flatten()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">array([ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>])</span><br></pre></td></tr></table></figure><p>文字描述，如数组：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>A</mi><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnalign="left left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>11</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>12</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>13</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>21</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>22</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>23</mn></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">A=\left[\begin{array}{lll}a_{11} &amp; a_{12} &amp; a_{13} \\a_{21} &amp; a_{22} &amp; a_{23}\end{array}\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span></span></span></span></span></p><p>存储方式</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><menclose notation="top bottom left right"><mtable rowspacing="0.15999999999999992em" columnalign="center center center" columnlines="solid solid" columnspacing="1em" rowlines="solid solid solid solid solid solid"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext> 地址 </mtext></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext> 行优先顺序 </mtext></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext> 列优先顺序 </mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn mathvariant="bold">0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>11</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>11</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn mathvariant="bold">1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>12</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>21</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn mathvariant="bold">2</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>13</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>12</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn mathvariant="bold">3</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>21</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>22</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn mathvariant="bold">4</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>22</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>13</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn mathvariant="bold">5</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>23</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>23</mn></msub></mstyle></mtd></mtr></mtable></menclose></mrow><annotation encoding="application/x-tex">\begin{array}{|c|c|c|}\hline \text { 地址 } &amp; \text { 行优先顺序 } &amp; \text { 列优先顺序 } \\\hline \mathbf{0} &amp; a_{11} &amp; a_{11} \\\hline \mathbf{1} &amp; a_{12} &amp; a_{21} \\\hline \mathbf{2} &amp; a_{13} &amp; a_{12} \\\hline \mathbf{3} &amp; a_{21} &amp; a_{22} \\\hline \mathbf{4} &amp; a_{22} &amp; a_{13} \\\hline \mathbf{5} &amp; a_{23} &amp; a_{23} \\\hline\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:8.440000000000001em;vertical-align:-3.95em;"></span><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.49em;"><span style="top:-6.450000000000001em;"><span class="pstrut" style="height:6.450000000000001em;"></span><span class="mtable"><span class="vertical-separator" style="height:8.4em;border-right-width:0.04em;border-right-style:solid;margin:0 -0.02em;vertical-align:-3.95em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.450000000000001em;"><span style="top:-6.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">地址</span><span class="mord"> </span></span></span></span><span style="top:-5.410000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathbf">0</span></span></span></span><span style="top:-4.210000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathbf">1</span></span></span></span><span style="top:-3.0100000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathbf">2</span></span></span></span><span style="top:-1.8100000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathbf">3</span></span></span></span><span style="top:-0.6100000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathbf">4</span></span></span></span><span style="top:0.5900000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathbf">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="vertical-separator" style="height:8.4em;border-right-width:0.04em;border-right-style:solid;margin:0 -0.02em;vertical-align:-3.95em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.450000000000001em;"><span style="top:-6.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">行优先顺序</span><span class="mord"> </span></span></span></span><span style="top:-5.410000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-4.210000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.0100000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.8100000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-0.6100000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:0.5900000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="vertical-separator" style="height:8.4em;border-right-width:0.04em;border-right-style:solid;margin:0 -0.02em;vertical-align:-3.95em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.450000000000001em;"><span style="top:-6.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">列优先顺序</span><span class="mord"> </span></span></span></span><span style="top:-5.410000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-4.210000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.0100000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.8100000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-0.6100000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:0.5900000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="vertical-separator" style="height:8.4em;border-right-width:0.04em;border-right-style:solid;margin:0 -0.02em;vertical-align:-3.95em;"></span></span></span><span style="top:-2.500000000000001em;"><span class="pstrut" style="height:6.450000000000001em;"></span><span class="hline" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.7em;"><span class="pstrut" style="height:6.450000000000001em;"></span><span class="hline" style="border-bottom-width:0.04em;"></span></span><span style="top:-4.9em;"><span class="pstrut" style="height:6.450000000000001em;"></span><span class="hline" style="border-bottom-width:0.04em;"></span></span><span style="top:-6.1000000000000005em;"><span class="pstrut" style="height:6.450000000000001em;"></span><span class="hline" style="border-bottom-width:0.04em;"></span></span><span style="top:-7.300000000000001em;"><span class="pstrut" style="height:6.450000000000001em;"></span><span class="hline" style="border-bottom-width:0.04em;"></span></span><span style="top:-8.500000000000002em;"><span class="pstrut" style="height:6.450000000000001em;"></span><span class="hline" style="border-bottom-width:0.04em;"></span></span><span style="top:-9.700000000000001em;"><span class="pstrut" style="height:6.450000000000001em;"></span><span class="hline" style="border-bottom-width:0.04em;"></span></span><span style="top:-10.900000000000002em;"><span class="pstrut" style="height:6.450000000000001em;"></span><span class="hline" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.95em;"><span></span></span></span></span></span></span></span></span></span></p>]]></content>
      
      
      <categories>
          
          <category> 计算机软硬件知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 行优先 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandas(杂)：多表格写出excel</title>
      <link href="/posts/a234f8ea/"/>
      <url>/posts/a234f8ea/</url>
      
        <content type="html"><![CDATA[<p>pandas将多个表格(series/dataframe)写入单个或多个excel文件,<a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_excel.html">.to_excel()</a>。</p><span id="more"></span><p>如果提示缺少包则需安装openpyxl</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install -c conda-forge openpyxl</span><br></pre></td></tr></table></figure><p>单个文件写出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">df.to_csv(<span class="string">&quot;./test.csv&quot;</span>, encoding = <span class="string">&#x27;utf-8&#x27;</span>, index=<span class="literal">False</span>)</span><br><span class="line">df.to_excel(<span class="string">&quot;./test.xlsx&quot;</span>, index=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># series，单列</span></span><br><span class="line">wb_count = df[<span class="string">&#x27;weibo_count&#x27;</span>].value_counts()</span><br><span class="line">wb_count.to_excel(<span class="string">&quot;./test.xlsx&quot;</span>,index_label=<span class="string">&#x27;value&#x27;</span>)</span><br></pre></td></tr></table></figure><p>多个文件写出，类似于文本文件的写出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一次性导出</span></span><br><span class="line">save_file = <span class="string">&quot;./valuecount.xlsx&quot;</span></span><br><span class="line"><span class="keyword">with</span> pd.ExcelWriter() <span class="keyword">as</span> writer:  </span><br><span class="line">    df[<span class="string">&#x27;wb&#x27;</span>].to_excel(writer,sheet_name=<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">    df[<span class="string">&#x27;wb17&#x27;</span>].value_counts().to_excel(writer, index_label=<span class="string">&#x27;value&#x27;</span>,sheet_name=<span class="string">&#x27;17&#x27;</span>)</span><br><span class="line">    df[<span class="string">&#x27;wb18&#x27;</span>].value_counts().to_excel(writer, index_label=<span class="string">&#x27;value&#x27;</span>,sheet_name=<span class="string">&#x27;18&#x27;</span>)</span><br><span class="line">    df[<span class="string">&#x27;wb19&#x27;</span>].value_counts().to_excel(writer, index_label=<span class="string">&#x27;value&#x27;</span>,sheet_name=<span class="string">&#x27;19&#x27;</span>)</span><br><span class="line"><span class="comment"># 非一次性陆续导出</span></span><br><span class="line">save_file = <span class="string">&quot;./valuecount.xlsx&quot;</span></span><br><span class="line">writer = pd.ExcelWriter(save_file)</span><br><span class="line">df1.to_excel(writer, sheetname = <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">df2.to_excel(writer, sheetname = <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">...</span><br><span class="line"><span class="comment"># 关闭流并写入文件</span></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure><p>追加表格到文件（<strong>建议先备份避免出错导致原始表格被覆盖</strong>）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> pd.ExcelWriter(<span class="string">&#x27;output.xlsx&#x27;</span>,mode=<span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> writer:  </span><br><span class="line">    df.to_excel(writer, sheet_name=<span class="string">&#x27;Sheet_add&#x27;</span>)</span><br></pre></td></tr></table></figure><p>其他可选参数：na_rep(缺失值填充，默认为空)</p>]]></content>
      
      
      <categories>
          
          <category> Pandas数据处理分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pandas </tag>
            
            <tag> 数据输出 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文学习(1)：Generalized Linear Mixed Models</title>
      <link href="/posts/ca790165/"/>
      <url>/posts/ca790165/</url>
      
        <content type="html"><![CDATA[<p>近期在学习广义线性混合效应模型，看了一篇文章，谷歌学术引用8k,  Generalized Linear Mixed Models: A Practical Guide for Ecology and Evolution (Bolker, Benjamin M., et al. 2009)<a href="https://www.researchgate.net/publication/221995574_Generalized_Linear_Mixed_Models_A_Practical_Guide_for_Ecology_and_Evolution">下载</a></p><span id="more"></span><h2 id="摘要"><a class="markdownIt-Anchor" href="#摘要"></a> 摘要</h2><blockquote><p>固定效应和随机效应，可粗略将随机效应理解为分组效应。一组数据内存在组间差距，典型的比如一堆学生调查数据其中来自多个班级，这里班级即考虑为一个随机效应，因为不同班级本身存在一个<strong>偏差/截距</strong>因此不能直接进行建模。</p></blockquote><p>大意：GLMMs在生态领域应用十分广泛，但是对于模型的使用、拟合及参数估计等还是存在一些问题，本文的工作是回顾了模型的使用，讨论了GLMM中的参数估计和模型推断，并<u>总结了一份数据分析步骤的“最佳的实践”</u>。</p><p>How should ecologists and evolutionary biologists <strong>analyze nonnormal data that involve random effects</strong>?<br>Nonnormal data such as counts or proportions(因变量为包含随机效应的非正常数据比如频次，百分比等) often defy classical statistical procedures. Generalized linear mixed models (GLMMs) provide a more flexible approach for analyzing nonnormal data when random effects are present. The explosion of research on GLMMs in the last decade has generated <strong>considerable uncertainty</strong> for practitioners in ecology and evolution. Despite the availability of accurate techniques for estimating GLMM parameters in simple cases, complex GLMMs are challenging to fit and statistical inference such as hypothesis testing remains difficult. We review the use (and misuse) of GLMMs in ecology and evolution, <strong>discuss estimation and inference and summarize ‘best-practice’ data analysis procedures</strong> for scientists facing this challenge.</p><h2 id="内容"><a class="markdownIt-Anchor" href="#内容"></a> 内容</h2><blockquote><p>自行阅读，本文的核心内容都通过图表的形式呈现了，很友好，尤其是一开始的统计相关的一些知识总结。</p></blockquote><h3 id="概念表"><a class="markdownIt-Anchor" href="#概念表"></a> 概念表</h3><p>一些统计学的概念可能需要进一步学习和在实践中逐渐体会：Bayesian statistics, Bias, Block random effects, Continuous random effects, Crossed random effects, Exponential family,……</p><p><font color="#dd0000">统计模型的选择和处理依赖于因变量的类型</font>，关于GLM回归模型延伸一下，针对不同变量类型采取的不同变换，借用老师上课时候的一张PPT：</p><img src="/posts/ca790165/f0.png" class><h3 id="模型参数估计"><a class="markdownIt-Anchor" href="#模型参数估计"></a> 模型参数估计</h3><blockquote><p>步骤及方法详情，具体可阅读论文，以下图文均来自论文</p></blockquote><img src="/posts/ca790165/f1.png" class><img src="/posts/ca790165/f2.png" class alt="image-20220820145710262"><h3 id="模型推断方法"><a class="markdownIt-Anchor" href="#模型推断方法"></a> 模型推断方法</h3><p>在估计了GLMMs的参数值后，下一步是统计推断：即通过检查估计值及其置信区间、测试假设、选择最佳模型和评估模型间的拟合度差异，从数据中得出<strong>统计和生物学结论</strong>。本文讨论三种一般的推理类型：假设检验、模型比较和贝叶斯方法。</p><img src="/posts/ca790165/f3.png" class alt="image-20220820145641791"><h3 id="完整建模指南"><a class="markdownIt-Anchor" href="#完整建模指南"></a> 完整建模指南</h3><blockquote><p>具体情况具体分析，初步实践可以看一下这个<a href="https://ase.tufts.edu/bugs/guide/assets/mixed_model_guide.html">教程</a>，我觉得写的建模思路比较完整</p></blockquote><img src="/posts/ca790165/f4.png" class alt="f4"><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><blockquote><p>Bolker另一篇高引用文章(引用52498)，<a href="http://dx.doi.org/10.18637/jss.v067.i01">2015-Fitting Linear Mixed-Effects Models Using lme4</a>是R语言lme4包的介绍和模型拟合，略长，还没来及看</p></blockquote><p>Bolker, Benjamin M., et al. “Generalized linear mixed models: a practical guide for ecology and evolution.” <em>Trends in ecology &amp; evolution</em> 24.3 (2009): 127-135.</p><p>Bates, D., Mächler, M., Bolker, B., &amp; Walker, S. (2015). Fitting Linear Mixed-Effects Models Using lme4. <em>Journal of Statistical Software</em>, <em>67</em>(1), 1–48. <a href="https://doi.org/10.18637/jss.v067.i01">https://doi.org/10.18637/jss.v067.i01</a></p>]]></content>
      
      
      <categories>
          
          <category> 空间分析与统计基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 统计 </tag>
            
            <tag> GLMM </tag>
            
            <tag> GLM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matplotlib基础(3)：图片存储格式及参数设置</title>
      <link href="/posts/459b5ff7/"/>
      <url>/posts/459b5ff7/</url>
      
        <content type="html"><![CDATA[<p>初步小结一下图形保存本地的常用设置（可用于<strong>论文出图</strong>），通过参数设置可以输出非常高质量清晰的且长宽格式的图片或pdf文件，主要介绍png、svg及pdf格式，以A4纸的宽度21cm或一半10cm为例测试。对于具体图形、文字、线条等尺寸的大小控制及文件格式可见<a href="https://hscyber.github.io/posts/5524eff4">上篇</a>。</p><span id="more"></span><p>需要说明的是，这一步是<a href="https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.savefig.html">fig.save()</a>，即保存画布的步骤，这时<u>已经无法再调画布上的ax的图形，通常只能调节</u>：</p><ol><li>画布的背景颜色<strong>facecolor</strong>、边框颜色<strong>edgecolor</strong></li><li>图形四周默认的空白间距<strong>pad_inches</strong>，精细调节则<strong>bbox_inches</strong>，，多个ax的紧凑程度<strong>bbox_inches</strong></li><li>保存文件的文件格式及路径、清晰度<strong>dpi</strong></li></ol><p><font color="#dd0000">常规出图png即可，论文成图简单可png，较复杂细节多的可出无损矢量图svg或pdf，</font>此外svg格式的结果可以在<strong>Adobe Illustrator</strong>中调节，下文简单介绍。(地图保存也可以输出问svg或pdf，ArcMap&amp;QGIS均可)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib.backends.backend_pdf <span class="keyword">import</span> PdfPages</span><br><span class="line">mpl.rcParams[<span class="string">&#x27;figure.dpi&#x27;</span>] = <span class="number">120</span></span><br><span class="line">mpl.rcParams[<span class="string">&#x27;font.size&#x27;</span>]=<span class="number">10.5</span></span><br><span class="line">cm = <span class="number">1</span>/<span class="number">2.54</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#0.5代表1.27cm的间距</span></span><br><span class="line">fig.savefig(<span class="string">&#x27;../test.png&#x27;</span>,dpi=<span class="number">300</span>,bbox_inches=<span class="string">&#x27;tight&#x27;</span>,pad_inches=<span class="number">0.5</span>)</span><br><span class="line">fig.savefig(<span class="string">&#x27;../test.svg&#x27;</span>,dpi=<span class="number">300</span>,bbox_inches=<span class="string">&#x27;tight&#x27;</span>,pad_inches=<span class="number">0.5</span>)</span><br><span class="line">fig.savefig(<span class="string">&#x27;../test.pdf&#x27;</span>,dpi=<span class="number">300</span>,bbox_inches=<span class="string">&#x27;tight&#x27;</span>,pad_inches=<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><h2 id="出图对比"><a class="markdownIt-Anchor" href="#出图对比"></a> 出图对比</h2><p>出图举例：此处目的是展示出图，从官网拉两张图拼接示意<a href="https://matplotlib.org/stable/gallery/lines_bars_and_markers/fill_between_demo.html#sphx-glr-gallery-lines-bars-and-markers-fill-between-demo-py">f1</a>，<a href="https://matplotlib.org/stable/gallery/subplots_axes_and_figures/axis_labels_demo.html#sphx-glr-gallery-subplots-axes-and-figures-axis-labels-demo-py">f2</a>，导入模块，修改路径运行代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">fig, (ax1, ax2) = plt.subplots(nrows =<span class="number">1</span> ,ncols=<span class="number">2</span>, figsize=(<span class="number">21</span>*cm,<span class="number">10</span>*cm), facecolor=<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="comment"># 图一参考</span></span><br><span class="line">N = <span class="number">21</span></span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">11</span>)</span><br><span class="line">y = [<span class="number">3.9</span>, <span class="number">4.4</span>, <span class="number">10.8</span>, <span class="number">10.3</span>, <span class="number">11.2</span>, <span class="number">13.1</span>, <span class="number">14.1</span>,  <span class="number">9.9</span>, <span class="number">13.9</span>, <span class="number">15.1</span>, <span class="number">12.5</span>]</span><br><span class="line"><span class="comment"># fit a linear curve an estimate its y-values and their error.</span></span><br><span class="line">a, b = np.polyfit(x, y, deg=<span class="number">1</span>)</span><br><span class="line">y_est = a * x + b</span><br><span class="line">y_err = x.std() * np.sqrt(<span class="number">1</span>/<span class="built_in">len</span>(x) +(x - x.mean())**<span class="number">2</span> / np.<span class="built_in">sum</span>((x - x.mean())**<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">ax1.plot(x, y_est, <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">ax1.fill_between(x, y_est - y_err, y_est + y_err, alpha=<span class="number">0.2</span>)</span><br><span class="line">ax1.plot(x, y, <span class="string">&#x27;o&#x27;</span>, ms=<span class="number">4</span>, color=<span class="string">&#x27;tab:red&#x27;</span>)</span><br><span class="line"><span class="comment"># 图2</span></span><br><span class="line">sc = ax2.scatter([<span class="number">1</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">2</span>], c=[<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">ax2.set_ylabel(<span class="string">&#x27;YLabel&#x27;</span>, loc=<span class="string">&#x27;top&#x27;</span>)</span><br><span class="line">ax2.set_xlabel(<span class="string">&#x27;XLabel&#x27;</span>, loc=<span class="string">&#x27;left&#x27;</span>)</span><br><span class="line">cbar = fig.colorbar(sc)</span><br><span class="line">cbar.set_label(<span class="string">&quot;ZLabel&quot;</span>, loc=<span class="string">&#x27;top&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">fig.savefig(<span class="string">r&#x27;...\f1.png&#x27;</span>,dpi=<span class="number">300</span>,bbox_inches=<span class="string">&#x27;tight&#x27;</span>,pad_inches=<span class="number">0.5</span>)</span><br><span class="line">fig.savefig(<span class="string">r&#x27;...\f1.svg&#x27;</span>,dpi=<span class="number">300</span>,bbox_inches=<span class="string">&#x27;tight&#x27;</span>,pad_inches=<span class="number">0.5</span>)</span><br><span class="line">fig.savefig(<span class="string">r&#x27;...\f1.pdf&#x27;</span>,dpi=<span class="number">300</span>,bbox_inches=<span class="string">&#x27;tight&#x27;</span>,pad_inches=<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><h3 id="png"><a class="markdownIt-Anchor" href="#png"></a> png</h3><p>结果图，置入word刚好合适，四周边距还可以根据要求调整</p><img src="/posts/459b5ff7/f1.png" class alt="f1"><h3 id="细节矢量图svg"><a class="markdownIt-Anchor" href="#细节矢量图svg"></a> 细节矢量图svg</h3><p>使用浏览器打开即可预览，或者可以打开AI，进行进一步地拼图或调整图层等操作</p><img src="/posts/459b5ff7/f3.png" class alt="f3"><h3 id="细节矢量图pdf"><a class="markdownIt-Anchor" href="#细节矢量图pdf"></a> 细节矢量图pdf</h3><p>如下图，按设定画布固定大小的pdf，其实期刊论文的发表附图都要求使用pdf等矢量格式，因为高清无损！正文不方便，但在论文支撑材料/附件中可以生成PDF最后拼接即可。</p><img src="/posts/459b5ff7/f2.png" class alt="f2"><h2 id="多页pdf"><a class="markdownIt-Anchor" href="#多页pdf"></a> 多页pdf</h2><p>单个figure保存至pdf，比如我这里绘制了一幅6行3列的组图，保存为一页pdf文件，当然也可以直接保存为png或其他格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">save_pdf = <span class="string">&quot;./figure/test.pdf&quot;</span></span><br><span class="line">fig, axes = plt.subplots(nrows =<span class="number">6</span> ,ncols=<span class="number">3</span>, figsize=(<span class="number">21</span>*cm,<span class="number">29.7</span>*cm),facecolor=<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">axes = axes.flatten()</span><br><span class="line"><span class="keyword">for</span> ax <span class="keyword">in</span> axes:</span><br><span class="line">    ax.plot(...)</span><br><span class="line">    ax.text(...)</span><br><span class="line">fig.savefig(save_pdf,<span class="built_in">format</span>=<span class="string">&#x27;pdf&#x27;</span>)</span><br></pre></td></tr></table></figure><p>多个figure保存为多页pdf，<code>PdfPages</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib.backends.backend_pdf <span class="keyword">import</span> PdfPages</span><br><span class="line"></span><br><span class="line">save_pdf = <span class="string">&quot;./figure/test.pdf&quot;</span></span><br><span class="line">pdf = PdfPages(save_pdf) <span class="comment"># 打开文件</span></span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> df.columns.to_list():</span><br><span class="line">    values = df[col].to_numpy()</span><br><span class="line">    fig, ax = plt.subplots(figsize=(<span class="number">21</span>*cm,<span class="number">29.7</span>*cm),facecolor=<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    ax.hist(values,<span class="number">50</span>)</span><br><span class="line">    fig.savefig(pdf,<span class="built_in">format</span>=<span class="string">&#x27;pdf&#x27;</span>) <span class="comment"># 保存</span></span><br><span class="line">    plt.close()</span><br><span class="line">pdf.close() <span class="comment"># 保存</span></span><br></pre></td></tr></table></figure><img src="/posts/459b5ff7/f4.png" class alt="image">]]></content>
      
      
      <categories>
          
          <category> Python可视化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Matplotlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何快速查看或预览ipynb文件</title>
      <link href="/posts/75ba419a/"/>
      <url>/posts/75ba419a/</url>
      
        <content type="html"><![CDATA[<p><code>.ipynb</code>是使用jupyter notebook/lab写代码的文件格式，最初只能在jupyter notebook中打开，不便查看，但除<a href="https://code.visualstudio.com/">vscode</a>，还可以借助一些工具/插件(<a href="https://github.com/QL-Win/QuickLook">QuickLook</a>, <a href="https://nteract.io/">nteract</a>, )<font color="#dd0000">在不打开jupyter的情况下以自带格式方便查看</font>。</p><span id="more"></span><p><strong>.ipynb</strong>后缀含义是ipython notebook, 从ipython逐渐发展起来的。这种文本与代码共存且交互式运行的模式很流行，还方便学习、共享和教学，类似的还有R中的.rmd，matlab中的.mlx。</p><h2 id="vscode查看及编辑"><a class="markdownIt-Anchor" href="#vscode查看及编辑"></a> vscode查看及编辑</h2><blockquote><p><a href="https://code.visualstudio.com/docs/datascience/jupyter-notebooks">具体可参考官网</a>：</p></blockquote><p>vscode十分轻巧，安装插件之后可以很方便的创建和编辑jupyter notebook文件，同时有很方便的面板视图和分屏查看等，如下是我的一个日常编辑环境距离。习惯了pycharm可能会发现vscode运行py文件不够直接，需要多几步设置</p><img src="/posts/75ba419a/vscode.png" class alt="vscode"><h2 id="quicklook快速预览"><a class="markdownIt-Anchor" href="#quicklook快速预览"></a> QuickLook快速预览</h2><blockquote><p><a href="https://github.com/QL-Win/QuickLook">QuickLook</a>，一个用于window上文件快速预览的开源项目，现在也可以通过微软应用商店下载</p></blockquote><p>功能：运行后只需要按<strong>空格键</strong>就可以在<strong>不打开编辑器/app</strong>的情况下快速预览文本文件如csv txt md以及图片、压缩包、pdf等等(<a href="https://github.com/QL-Win/QuickLook/wiki/Supported-File-Types">默认支持的类型</a>)，通过下载安装<a href="https://github.com/QL-Win/QuickLook/wiki/Available-Plugins">插件</a>还可以预览office shapefile .ipynb…安装方式也很简单，下载后空格预览即执行安装。尤其查看<strong>大型的csv</strong>很方便快捷。</p><img src="/posts/75ba419a/csv.png" class alt="csv"><p><strong>空格预览</strong>jupyter notebook示例：</p><img src="/posts/75ba419a/jupyter.png" class alt="jupyter"><h2 id="nteract打开查看"><a class="markdownIt-Anchor" href="#nteract打开查看"></a> nteract打开查看</h2><p>下载软件<a href="https://nteract.io/">nteract</a>，选择打开方式即可查看</p><img src="/posts/75ba419a/nteract.png" class alt="nteract">]]></content>
      
      
      <categories>
          
          <category> Python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python环境配置 </tag>
            
            <tag> QuickLook </tag>
            
            <tag> jupyter </tag>
            
            <tag> VScode </tag>
            
            <tag> nteract </tag>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python文件路径及目录批处理</title>
      <link href="/posts/290b74f/"/>
      <url>/posts/290b74f/</url>
      
        <content type="html"><![CDATA[<p>经常需要批量操作文件夹及文件路径，遂汇总一下Python操作文件夹目(foulder)及文件(file path)的函数以便速查。常用的几个内置模块：<a href="https://docs.python.org/zh-cn/3/library/os.html">os</a>、<a href="https://docs.python.org/zh-cn/3/library/glob.html">glob</a>及<a href="https://docs.python.org/zh-cn/3/library/shutil.html">shutil</a>，包括：<u>文件路径</u>的<strong>批量-读取、重命名、删除、移动</strong>以及<u>目录</u>的创建、重命名、删除、移动。结合条件判断可以实现各类操作。</p><span id="more"></span><p>导入模块，其他的内置模块还有<a href="https://docs.python.org/zh-cn/3/library/pathlib.html">pathlib</a>，<a href="https://docs.python.org/zh-tw/3/library/fnmatch.html">fnmatch</a>，可以相结合实现更多条件的操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os, fnmatch</span><br><span class="line"><span class="keyword">from</span> glob <span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> shutil</span><br></pre></td></tr></table></figure><p>最常用的代码是，输出所有指定后缀的绝对路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">files = glob(path+<span class="string">&quot;\\*.csv&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="文件目录操作dir"><a class="markdownIt-Anchor" href="#文件目录操作dir"></a> 文件目录操作(dir)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.isdir(mydir)  <span class="comment"># True/False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.exists(mydir)  <span class="comment"># True/False</span></span><br></pre></td></tr></table></figure><p>创建，用于自动新建文件而非手动</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">create_dir</span>(<span class="params">cwd</span>):</span><br><span class="line">    isExists = os.path.exists(cwd)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isExists:</span><br><span class="line">        os.makedirs(cwd)</span><br><span class="line">    <span class="keyword">return</span> cwd</span><br><span class="line">outpath = create_dir(path+<span class="string">&quot;\\res&quot;</span>)</span><br><span class="line">outfile = outpath+<span class="built_in">str</span>()</span><br></pre></td></tr></table></figure><p>删除<code>os.rmdir(path)</code>，移动见下文，与文件相同<code>shutil.move()</code></p><h2 id="文件路径操作file"><a class="markdownIt-Anchor" href="#文件路径操作file"></a> 文件路径操作(file)</h2><p>判断是否为文件或者是否存在，结合if判断是否执行对应操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.isfile(myfile)  <span class="comment"># True/False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.exists(myfile)</span><br></pre></td></tr></table></figure><p>测试文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\huangs\Desktop\test</span><br><span class="line">│  20170101.txt</span><br><span class="line">│  20170102.txt</span><br><span class="line">│  20170103.csv</span><br><span class="line">│  tree.txt </span><br><span class="line">├─dir1</span><br><span class="line">│      20170103.txt</span><br><span class="line">│      20170104.txt   </span><br><span class="line">├─dir2</span><br><span class="line">│  ├─北京</span><br><span class="line">│  │      北京.csv</span><br><span class="line">│  │      </span><br><span class="line">│  └─江西</span><br><span class="line">│          上饶.csv</span><br><span class="line">│          九江.csv</span><br><span class="line">│          南昌.csv</span><br><span class="line">...</span><br><span class="line">│          </span><br><span class="line">└─dir3</span><br></pre></td></tr></table></figure><h3 id="读取文件"><a class="markdownIt-Anchor" href="#读取文件"></a> 读取文件</h3><ul><li><code>os.listdir()</code>读取路径下所有的文件和目录，不带根目录；</li><li><code>glob.glob()</code>则输出绝对路径，并且可以指定后缀</li><li><code>os.path.split(path)</code>，<code>os.path.basename()</code>及<code>os.path.splitext()</code>获取文件名及后缀等</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">path = <span class="string">r&quot;C:\Users\huangs\Desktop\test&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.listdir(path)</span><br><span class="line">[<span class="string">&#x27;20170101.txt&#x27;</span>,<span class="string">&#x27;20170102.txt&#x27;</span>,<span class="string">&#x27;20170103.csv&#x27;</span>, <span class="string">&#x27;dir1&#x27;</span>,<span class="string">&#x27;dir2&#x27;</span>, <span class="string">&#x27;dir3&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>files = [os.path.join(path,file) <span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(path)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>files</span><br><span class="line">[<span class="string">&#x27;C:\\Users\\huangs\\Desktop\\test\\20170101.txt&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;C:\\Users\\huangs\\Desktop\\test\\20170102.txt&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;C:\\Users\\huangs\\Desktop\\test\\20170103.csv&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;C:\\Users\\huangs\\Desktop\\test\\dir1&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;C:\\Users\\huangs\\Desktop\\test\\dir2&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;C:\\Users\\huangs\\Desktop\\test\\dir3&#x27;</span>]</span><br><span class="line"> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>glob(path+<span class="string">&quot;/*&quot;</span>)</span><br><span class="line">[<span class="string">&#x27;C:\\Users\\huangs\\Desktop\\test\\20170101.txt&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;C:\\Users\\huangs\\Desktop\\test\\20170102.txt&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;C:\\Users\\huangs\\Desktop\\test\\20170103.csv&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;C:\\Users\\huangs\\Desktop\\test\\dir1&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;C:\\Users\\huangs\\Desktop\\test\\dir2&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;C:\\Users\\huangs\\Desktop\\test\\dir3&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[file <span class="keyword">for</span> file <span class="keyword">in</span> glob(path+<span class="string">&quot;/*&quot;</span>) <span class="keyword">if</span> os.path.isfile(file)]</span><br><span class="line">[<span class="string">&#x27;C:\\Users\\huangs\\Desktop\\test\\20170101.txt&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;C:\\Users\\huangs\\Desktop\\test\\20170102.txt&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;C:\\Users\\huangs\\Desktop\\test\\20170103.csv&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>glob(path+<span class="string">&quot;/*.txt&quot;</span>)</span><br><span class="line">[<span class="string">&#x27;C:\\Users\\huangs\\Desktop\\test\\20170101.txt&#x27;</span>,<span class="string">&#x27;C:\\Users\\huangs\\Desktop\\test\\20170102.txt&#x27;</span>]</span><br></pre></td></tr></table></figure><p>输出指定嵌套层的文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>glob(path+<span class="string">&quot;/*/*/*.csv&quot;</span>)</span><br><span class="line">[<span class="string">&#x27;C:\\Users\\huangs\\Desktop\\test\\dir2\\北京\\北京.csv&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;C:\\Users\\huangs\\Desktop\\test\\dir2\\江西\\上饶.csv&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;C:\\Users\\huangs\\Desktop\\test\\dir2\\江西\\九江.csv&#x27;</span>, ...]</span><br></pre></td></tr></table></figure><p>获取文件信息等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>file = <span class="string">r&#x27;C:\\Users\\huangs\\Desktop\\test\\dir2\\江西\\上饶.csv&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.split(file)</span><br><span class="line">(<span class="string">&#x27;C:\\\\Users\\\\huangs\\\\Desktop\\\\test\\\\dir2\\\\江西&#x27;</span>, <span class="string">&#x27;上饶.csv&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.splitext(file)[-<span class="number">1</span>]</span><br><span class="line"><span class="string">&#x27;.csv&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.basename(file)</span><br><span class="line"><span class="string">&#x27;上饶.csv&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="删改移动"><a class="markdownIt-Anchor" href="#删改移动"></a> 删改移动</h3><p>rename + remove</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">os.rename(src, dst,...)</span><br><span class="line">os.rename(filename, new_filename)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;.csv&#x27;</span> <span class="keyword">in</span> file:</span><br><span class="line">        os.remove(file)</span><br></pre></td></tr></table></figure><p>移动<code>shutil.move(src, dst)</code>，如将指定目录的文件移动到新目录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">move_files</span>(<span class="params">indir, outdir</span>):</span><br><span class="line">    filenames = os.listdir(indir)</span><br><span class="line">    files = [indir+<span class="string">&quot;\\&quot;</span>+file <span class="keyword">for</span> file <span class="keyword">in</span> filenames]</span><br><span class="line">    newfiles = [outdir+<span class="string">&quot;\\&quot;</span>+file <span class="keyword">for</span> file <span class="keyword">in</span> filenames]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(files)):</span><br><span class="line">        shutil.move(files[i], newfiles[i])</span><br><span class="line">move_files(<span class="string">r&quot;C:\Users\huangs\Desktop\test\dir2&quot;</span>, <span class="string">r&quot;C:\Users\huangs\Desktop\test\dir1&quot;</span>)        </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 文件管理 </tag>
            
            <tag> 文件夹管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据抓取(1)：Python网络爬虫学习与参考</title>
      <link href="/posts/5374e378/"/>
      <url>/posts/5374e378/</url>
      
        <content type="html"><![CDATA[<p>爬虫类别笔记主要小结自己数据抓取的一些学习参考和经验，后续也考虑放一些自己数据抓取的案例。第一篇先记录一下自己的学习路径和一点体会。</p><span id="more"></span><h2 id="爬虫原理"><a class="markdownIt-Anchor" href="#爬虫原理"></a> 爬虫原理</h2><blockquote><p>主要针对平台提供的或网站上呈现的数据。</p></blockquote><p>爬虫是一个<strong>可以获取网页上的信息</strong>自动化脚本/程序。举例来说：我们打开任何的外部网站，在地址栏都会有一个连接(url)，这个网站打开之后就会自动加载页面，包括呈现的数据，比如打开淘宝会呈现商品，我们下拉会继续刷新网页提供新的商品信息……这个过程，回车打开网页即是对特定的url<strong>发送请求</strong>，url所有者（<strong>服务器端</strong>）收到请求后处理解析，然后<strong>发送响应内容</strong>，也就是我们看到的内容，不断下拉也会触发请求从而服务器动态给我们提供信息。这个过程就是一个数据请求的过程。写爬虫也就是通过代码（此处指Python）来实现<strong>批量多次</strong></p><ol><li>按要求发送请求</li><li>接收响应结果（网页信息或数据）</li><li>解析并将需要的信息保存到本地</li></ol><p>我们的学习主要在于学会<strong>解析网页和涉及到的常用Python库的使用</strong>。对于一般的网页可以很顺利地完成数据抓取工作，最多多花点时间。但是对于另一些平台，处于一些原因，会对数据的请求进行限制（反爬措施），如增加验证码，给内容加密，限制用户和IP访问的频率等等，所以实际数据抓取的难点在于<strong>反反爬</strong>hh，如</p><ol><li>平台数据宝贵或者涉及安全利益等等，不能免费共享</li><li>请求过于频繁会对平台的服务器造成较大的压力（频繁的I/O），造成额外的资源开销</li></ol><h2 id="学习参考"><a class="markdownIt-Anchor" href="#学习参考"></a> 学习参考</h2><blockquote><p>掌握了基本的网页知识和抓取工具用法之后就可以试着抓取一些数据，实践上手是学习最快的方式，尤其是被迫不得不自己动手的时候hh</p></blockquote><p>我个人学习爬虫是断断续续的，一开始主要是看的这位大佬的书籍《Python3网络爬虫开发实战》<a href="https://item.jd.com/13527222.html">jd</a>和网站<a href="https://cuiqingcai.com/">博客</a>，先是把书看了个大概，了解网页的一些基础和工具基础，再模仿着书上的案例。然后是在工作实践中组里时长有这方面的需求，自己就不得不上手写并调试（这个过程中还需要不断地翻看别人写的博客和文档），从一些最简单的网页到复杂一些的页面，慢慢熟悉基本的抓取工具和思路。</p><p>现在常规网站的数据抓取已经不成问题，多花点时间能搞定。但对于反爬比较厉害的网站则还不行（需要购买账号IP代理池等才能顺利抓取）。</p><h3 id="一些常用的参考"><a class="markdownIt-Anchor" href="#一些常用的参考"></a> 一些常用的参考</h3><ul><li><p>request文档：<a href="https://requests.readthedocs.io/en/latest/">requests</a></p></li><li><p>BeautifulSoup文档：<a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/">bs4</a></p></li><li><p>Selenium文档：<a href="https://selenium-python.readthedocs.io/">Selenium</a></p></li><li><p>Scrapy文档：<a href="https://scrapy-chs.readthedocs.io/zh_CN/0.24/intro/overview.html">Scrapy</a></p></li><li><p>崔庆才个人爬虫站点：<a href="https://cuiqingcai.com/">https://cuiqingcai.com/</a></p></li><li><p>崔书籍网页阅读版：<a href="https://github.com/Python3WebSpider/Python3WebSpider/blob/master/0-%E7%9B%AE%E5%BD%95.md">github</a>，如爬虫基本原理详细可读：<a href="https://github.com/Python3WebSpider/Python3WebSpider/blob/master/2.1-HTTP%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86.md">HTTP基本原理</a>，<a href="https://github.com/Python3WebSpider/Python3WebSpider/blob/master/2.3-%E7%88%AC%E8%99%AB%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86.md">爬虫基本原理</a></p></li></ul><h2 id="补充"><a class="markdownIt-Anchor" href="#补充"></a> 补充</h2><p>普通网页的url提取：一些数据下载网页或者单个页面都会提供数据下载url，如果数量太大，也可以借助代码来完成(最简单的爬虫程序]),或者我们已经获取到了url，只是想批量下载并保存重命名文件，也是ok的。</p><ul><li>当然，很多时候如果是浏览器的话实际上有很多可用的插件，比如这里推荐一个我一直在用的chrome插件<a href="https://chrome.google.com/webstore/detail/simple-mass-downloader/abdkkegmcbiomijcbdaodaflgehfffed?utm_source=chrome-ntp-icon">Simple mass downloader</a>，以及这个更高级一点的免费抓取工具<a href="https://webscraper.io/">webscraper</a>，提供了<a href="https://chrome.google.com/webstore/detail/web-scraper-free-web-scra/jnhgnonknehpejjnehehllkliplmbmhn?utm_source=chrome-ntp-icon">chrome插件</a>，之前我用过，它可以同来实现多个网页的复杂的抓取，而且不需要写代码，按钮点击式</li></ul><p>API接口式抓取：比如<a href="https://lbs.amap.com/api/webservice/guide/api/newpoisearch">高德开放平台</a>提供的poi搜索，就把接口都给用户准备好了，我们只需要按流程申请key，再按照自己的需求输入参数，就可以发起请求获取poi的结果，即<strong>按要求构建url发送请求，平台服务器端会自动返给我们json数据</strong></p><ul><li>如请求的url：<a href="https://restapi.amap.com/v5/place/text?parameters">https://restapi.amap.com/v5/place/text?parameters</a></li><li>最终的输入实际大致会是：…place/text?key={…}&amp;types=120000&amp;…</li><li>然后通过代码批量自动完成该过程</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 数据抓取 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>矢栅处理(杂)：OSM数据下载及shapefile读写</title>
      <link href="/posts/42111e30/"/>
      <url>/posts/42111e30/</url>
      
        <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/OpenStreetMap">OSM</a>地图数据是志愿地理信息数据<a href="https://en.wikipedia.org/wiki/Volunteered_geographic_information">(VGI)</a>的代表，更新快(<strong>天</strong>)覆盖区域广，在大区域研究中其数据尤其是路网应用广泛。这里简单介绍一下数据下载渠道及osm格式转换即<strong>shapefile的通用读写代码</strong>。</p><span id="more"></span><p>涉及多个国家的研究可能没有其他可替代的全球数据产品，所以这个数据应用很广。官网下载并不方便，可用通过<a href="http://download.geofabrik.de/index.html">Geofabrik</a>下载对应区域和国家的shape文件，其中中国的shapefile文件是完全开放的：</p><ul><li>下载<a href="http://download.geofabrik.de/asia/china.html#">路径</a>，点击[raw directory index]可以下载历年的数据</li><li>但是可能会发现有的国家并没有提供，仅提供了.som.pbf数据或者bz2的数据</li><li>shapefile的文件数据是按照数据类型（poi、路网、土地利用等等提供，是转换好的），但.osm的数据则是原始格式，pbf直接在qgis打开可以看到5个文件（点、线、面存储）</li></ul><img src="/posts/42111e30/img1.png" class alt="image1"><img src="/posts/42111e30/img2.png" class alt="image2"><h2 id="数据读写"><a class="markdownIt-Anchor" href="#数据读写"></a> 数据读写</h2><blockquote><p>osm文件实质就是多个矢量图层组成的文件，读取之后按照shapefile图层读写方式处理即可。数据量少可以直接使用相关插件完成转换及导出。量大则可以考虑开源的命令行工具或代码完成处理</p></blockquote><p>已知的可用工具：QGIS可以直接打开导出shape，ArcMap<a href="https://github.com/Esri/arcgis-osm-editor">插件</a>?</p><p>由于是矢量图层，直接使用GDAL中的矢量处理模块<a href="https://pcjericks.github.io/py-gdalogr-cookbook/index.html">ogr</a>完成处理</p><p>为了便于理解，读与写分开展示，实际上可以直接读取并完成写出。几何类型WKBGeometryType对应的<a href="https://gis.stackexchange.com/questions/239289/gdal-ogr-python-getgeomtype-method-returns-integer-what-is-the-matching-geo">代码</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> osgeo <span class="keyword">import</span> ogr, osr</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>inDS = ogr.Open(<span class="string">&#x27;./moldova-latest.osm.pbf&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>inDS.GetLayerCount()</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>layer = inDS.GetLayer(<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>layer.GetGeomType()</span><br><span class="line"><span class="number">2</span> </span><br><span class="line"><span class="comment"># 输出可以看到5种类型分别为1 2 5 6 7</span></span><br><span class="line"><span class="comment"># ogr.wkbPoint = 1</span></span><br><span class="line"><span class="comment"># ogr.wkbLineString = 2</span></span><br><span class="line"><span class="comment"># ogr.wkbMultiLineString = 5</span></span><br><span class="line"><span class="comment"># ogr.wkbMultiPolygon = 6</span></span><br><span class="line"><span class="comment"># ogr.wkbGeometryCollection = 7</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lydefn = layer.GetLayerDefn() </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lydefn.GetFieldCount()</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="comment"># 9列</span></span><br></pre></td></tr></table></figure><p>读shape的字段，以线图层为例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取图层 定义及字段</span></span><br><span class="line">lydefn = layer.GetLayerDefn() </span><br><span class="line">fieldlist = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(lydefn.GetFieldCount()):</span><br><span class="line">    fddefn = lydefn.GetFieldDefn(i)</span><br><span class="line">    fddict = &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>:fddefn.GetName(),</span><br><span class="line">        <span class="string">&#x27;type&#x27;</span>:fddefn.GetType(),</span><br><span class="line">        <span class="string">&#x27;width&#x27;</span>:fddefn.GetWidth(),</span><br><span class="line">        <span class="string">&#x27;decimal&#x27;</span>:fddefn.GetPrecision()&#125;</span><br><span class="line">    fieldlist.append(fddict)</span><br><span class="line">fieldlist</span><br><span class="line"><span class="comment"># [&#x27;osm_id&#x27;, &#x27;name&#x27;, &#x27;highway&#x27;, &#x27;waterway&#x27;, &#x27;aerialway&#x27;, &#x27;barrier&#x27;, &#x27;man_made&#x27;, &#x27;z_order&#x27;, &#x27;other_tags&#x27;]</span></span><br></pre></td></tr></table></figure><p>读shape的要素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取要素</span></span><br><span class="line">geomlist = []</span><br><span class="line">featurelist = []</span><br><span class="line">feature = layer.GetNextFeature() <span class="comment">#获得第一个要素</span></span><br><span class="line"><span class="keyword">while</span> feature <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">    geom = feature.GetGeometryRef()</span><br><span class="line">    geomlist.append(geom.ExportToWkt())</span><br><span class="line">    feature = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> fd <span class="keyword">in</span> fieldlist:</span><br><span class="line">        feature[fd[<span class="string">&#x27;name&#x27;</span>]] = feature.GetField(fd[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line">    featurelist.append(feature)</span><br><span class="line">    feature = layer.GetNextFeature()</span><br><span class="line">ds=<span class="literal">None</span> <span class="comment"># 释放数据源</span></span><br><span class="line"><span class="comment"># 预览数据</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(featurelist)</span><br><span class="line"><span class="number">39008</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>featurelist[<span class="number">0</span>]</span><br><span class="line">&#123;<span class="string">&#x27;osm_id&#x27;</span>: <span class="string">&#x27;4529536&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;name&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line"> <span class="string">&#x27;highway&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line"> <span class="string">&#x27;waterway&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line"> <span class="string">&#x27;aerialway&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line"> <span class="string">&#x27;barrier&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line"> <span class="string">&#x27;man_made&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line"> <span class="string">&#x27;z_order&#x27;</span>: <span class="number">0</span>,</span><br><span class="line"> <span class="string">&#x27;other_tags&#x27;</span>: <span class="literal">None</span>&#125;</span><br></pre></td></tr></table></figure><p>写shape,根据数据类型，就可以找到想要提取的文件并写出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建输出文件</span></span><br><span class="line">outShapefile = <span class="string">&quot;./data_line2.shp&quot;</span></span><br><span class="line">outDriver = ogr.GetDriverByName(<span class="string">&quot;ESRI Shapefile&quot;</span>)</span><br><span class="line">outDS = outDriver.CreateDataSource(outShapefile)</span><br><span class="line">srs = osr.SpatialReference()</span><br><span class="line">srs.ImportFromEPSG(<span class="number">4326</span>)</span><br><span class="line">out_layer = outDS.CreateLayer(outShapefile, srs, geom_type=ogr.wkbLineString, options = [<span class="string">&#x27;ENCODING=UTF-8&#x27;</span>])</span><br><span class="line"><span class="comment"># 写入字段</span></span><br><span class="line"><span class="keyword">for</span> fd <span class="keyword">in</span> fieldlist:</span><br><span class="line">    field = ogr.FieldDefn(fd[<span class="string">&#x27;name&#x27;</span>],fd[<span class="string">&#x27;type&#x27;</span>])</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;width&#x27;</span> <span class="keyword">in</span> fd:</span><br><span class="line">        field.SetWidth(fd[<span class="string">&#x27;width&#x27;</span>])</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;decimal&#x27;</span> <span class="keyword">in</span> fd:</span><br><span class="line">        field.SetPrecision(fd[<span class="string">&#x27;decimal&#x27;</span>])</span><br><span class="line">    out_layer.CreateField(field)</span><br><span class="line"><span class="comment"># 写入要素</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(featurelist)): </span><br><span class="line">    geom = ogr.CreateGeometryFromWkt(geomlist[i])</span><br><span class="line">    <span class="comment"># 创建空行</span></span><br><span class="line">    newfeature = ogr.Feature(out_layer.GetLayerDefn())</span><br><span class="line">    newfeature.SetGeometry(geom)</span><br><span class="line">    <span class="comment"># 写入字段及值</span></span><br><span class="line">    <span class="keyword">for</span> fd <span class="keyword">in</span> fieldlist: </span><br><span class="line">        fieldname = fd[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">        infeature = featurelist[i]</span><br><span class="line">        newfeature.SetField(fieldname, infeature[fieldname]) </span><br><span class="line">    out_layer.CreateFeature(newfeature)</span><br><span class="line"><span class="comment"># 释放数据源并完成写出</span></span><br><span class="line">inDS=<span class="literal">None</span> </span><br><span class="line">outDS = <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>以上代码可以自行简化合并为一个部分，且可以根据需求进一步对shape进行分类导出操作。由于暂无需求暂不展开。</p>]]></content>
      
      
      <categories>
          
          <category> 时空数据处理分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> OpenStreetMap </tag>
            
            <tag> GDAL </tag>
            
            <tag> shapefile读写 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>矢栅处理(6)：点矢量提取栅格值extract</title>
      <link href="/posts/2f2d96ec/"/>
      <url>/posts/2f2d96ec/</url>
      
        <content type="html"><![CDATA[<p>基于Python完成，(<strong>批量</strong>)用点矢量来提取栅格数据中的值。数据少也可使用Arcgis中的<a href="https://desktop.arcgis.com/en/arcmap/latest/tools/spatial-analyst-toolbox/extract-values-to-points.htm">Extract Values to Points</a>及<a href="https://desktop.arcgis.com/en/arcmap/latest/tools/spatial-analyst-toolbox/extract-multi-values-to-points.htm">multi</a>。</p><span id="more"></span><h2 id="思路及实现"><a class="markdownIt-Anchor" href="#思路及实现"></a> 思路及实现</h2><blockquote><p>本文<a href="https://mp.weixin.qq.com/s/aS9prn2fFoLFl2tgkfysDQ">转载</a>自公众号【GIS与Climate】，该号主是我一个所的师兄，他的公众号会频繁推送他研究中GIS相关的一些处理和分析，包括深度学习，推荐关注~</p></blockquote><h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3><p>单个栅格数据读入内存为一个<strong>二维</strong>numpy array，提取点矢量对应的栅格值实际上是读取某<strong>经纬度对应的栅格点的值（如果是投影系则是平面坐标）</strong>。</p><p>数组array只能<strong>通过行列号索引</strong>，所以实现方法：</p><ul><li><font color="#dd0000">经纬度/平面坐标 -&gt; 栅格矩阵行列号-&gt;对应栅格值</font></li><li>即将地理经纬度坐标变换到矩阵对应的行列号，本质上这是两个坐标空间的变换，也就是仿射变换。</li></ul><h3 id="案例"><a class="markdownIt-Anchor" href="#案例"></a> 案例</h3><blockquote><p>需预先确定数据的坐标系是否统一，需在统一参考系下才能正确运算</p></blockquote><p>rasterio包中的<a href="https://rasterio.readthedocs.io/en/latest/quickstart.html?highlight=index#spatial-indexing">spatial index</a>方法提供了该功能的实现，自定义函数并通过apply实现，单个图层</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">ExtractPointValue</span>(<span class="params">geometry,rs</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    geometry: geodataframe的geometry列</span></span><br><span class="line"><span class="string">    rs: 栅格数据</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># geometry.xy获取点几何的经纬度</span></span><br><span class="line">    x = geometry.xy[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    y = geometry.xy[<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">    row, col = rs.index(x,y)</span><br><span class="line">    value = rs.read(<span class="number">1</span>)[row,col]</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line"><span class="comment"># 数据读取及运算</span></span><br><span class="line">rs = rasterio.<span class="built_in">open</span>(<span class="string">&#x27;../input/rs.tif&#x27;</span>)</span><br><span class="line">gpd_points = gdp.read_file(<span class="string">&#x27;../input/shp/test_points.shp&#x27;</span>)</span><br><span class="line">gpd_points[<span class="string">&#x27;value1&#x27;</span>] = gpd_points[<span class="string">&#x27;geometry&#x27;</span>].apply(ExtractPointValue,rs=rs)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 时空数据处理分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Geopandas </tag>
            
            <tag> Rasterio </tag>
            
            <tag> Extract </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>矢栅处理(5)：R语言nc转多张Geotif</title>
      <link href="/posts/ef2a4876/"/>
      <url>/posts/ef2a4876/</url>
      
        <content type="html"><![CDATA[<p>下载了天尺度1km格网的中国区域的温度数据，nc文件格式，需要先裁剪并输出为tif以便后续的提取工作，在Python里折腾老半天不得劲，最后用<strong>R语言完成</strong>。</p><span id="more"></span><p>这几天的数据处理工作让我感觉Python对于栅格数据的支持不够友好，而且性能捉急，往后类似的工作尽量上手R语言做，<strong>R语言对栅格处理友好且速度更快</strong>。</p><h2 id="包"><a class="markdownIt-Anchor" href="#包"></a> 包</h2><p>安装</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">install.packages<span class="punctuation">(</span><span class="string">&quot;ncdf4&quot;</span><span class="punctuation">)</span></span><br><span class="line">install.packages<span class="punctuation">(</span><span class="string">&quot;raster&quot;</span><span class="punctuation">)</span></span><br><span class="line">install.packages<span class="punctuation">(</span><span class="string">&quot;rgdal&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p>文档查看：<a href="https://cran.r-project.org/web/packages/raster/index.html">raster 包</a>，<a href="https://cran.r-project.org/web/packages/raster/raster.pdf">API文档</a>，<a href="https://cran.r-project.org/web/packages/rgdal/index.html">rgdal</a></p><h2 id="nc写tif"><a class="markdownIt-Anchor" href="#nc写tif"></a> nc写tif</h2><ol><li>基于研究区裁剪数据</li></ol><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">library<span class="punctuation">(</span>ncdf4<span class="punctuation">)</span></span><br><span class="line">library<span class="punctuation">(</span>raster<span class="punctuation">)</span></span><br><span class="line">library<span class="punctuation">(</span>rgdal<span class="punctuation">)</span></span><br><span class="line">study_area <span class="operator">=</span> <span class="string">&quot;A:/my_research/Studyarea.shp&quot;</span></span><br><span class="line">extent <span class="operator">&lt;-</span> shapefile<span class="punctuation">(</span>study_area<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><ol start="2"><li>读取文件并拆分，循环写入</li><li>说明（可以自行输出中间过程文件查看）：ncbr输出即为读入的nc文件，包含其数据的维度及名称等等，自行查看</li></ol><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">outdir <span class="operator">=</span> <span class="string">&quot;E:/Datasets/temp/tif/prep/&quot;</span></span><br><span class="line">ncfile <span class="operator">=</span> <span class="string">&quot;E:/Datasets/temp/China_1km_prep_2017.nc&quot;</span></span><br><span class="line">ncbr <span class="operator">=</span> brick<span class="punctuation">(</span>ncfile<span class="punctuation">,</span>varname <span class="operator">=</span> <span class="string">&quot;prep&quot;</span><span class="punctuation">,</span>lvar<span class="operator">=</span><span class="number">4</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">filenames <span class="operator">=</span> paste0<span class="punctuation">(</span>outdir<span class="punctuation">,</span>ncbr<span class="operator">@</span>data<span class="operator">@</span><span class="built_in">names</span><span class="punctuation">,</span><span class="string">&quot;.tif&quot;</span><span class="punctuation">)</span></span><br><span class="line">nlayers <span class="operator">=</span> <span class="built_in">length</span><span class="punctuation">(</span>filenames<span class="punctuation">)</span></span><br><span class="line"><span class="keyword">for</span><span class="punctuation">(</span>i <span class="keyword">in</span> <span class="number">1</span><span class="operator">:</span>nlayers<span class="punctuation">)</span><span class="punctuation">&#123;</span></span><br><span class="line">  r <span class="operator">=</span> ncbr<span class="punctuation">[[</span>i<span class="punctuation">]</span><span class="punctuation">]</span> <span class="comment">#取一个图层</span></span><br><span class="line">  rc <span class="operator">=</span> crop<span class="punctuation">(</span>r<span class="punctuation">,</span>shp<span class="punctuation">)</span> <span class="comment"># 范围筛选</span></span><br><span class="line">  writeRaster<span class="punctuation">(</span>rc<span class="punctuation">,</span> filenames<span class="punctuation">[</span>i<span class="punctuation">]</span><span class="punctuation">,</span> bylayer<span class="operator">=</span><span class="literal">TRUE</span><span class="punctuation">,</span> format <span class="operator">=</span> <span class="string">&quot;GTiff&quot;</span><span class="punctuation">,</span>overwrite <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span>options<span class="operator">=</span><span class="string">&quot;COMPRESS=LZW&quot;</span><span class="punctuation">,</span>NAflag<span class="operator">=</span><span class="operator">-</span><span class="number">1</span><span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>不过貌似不能直接按照shapefile边界形状裁剪？</p>]]></content>
      
      
      <categories>
          
          <category> 时空数据处理分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> R语言 </tag>
            
            <tag> GeoTIFF </tag>
            
            <tag> nc文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>矢栅处理(4)：Python读取NC文件</title>
      <link href="/posts/448bb583/"/>
      <url>/posts/448bb583/</url>
      
        <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/NetCDF">NC文件</a>由于便捷存储多维数据（如大范围长时间序列），因而广泛用于气候，气象数据存储及交换。python文档<a href="https://unidata.github.io/netcdf4-python/">netCDF4</a></p><span id="more"></span><p>安装：conda install -c conda-forge netcdf4</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> netCDF4 <span class="keyword">as</span> nc</span><br><span class="line"><span class="keyword">from</span> netCDF4 <span class="keyword">import</span> Dataset</span><br></pre></td></tr></table></figure><h2 id="netcdf"><a class="markdownIt-Anchor" href="#netcdf"></a> NetCDF</h2><blockquote><p>NetCDF (Network Common Data Form)，网络通用数据格式</p></blockquote><p>NC文件包括以下几个属性</p><ul><li>简单来说，netcdf是一个包含多自变量及其函数的文件。用公式来说就是f(x,y,z,…)=value，同时存储了xyz</li><li>函数的自变量x,y,z等在netcdf中叫做维(dimension) 或坐标轴(axix),<code>ds.dimensions</code>可以看到维度的信息</li><li>函数值与自变量均存储在(Variables)，<code>ds.variables</code>属性则存储了数据的详细信息及数组文件。</li></ul><p>具体案例见下方示例：</p><h2 id="python读nc文件"><a class="markdownIt-Anchor" href="#python读nc文件"></a> Python读nc文件</h2><p>netCDF文件有五种（NETCDF3_CLASSIC, NETCDF3_64BIT_OFFSET, NETCDF3_64BIT_DATA, NETCDF4_CLASSIC和NETCDF4）读取之后<code>ds.data_model</code>输出可以看到其实际存储格式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ncfile = <span class="string">&#x27;E:\\Datasets\\temp\\China_1km_maxtmp_2017.nc&#x27;</span></span><br><span class="line">ds = Dataset(ncfile, <span class="string">&quot;r&quot;</span>, <span class="built_in">format</span>=<span class="string">&quot;NETCDF4&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ds.data_model)</span><br><span class="line"><span class="comment"># ds.close()</span></span><br></pre></td></tr></table></figure><p>常见属性举例：时间这里是从1800年开始按天算的，实际中都要自行判断并转换，这里的温度的单位是K</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ds.dimensions</span><br><span class="line">&#123;<span class="string">&#x27;lon&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;netCDF4._netCDF4.Dimension&#x27;</span>&gt;: name = <span class="string">&#x27;lon&#x27;</span>, size = <span class="number">7386</span>,</span><br><span class="line"> <span class="string">&#x27;lat&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;netCDF4._netCDF4.Dimension&#x27;</span>&gt;: name = <span class="string">&#x27;lat&#x27;</span>, size = <span class="number">4267</span>,</span><br><span class="line"> <span class="string">&#x27;time&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;netCDF4._netCDF4.Dimension&#x27;</span>&gt; (unlimited): name = <span class="string">&#x27;time&#x27;</span>, size = <span class="number">365</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ds_dict = ds.variables</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dt_dict.keys()</span><br><span class="line">dict_keys([<span class="string">&#x27;time&#x27;</span>, <span class="string">&#x27;lon&#x27;</span>, <span class="string">&#x27;lat&#x27;</span>, <span class="string">&#x27;maxtmp&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看数据信息</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dt_dict[<span class="string">&#x27;time&#x27;</span>]</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;netCDF4._netCDF4.Variable&#x27;</span>&gt;</span><br><span class="line">float32 time(time)</span><br><span class="line">    units: days since <span class="number">1800</span>-01-01 <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">    standard_name: time</span><br><span class="line">    calendar: proleptic_gregorian</span><br><span class="line">    long_name: Time</span><br><span class="line">    axis: T</span><br><span class="line">unlimited dimensions: time</span><br><span class="line">current shape = (<span class="number">365</span>,)</span><br><span class="line">filling on, default _FillValue of <span class="number">9.969209968386869e+36</span> used</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dt_dict[<span class="string">&#x27;lon&#x27;</span>]</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;netCDF4._netCDF4.Variable&#x27;</span>&gt;</span><br><span class="line">float32 lon(lon)</span><br><span class="line">    standard_name: longitude</span><br><span class="line">    long_name: Longitude</span><br><span class="line">    units: degrees_east</span><br><span class="line">    axis: X</span><br><span class="line">unlimited dimensions: </span><br><span class="line">current shape = (<span class="number">7386</span>,)</span><br><span class="line">filling on, default _FillValue of <span class="number">9.969209968386869e+36</span> used</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dt_dict[<span class="string">&#x27;maxtmp&#x27;</span>]</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;netCDF4._netCDF4.Variable&#x27;</span>&gt;</span><br><span class="line">float32 maxtmp(time, lat, lon)</span><br><span class="line">    _FillValue: nan</span><br><span class="line">    scale_factor: <span class="number">0.01</span></span><br><span class="line">    add_offset: <span class="number">273.15</span></span><br><span class="line">    units: K</span><br><span class="line">    long_name: Daily Maximum Near-Surface Air Temperature</span><br><span class="line">    standard_name: air_temperature</span><br><span class="line">    missing_value: nan</span><br><span class="line">unlimited dimensions: time</span><br><span class="line">current shape = (<span class="number">365</span>, <span class="number">4267</span>, <span class="number">7386</span>)</span><br><span class="line">filling on</span><br></pre></td></tr></table></figure><p>数据矩阵访问，通常是掩码数组，这里是False，相当于无掩码，普通数组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dt_dict[<span class="string">&#x27;lon&#x27;</span>][:]</span><br><span class="line">masked_array(data=[ <span class="number">73.44696</span>,  <span class="number">73.45529</span>,  <span class="number">73.46363</span>, ..., <span class="number">134.97195</span>,</span><br><span class="line">                   <span class="number">134.9803</span> , <span class="number">134.98863</span>],</span><br><span class="line">             mask=<span class="literal">False</span>,</span><br><span class="line">       fill_value=<span class="number">1e+20</span>,</span><br><span class="line">            dtype=float32)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>array_lon = dt_dict[<span class="string">&#x27;lon&#x27;</span>][:].data</span><br><span class="line">array([ <span class="number">73.44696</span>,  <span class="number">73.45529</span>,  <span class="number">73.46363</span>, ..., <span class="number">134.97195</span>, <span class="number">134.9803</span> ,</span><br><span class="line">       <span class="number">134.98863</span>], dtype=float32)</span><br></pre></td></tr></table></figure><p>其他类似，后面的操作都是<strong>numy多维数组</strong>的操作了</p><ul><li><p>访问某天的全区域的数据<code>[1,:,:]</code>，也可以输入特定经纬度索引范围</p></li><li><p>访问某点的时间序列数据<code>[:,index_lon,index_lat]</code></p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dt_maxtmp = dt_dict[<span class="string">&#x27;maxtmp&#x27;</span>][<span class="number">1</span>,:,:]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dt_maxtmp</span><br><span class="line">masked_array(</span><br><span class="line">  data=[[--, --, --, ..., --, --, --],</span><br><span class="line">        [--, --, --, ..., --, --, --],</span><br><span class="line">        [--, --, --, ..., --, --, --],</span><br><span class="line">        ...,</span><br><span class="line">        [--, --, --, ..., --, --, --],</span><br><span class="line">        [--, --, --, ..., --, --, --],</span><br><span class="line">        [--, --, --, ..., --, --, --]],</span><br><span class="line">  mask=[[ <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>, ...,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>],</span><br><span class="line">        [ <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>, ...,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>],</span><br><span class="line">        [ <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>, ...,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>],</span><br><span class="line">        ...,</span><br><span class="line">        [ <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>, ...,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>],</span><br><span class="line">        [ <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>, ...,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>],</span><br><span class="line">        [ <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>, ...,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>]],</span><br><span class="line">  fill_value=nan,</span><br><span class="line">  dtype=float32)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dt_maxtmp.data</span><br><span class="line">array([[nan, nan, nan, ..., nan, nan, nan],</span><br><span class="line">       [nan, nan, nan, ..., nan, nan, nan],</span><br><span class="line">       [nan, nan, nan, ..., nan, nan, nan],</span><br><span class="line">       ...,</span><br><span class="line">       [nan, nan, nan, ..., nan, nan, nan],</span><br><span class="line">       [nan, nan, nan, ..., nan, nan, nan],</span><br><span class="line">       [nan, nan, nan, ..., nan, nan, nan]], dtype=float32)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 时空数据处理分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> R语言 </tag>
            
            <tag> Python </tag>
            
            <tag> netCDF4 </tag>
            
            <tag> NC文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python性能(2)：大文件处理思路</title>
      <link href="/posts/a8ff5b9/"/>
      <url>/posts/a8ff5b9/</url>
      
        <content type="html"><![CDATA[<p>初略小结一下处理大型文件的常规思路。Python借助Pandas处理表格文件很方便，但是涉及一下大的文件，比如需要处理单个70G（笔记本内存一般16G）的csv或者txt文件，显然不能够整个将其读取运存进行分析和运算，目前我的一般思路是<u>读取时分块，运算时并行，写出时压缩</u>。</p><span id="more"></span><h2 id="分块读取"><a class="markdownIt-Anchor" href="#分块读取"></a> 分块读取</h2><p>以大型csv为例，可以先预览一下文件表头，使用quicklook或者读取前若干行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>geotweets = <span class="string">&#x27;F:/weibo2017/geo_weibo_2017.csv&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df = pd.read_csv(geotweets, header=<span class="number">0</span>, encoding = <span class="string">&#x27;utf-8&#x27;</span>, nrows=<span class="number">100</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.columns</span><br><span class="line">Index([<span class="string">&#x27;_id&#x27;</span>, <span class="string">&#x27;Comment&#x27;</span>, <span class="string">&#x27;Like&#x27;</span>, <span class="string">&#x27;Transfer&#x27;</span>, <span class="string">&#x27;Content&#x27;</span>, <span class="string">&#x27;Co_oridinate1&#x27;</span>,</span><br><span class="line">       <span class="string">&#x27;Co_oridinate2&#x27;</span>, <span class="string">&#x27;PubTime&#x27;</span>, <span class="string">&#x27;Tools&#x27;</span>, <span class="string">&#x27;ID&#x27;</span>, <span class="string">&#x27;PicNumber&#x27;</span>, <span class="string">&#x27;PicLink&#x27;</span>,</span><br><span class="line">       <span class="string">&#x27;PicAllLink&#x27;</span>],</span><br><span class="line">      dtype=<span class="string">&#x27;object&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span> df.info()  <span class="comment"># 查看列的类型</span></span><br></pre></td></tr></table></figure><p>可以分块读取并保存到本地，当然也可以逐部分进行操作最后再保存。大文件为避免有行错误添加<strong>on_bad_lines=’skip’</strong>（这里的分块chunks实际上应该是生成器）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">chunksize=<span class="number">3000000</span>  <span class="comment">#设置分块的行数，并筛选列</span></span><br><span class="line">set_cols = [<span class="string">&#x27;_id&#x27;</span>, <span class="string">&#x27;Comment&#x27;</span>, <span class="string">&#x27;Like&#x27;</span>, <span class="string">&#x27;Transfer&#x27;</span>, <span class="string">&#x27;Content&#x27;</span>, <span class="string">&#x27;Co_oridinate1&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Co_oridinate2&#x27;</span>, <span class="string">&#x27;PubTime&#x27;</span>, <span class="string">&#x27;ID&#x27;</span>]</span><br><span class="line">chunks = pd.read_csv(geotweets,header=<span class="number">0</span>,chunksize=chunksize,low_memory=<span class="literal">False</span>,</span><br><span class="line">                     usecols=set_cols, on_bad_lines=<span class="string">&#x27;skip&#x27;</span>, encoding = <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">path_res_split = <span class="string">&#x27;F:/weibo2017/Dataset/s1_split_chunks&#x27;</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> chunks:</span><br><span class="line">    outFileName = <span class="string">&#x27;&#123;0&#125;_&#123;1&#125;&#123;2&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;chunk&#x27;</span>, i, <span class="string">&#x27;.csv&#x27;</span>)</span><br><span class="line">    path_outfile = os.path.join(path_res_split, outFileName)</span><br><span class="line">    chunk.to_csv(path_outfile, index=<span class="literal">False</span>)</span><br><span class="line">    i = i+<span class="number">1</span></span><br></pre></td></tr></table></figure><p>这里的写出可能会很慢，可以替换成pickle</p><h2 id="写出压缩"><a class="markdownIt-Anchor" href="#写出压缩"></a> 写出压缩</h2><blockquote><p>尤其是对于中间计算过程的文件或者是仅用作备份的文件，可以写出压缩的pkl，空间更小且读写更快</p></blockquote><p>有个bug是这里得记录下环境中pandas的版本，不同的版本保存的文件读写不一定能兼容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chunk.to_pickle(outpklfile,compression=&#123;<span class="string">&#x27;method&#x27;</span>: <span class="string">&#x27;gzip&#x27;</span>, <span class="string">&#x27;compresslevel&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;mtime&#x27;</span>: <span class="number">1</span>&#125;)</span><br><span class="line">df = pd.read_pickle(outpklfile,compression=&#123;<span class="string">&#x27;method&#x27;</span>: <span class="string">&#x27;gzip&#x27;</span>, <span class="string">&#x27;compresslevel&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;mtime&#x27;</span>: <span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="运算加速"><a class="markdownIt-Anchor" href="#运算加速"></a> 运算加速</h2><blockquote><p>高效处理的一些模块和函数+Python中的多进程并行</p></blockquote><p>一方面内存足够的情况下，可以简单可以采用<a href="https://hscyber.github.io/posts/4b434785/">multiprocessing多进程</a></p><p>同时在操作运算的时候可以多考虑：</p><ol><li>优先使用使用内置模块及内置函数</li><li>数据类型多使用numpy数组、内置的array，以及字典和元组</li><li>列表和元组、字典可以多使用列表推导式</li><li>pandas优先使用apply函数等批量运算，避免直接逐行遍历</li></ol>]]></content>
      
      
      <categories>
          
          <category> Python性能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pandas </tag>
            
            <tag> Pickle文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python性能(1)：multiprocessing多进程</title>
      <link href="/posts/4b434785/"/>
      <url>/posts/4b434785/</url>
      
        <content type="html"><![CDATA[<p>这个系列放涉及Python性能相关的处理，总的来说-<font color="#dd0000">除了优化代码逻辑和数据结构，其他的就是增加计算或存储资源、时间换空间、空间换时间</font>。首先，较常用的，处理大量数据时通过多进程利用CPU的多核可以并行处理从而达到加速运算的目的，此处小结python内置模块<a href="https://docs.python.org/zh-cn/3.9/library/multiprocessing.html#">multiprecessing</a>的简单使用。</p><span id="more"></span><p>进程的知识点不少，方法也好多类，这里先放一个</p><h2 id="poolmap"><a class="markdownIt-Anchor" href="#poolmap"></a> Pool.map</h2><blockquote><p>目前我用的最多的简单粗暴的并行</p></blockquote><p>有大堆数据，需要进行相同的处理（函数）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> cpu_count</span><br><span class="line"><span class="built_in">print</span>(cpu_count())</span><br></pre></td></tr></table></figure><p>上面的函数查看电脑CPU的核数/即最大并行进程数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="comment"># 也可以定义全局参数用于函数内</span></span><br><span class="line">root = <span class="string">&quot;...&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">file</span>):</span><br><span class="line">    <span class="comment"># 这里定义处理的函数</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># 8代表八个进程即使用8个核</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pool = Pool(<span class="number">8</span>)</span><br><span class="line">    <span class="comment"># files是一个参数列表list,[file1, file2, ...]</span></span><br><span class="line">    pool.<span class="built_in">map</span>(f, files)</span><br></pre></td></tr></table></figure><p>如果有多个参数，则可以将参数用元组封装传参后再拆包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">paras</span>):</span><br><span class="line">    file, day = paras</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pool = Pool(<span class="number">8</span>)</span><br><span class="line">    paras = [(file, day) <span class="keyword">for</span> file <span class="keyword">in</span> files <span class="keyword">for</span> year <span class="keyword">in</span> days]</span><br><span class="line">    pool.<span class="built_in">map</span>(f,paras)</span><br></pre></td></tr></table></figure><h2 id="常用自定义函数"><a class="markdownIt-Anchor" href="#常用自定义函数"></a> 常用自定义函数</h2><p>常用辅助函数，很多时候需要根据处理的文件自动创建文件夹，比如：</p><ul><li>这里我经常用到的一个dataframe按列拆分并运算，然后输出的函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">create_dir</span>(<span class="params">cwd</span>):</span><br><span class="line">    isExists = os.path.exists(cwd)</span><br><span class="line">    <span class="keyword">if</span> isExists:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        os.makedirs(cwd)</span><br><span class="line">    <span class="keyword">return</span> cwd</span><br><span class="line"><span class="comment"># 这也是很常用的一个df拆分函数</span></span><br><span class="line"><span class="keyword">for</span> year,table <span class="keyword">in</span> df.groupby(<span class="string">&#x27;year&#x27;</span>):</span><br><span class="line">    outdir = create_dir(<span class="built_in">dir</span>+<span class="string">&quot;\\&quot;</span>+<span class="built_in">str</span>(year))</span><br><span class="line">    ...</span><br><span class="line">    outfile = outdir+...+<span class="string">&quot;.csv&quot;</span></span><br><span class="line">    table.to_csv(..., encoding = <span class="string">&#x27;utf-8&#x27;</span>, index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python性能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> multiprocessing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>矢栅处理(3)：Python读写GeoTIFF文件</title>
      <link href="/posts/f61ccf5/"/>
      <url>/posts/f61ccf5/</url>
      
        <content type="html"><![CDATA[<p><a href="https://hscyber.github.io/posts/a9be2430/">先看一下</a>tif文件的数值类型和压缩方式。地理栅格数据通常会以<u>GeoTIFF(.tif; .tiff)、HDF(.h5; .hdf5)、NETCDF(.nc)</u>等多种文件格式(后两者气象数据居多，长时间序列数据存储)，但实际中空间处理、统计及可视化最常用的还是geotiff数据，因此先小结并对比一下：<strong>(1) gdal模块和rasterio两个模块读写tif的对比；(2)geotif文件的压缩格式</strong></p><span id="more"></span><ul><li>关于h5文件和nc文件的读写后续总结</li></ul><h2 id="geotiff文件"><a class="markdownIt-Anchor" href="#geotiff文件"></a> GeoTIFF文件</h2><h3 id="文件简介"><a class="markdownIt-Anchor" href="#文件简介"></a> 文件简介</h3><blockquote><p><strong>GEO+TIF</strong>，如果 TIFF 文件本身没有地理配准信息，GDAL 将依次检查并使用扩展名为.aux.xml文件 . MapInfo .tab 文件以及tfw、.tifw/.tiffw 或 .wld 的 ESRI世界文件。</p></blockquote><p>tiff和png等本身即是光栅文件，geotiff文件是在tiff文件中嵌入地理参考信息/tags得到的，包含两部分</p><ul><li>像元值，纯数值矩阵numpy ndarray<ul><li>矩阵的维度——行列数+波段数</li><li>矩阵的数值及<a href="https://www.runoob.com/numpy/numpy-dtype.html">numpy数据类型dtype</a>, 表示为，np.uint8; np.bool_; np.complex64<ul><li>int8, int16, int32, int64;  uint16,  uint16, uint32, uint64;(无符号即大于等于0)</li><li>float16, float32, float64</li></ul></li></ul></li><li>地理参考/空间位置信息<ul><li>空间范围Extent，矩形框四个角的范围</li><li>坐标系：地理坐标系及投影坐标系，如果深究坐标参考系的信息较为丰富</li><li>分辨率，或行列数、空值 Nodata value、图层个数等</li></ul></li><li>tiff等光栅文件均可视为点文件，以该点为中心的格网空间范围内的值皆=该点的值</li><li><strong><font color="#dd0000">数据读取和处理等中间过程可通过numpy数组完成，涉及空间运算时把位置信息加入生成进行处理即可</font></strong></li></ul><h2 id="文件读写"><a class="markdownIt-Anchor" href="#文件读写"></a> 文件读写</h2><blockquote><p>简要版，更多的参数设置查看文档：<a href="https://rasterio.readthedocs.io/en/latest/quickstart.html">rasterio</a>; <a href="https://gdal.org/python/osgeo.gdal-module.html">gdal1</a>, <a href="https://gdal.org/index.html">gdal2</a>. 仅以单波段图像为例进行读写分析，多波段可以自行拓展</p></blockquote><p><strong><font color="#dd0000">读写后的tif信息往往不完全一致，可以通过读取两幅影像比较数值矩阵是否相等,下述三种方法写出文件的结果数值一致</font></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(data1 == data2).<span class="built_in">all</span>() <span class="comment">#True则表示相同</span></span><br></pre></td></tr></table></figure><h3 id="rasterio推荐"><a class="markdownIt-Anchor" href="#rasterio推荐"></a> rasterio(推荐)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> rasterio</span><br><span class="line"><span class="comment"># 读</span></span><br><span class="line"><span class="keyword">with</span> rasterio.<span class="built_in">open</span>(file) <span class="keyword">as</span> src_dataset:</span><br><span class="line">    profiles = src_dataset.profile</span><br><span class="line">    band1 = src_dataset.read(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(profiles)</span><br><span class="line"><span class="built_in">print</span>(band1) <span class="comment">#ndarray</span></span><br><span class="line"><span class="comment"># 在此更新字典信息</span></span><br><span class="line">new_type = rasterio.int32</span><br><span class="line">profiles.update(dtype=new_type,compress=<span class="string">&#x27;DEFLATE&#x27;</span>)</span><br><span class="line"><span class="comment"># 写: band1为一个numpy array</span></span><br><span class="line"><span class="keyword">with</span> rasterio.<span class="built_in">open</span>(out, <span class="string">&#x27;w&#x27;</span>, **profiles) <span class="keyword">as</span> dst:</span><br><span class="line">        dst.write(band1.astype(new_type), <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="gdal"><a class="markdownIt-Anchor" href="#gdal"></a> gdal</h3><blockquote><p>更为底层，前者实际上是基于gdal完成的读写</p><p>gdal写出的文件会比rasterio更大，暂时还不知道原因</p></blockquote><p>读，获取各项信息，可以通过dir(ds)查看其全部属性方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ds = gdal.Open(tiffile)</span><br><span class="line">band = ds.GetRasterBand(<span class="number">1</span>)</span><br><span class="line">im_data = band.ReadAsArray()</span><br><span class="line"><span class="built_in">print</span>(im_data.dtype)</span><br><span class="line"><span class="comment"># 各项信息</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;文件的源信息&quot;</span>,ds.GetMetadata())</span><br><span class="line">im_width = ds.RasterXSize <span class="comment">#栅格矩阵的列数</span></span><br><span class="line">im_height = ds.RasterYSize <span class="comment">#栅格矩阵的行数</span></span><br><span class="line">im_bands = ds.RasterCount <span class="comment">#波段数</span></span><br><span class="line"></span><br><span class="line">im_geotrans = ds.GetGeoTransform() <span class="comment">#仿射矩阵，左上角像素的大地坐标和像素分辨率</span></span><br><span class="line">im_proj = ds.GetProjection() <span class="comment">#地图投影信息，字符串表示</span></span><br><span class="line">proj = osr.SpatialReference(wkt=im_proj)</span><br><span class="line">nodata = band.GetNoDataValue()</span><br></pre></td></tr></table></figure><p>写<code>GDALDataset *Create(const char *pszName,nXSize,nYSize,nBands,eType,...)</code></p><p>GDALDataType, 如gdal.GDT_Byte</p><table><thead><tr><th style="text-align:center">enum GDALDataType</th><th style="text-align:center">对应numpy类型</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">GDT_Byte</td><td style="text-align:center">np.uint8</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">GDT_UInt16, GDT_Int16</td><td style="text-align:center">np.uint16, np.int16</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">GDT_UInt32, GDT_Int32</td><td style="text-align:center">np.uint32, np.int32</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">GDT_UInt64, GDT_Int64</td><td style="text-align:center">np.uint64, np.int64</td><td style="text-align:center">GDAL &gt;= 3.5</td></tr><tr><td style="text-align:center">GDT_Float32， GDT_Float64</td><td style="text-align:center">np.float32, np.float64</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">GDT_CInt16，GDT_CInt32</td><td style="text-align:center">Complex Int16</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">GDT_CFloat32，GDT_CFloat64</td><td style="text-align:center">Complex Float32</td><td style="text-align:center"></td></tr></tbody></table><p>写出方法1: Create</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">write_geotif</span>(<span class="params">outpath, im_data, im_geotrans,im_proj, nodata=-<span class="number">1</span></span>):</span><br><span class="line">    <span class="comment"># 仅适用于单个波段</span></span><br><span class="line">    <span class="comment"># 数据类型</span></span><br><span class="line">    GDT_Dict = &#123;</span><br><span class="line">        <span class="string">&#x27;uint8&#x27;</span>:gdal.GDT_Byte,</span><br><span class="line">        <span class="string">&#x27;int8&#x27;</span>:gdal.GDT_Byte,</span><br><span class="line">        <span class="string">&#x27;uint16&#x27;</span>:gdal.GDT_UInt16,</span><br><span class="line">        <span class="string">&#x27;int16&#x27;</span>:gdal.GDT_Int16,</span><br><span class="line">        <span class="string">&#x27;uint32&#x27;</span>:gdal.GDT_UInt32,</span><br><span class="line">        <span class="string">&#x27;int32&#x27;</span>:gdal.GDT_Int32,</span><br><span class="line">        <span class="string">&#x27;float32&#x27;</span>:gdal.GDT_Float32&#125;</span><br><span class="line">    gdaltype = GDT_Dict[im_data.dtype.name]</span><br><span class="line">    im_bands, (im_height, im_width) = <span class="number">1</span>, im_data.shape</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建文件</span></span><br><span class="line">    driver = gdal.GetDriverByName(<span class="string">&quot;GTiff&quot;</span>)</span><br><span class="line">    dataset = driver.Create(outpath, im_width, im_height, im_bands, gdaltype, options=[<span class="string">&quot;COMPRESS=LZW&quot;</span>])</span><br><span class="line">    dataset.SetGeoTransform(im_geotrans) <span class="comment">#写入仿射变换参数</span></span><br><span class="line">    dataset.SetProjection(im_proj) <span class="comment">#写入投影</span></span><br><span class="line">    <span class="comment"># 写入数据</span></span><br><span class="line">    dataset.GetRasterBand(<span class="number">1</span>).WriteArray(im_data)</span><br><span class="line">    dataset.GetRasterBand(<span class="number">1</span>).SetNoDataValue(nodata)</span><br><span class="line">    <span class="comment"># 写入内存</span></span><br><span class="line">    <span class="keyword">del</span> dataset</span><br><span class="line">outpath = <span class="string">r&quot;....tif&quot;</span></span><br><span class="line">write_geotif(outpath, im_data, im_geotrans,im_proj, nodata=nodata)</span><br></pre></td></tr></table></figure><p>写出方法2: CreateCopy</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_geotif2</span>(<span class="params">outpath, im_data, src_ds</span>):</span><br><span class="line">    <span class="comment"># 创建文件</span></span><br><span class="line">    driver = gdal.GetDriverByName(<span class="string">&quot;GTiff&quot;</span>)</span><br><span class="line">    dst_ds = driver.CreateCopy(outpath, src_ds, strict=<span class="number">0</span>, options=[<span class="string">&quot;COMPRESS=LZW&quot;</span>])</span><br><span class="line">    <span class="comment"># 写入数据</span></span><br><span class="line">    dst_ds.GetRasterBand(<span class="number">1</span>).WriteArray(im_data)</span><br><span class="line">    <span class="comment"># 写入内存</span></span><br><span class="line">    <span class="keyword">del</span> dst_ds</span><br><span class="line">outpath = <span class="string">r&quot;...tif&quot;</span></span><br><span class="line">write_geotif2(outpath, im_data,ds)</span><br></pre></td></tr></table></figure><h3 id="matlab"><a class="markdownIt-Anchor" href="#matlab"></a> matlab</h3><p>由于文件本质上是纯数值文件，Matlab处理tiff文件也十分便捷<a href="https://ww2.mathworks.cn/help/map/ref/geotiffwrite.html">api</a>，但鉴于目前不太熟悉，后续填充</p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><ol><li><a href="https://rasterio.readthedocs.io/en/latest/intro.html">https://rasterio.readthedocs.io/en/latest/intro.html</a></li><li><a href="https://gdal.org/tutorials/index.html">https://gdal.org/tutorials/index.html</a></li><li><a href="https://gdal.org/index.html">https://gdal.org/index.html</a></li><li><a href="https://gdal.org/drivers/raster/gtiff.html">https://gdal.org/drivers/raster/gtiff.html</a></li><li><a href="https://digital-geography.com/geotiff-compression-comparison/#:~:text=GDAL%20supports%20three%20lossless%20compression,methods%20with%20GDALs%20creation%20options.">其他参考</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 时空数据处理分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rasterio </tag>
            
            <tag> GeoTIFF </tag>
            
            <tag> GDAL </tag>
            
            <tag> 栅格文件读写 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>矢栅处理(2)：GeoTIFF数值类型及压缩</title>
      <link href="/posts/a9be2430/"/>
      <url>/posts/a9be2430/</url>
      
        <content type="html"><![CDATA[<center>小结读写tif文件之前，先总结一下tif文件数值类型以及压缩的必要性和方法。</center><span id="more"></span><h2 id="numpy数值类型"><a class="markdownIt-Anchor" href="#numpy数值类型"></a> numpy数值类型</h2><p><a href="https://www.runoob.com/numpy/numpy-dtype.html">numpy数据类型dtype</a>, 表示为，np.uint8; np.bool_; np.complex64</p><ul><li>int8, int16, int32, int64;  uint16,  uint16, uint32, uint64;(无符号即大于等于0)</li><li>float16, float32, float64</li></ul><h2 id="tif数值类型"><a class="markdownIt-Anchor" href="#tif数值类型"></a> tif数值类型</h2><blockquote><p>1MB=1024KB 1KB=1024B 1B=8bit,    1B*3000w/1024/1024=28.6</p></blockquote><p>数据类型主要包括整型和浮点，其中整型还包括无符号整型，各类型占用空间的大小见下表</p><ul><li>以一张中国0.01°×0.01°格网的geotif（约）为例：宽6160×高4974约3000w个格点,</li><li><strong><font color="#dd0000">如果文件不压缩会很大，大量的空值也会占据空间，因此压缩是必要的。</font></strong></li><li><strong>numpy矩阵本身的保存也很大</strong>，而通过h5等文件格式能够较好的用于数据存储并节约内存！</li></ul><table><thead><tr><th style="text-align:center">数据类型</th><th style="text-align:center">单个占用空间(bytes/B)</th><th style="text-align:center">数值范围</th><th style="text-align:center">数组大小</th><th style="text-align:center">TIFF大小(不压缩)</th></tr></thead><tbody><tr><td style="text-align:center">uint8</td><td style="text-align:center">1</td><td style="text-align:center">0~255(2^8-1)</td><td style="text-align:center">29MB</td><td style="text-align:center">29.8MB</td></tr><tr><td style="text-align:center">int8</td><td style="text-align:center">1</td><td style="text-align:center">-128~127</td><td style="text-align:center">29MB</td><td style="text-align:center">29.8MB</td></tr><tr><td style="text-align:center">int16</td><td style="text-align:center">2</td><td style="text-align:center">-32768-32767</td><td style="text-align:center">58MB</td><td style="text-align:center">59.7MB</td></tr><tr><td style="text-align:center">int32</td><td style="text-align:center">4</td><td style="text-align:center">…</td><td style="text-align:center">116MB</td><td style="text-align:center">2.4MB(Lzw压缩)</td></tr><tr><td style="text-align:center">int64</td><td style="text-align:center">8</td><td style="text-align:center">…</td><td style="text-align:center">233MB</td><td style="text-align:center">…</td></tr><tr><td style="text-align:center">float16</td><td style="text-align:center">2</td><td style="text-align:center">10 个尾数位</td><td style="text-align:center">58MB</td><td style="text-align:center">…</td></tr><tr><td style="text-align:center">float32</td><td style="text-align:center">4</td><td style="text-align:center">32 个尾数位</td><td style="text-align:center">116MB</td><td style="text-align:center">119MB</td></tr></tbody></table><h3 id="压缩方式"><a class="markdownIt-Anchor" href="#压缩方式"></a> 压缩方式</h3><blockquote><p>图像/光栅文件<strong>大量冗余</strong>使得压缩可以大量减少其空间，便于数据交换和临时存储，且压缩并不会对影响数据。</p></blockquote><p>测试结果仅供参考。图像压缩的方式有很多，这里仅比较几个GeoTIFF中常用的三种<strong>无损压缩</strong>算法以及较新的ZSTD(facabook, 2016)，以int32 geotiff文件为例，目前看性价比最高的是<font color="#dd0000">Deflate</font>，然后是LZW：</p><ul><li>压缩会减少数据占用<font color="#dd0000">空间</font>，但会增加读取和写入数据的<font color="#dd0000">时间</font></li><li>压缩的越多压缩所需要的时间越长,时间参考(%%timmit)</li><li>通过某些操作如增大GDAL的块缓存可以缩小写入时间，在此不做考虑</li></ul><table><thead><tr><th>压缩方式</th><th style="text-align:center">压缩/写出速度</th><th style="text-align:center">压缩比例</th><th style="text-align:center">压缩后</th><th style="text-align:center">读取速度</th></tr></thead><tbody><tr><td>PACKBITS</td><td style="text-align:center">最快；199ms</td><td style="text-align:center">小</td><td style="text-align:center">5.91MB</td><td style="text-align:center">127ms</td></tr><tr><td>LZW</td><td style="text-align:center">中；441ms</td><td style="text-align:center">中</td><td style="text-align:center">2.41MB</td><td style="text-align:center">205ms</td></tr><tr><td>DEFLATE</td><td style="text-align:center">慢；570ms</td><td style="text-align:center">大</td><td style="text-align:center">1.87MB</td><td style="text-align:center">140ms</td></tr><tr><td>ZSTD</td><td style="text-align:center">最慢；2340ms</td><td style="text-align:center">最大</td><td style="text-align:center">1.76MB</td><td style="text-align:center">191ms</td></tr></tbody></table><p>时间测试代码示例 (10 loops each)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%%timeit</span><br><span class="line">file = <span class="string">&#x27;...tif&#x27;</span></span><br><span class="line">ds = gdal.Open(file)</span><br><span class="line">im_data = ds.ReadAsArray()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 时空数据处理分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GeoTIFF </tag>
            
            <tag> 栅格数据压缩 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matplotlib基础(2)：绘图逻辑与输出尺寸/格式</title>
      <link href="/posts/5524eff4/"/>
      <url>/posts/5524eff4/</url>
      
        <content type="html"><![CDATA[<p><a href="https://hscyber.github.io/posts/8dfff56a/">前一节</a>小结了一下Matplotlib一张图表的组成(Elements), 也即<strong>Anatomy of a figure</strong>，包括Figure, Axes, Axis, Spines…。另外还指出了一个点-图表本质上<u>是由以下三种要素的组合: patchs块、线和文本</u>，<strong>且理论上上述部件(也称artist)都能够被访问和调整，即自定义</strong>。接下来要要做的即是逐步熟悉各部件的调整，在此之前先简单理一理绘图的<strong>逻辑</strong>及最基本的创建<strong>画布和图形及字体尺寸</strong>，并放了A4尺寸出图的参考代码。附录是关于文件格式的简单汇总。</p><span id="more"></span><h2 id="绘图的逻辑"><a class="markdownIt-Anchor" href="#绘图的逻辑"></a> 绘图的逻辑</h2><blockquote><p>用代码绘图的思路和用软件如PS/AI/CoreDraw等是一样的</p></blockquote><blockquote><p>主要针对最后的出图而非草图</p></blockquote><p>通常制作一张图表通常包含几步：</p><ol><li>数据的整理和图的设计</li><li>确定风格、字体字号、分辨率dpi等等</li><li>新建画布，选择大小尺寸</li><li>插入图层，设计图形的布局，在不同的层上绘制图形</li><li>最终叠加的结果即为成图</li><li>保存并输出图片，格式-或矢量(.SVG/ .PDF/ .PS)或栅格(.PNG/ .JPS/ .TIFF)</li></ol><h2 id="图层顺序"><a class="markdownIt-Anchor" href="#图层顺序"></a> 图层顺序</h2><blockquote><p>通过属性zorder=…来设置图层绘制顺序，数字越小越在底层</p><p>tips: 将图形输出为**.svg**导入 Adobe IIIustrator可以看到各形状的排布顺序并调整</p></blockquote><p>通常我们不需要修改，但是当大量图形绘制产生叠盖或者较复杂时可以考虑调整该参数，如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">ax.plot(..., zorder=<span class="number">80</span>)</span><br></pre></td></tr></table></figure><img src="/posts/5524eff4/zorder.png" class alt="zorder"><h2 id="图形尺寸"><a class="markdownIt-Anchor" href="#图形尺寸"></a> 图形尺寸</h2><blockquote><p>除了画布的尺寸，其他形状如线、点的大小宽度默认单位都是pt. 1/72英寸</p></blockquote><h3 id="要点小结"><a class="markdownIt-Anchor" href="#要点小结"></a> 要点/小结</h3><ol><li><strong><font color="#dd0000">figsize()决定了图像输出的实际大小，即修改dpi图像尺寸不会变</font></strong></li><li><strong><font color="#dd0000">分辨率决定了<u>栅格图像模糊/清晰度</u>，矢量缩放清晰度不影响</font></strong></li></ol><p>所以实际中，以A4纸(21cm宽，高29.7cm)为例，我们可以设置如下：</p><ul><li>21cm/2.54=8.27，29.7/2.54=11.7假设两边各1.27cm的边距，则7.26</li><li>pad_inches=0.5表明各设置0.5英寸-&gt; 四周1.27cm的边距</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建画布，画布默认背景为透明即空颜色facecolor=&#x27;w&#x27;表示设为白色</span></span><br><span class="line">cm = <span class="number">1</span>/<span class="number">2.54</span></span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">21</span>*cm,<span class="number">29.7</span>*cm),facecolor=<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="comment"># fig, ax = plt.subplots(figsize=(8.27,11.7),facecolor=&#x27;w&#x27;)</span></span><br><span class="line">ax.plot(<span class="built_in">range</span>(<span class="number">20</span>))</span><br><span class="line">plt.savefig(<span class="string">r&quot;./A4.png&quot;</span>, dpi=<span class="number">300</span>,pad_inches=<span class="number">0.5</span>,bbox_inches=<span class="string">&#x27;tight&#x27;</span>)</span><br><span class="line">plt.savefig(<span class="string">r&quot;./A4.pdf&quot;</span>, dpi=<span class="number">300</span>,pad_inches=<span class="number">0.5</span>,bbox_inches=<span class="string">&#x27;tight&#x27;</span>)</span><br></pre></td></tr></table></figure><p>其他尺寸的图像类推自行设计</p><h4 id="补充"><a class="markdownIt-Anchor" href="#补充"></a> 补充</h4><p>在jupyter中绘图时，默认dpi为72，此时dpi会影响图像的显示大小，所以为了方便我们可以先预设一个较清晰的dpi，但我们在输出时也可以单独指定文件的dpi，二者并不冲突，运行时<a href="https://matplotlib.org/stable/tutorials/introductory/customizing.html#customizing-with-dynamic-rc-settings">rc调整</a></p><ul><li>更多可以<a href="https://matplotlib.org/stable/gallery/subplots_axes_and_figures/figure_size_units.html">参考</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rc默认设置文件目录：matplotlib.matplotlib_fname()，比如我的路径在</span></span><br><span class="line"><span class="comment"># &gt;&gt;&#x27;D:\\Miniconda3\\envs\\vis\\lib\\site-packages\\matplotlib\\mpl-data\\matplotlibrc&#x27;</span></span><br><span class="line">mpl.rcParams[<span class="string">&#x27;figure.dpi&#x27;</span>] = <span class="number">200</span></span><br></pre></td></tr></table></figure><h3 id="字体的大小磅"><a class="markdownIt-Anchor" href="#字体的大小磅"></a> 字体的大小/磅</h3><blockquote><p>字体的大小也是直接实际的大小，默认是以磅数(point (pt))为单位</p></blockquote><p>1 (pt)磅等于1/72 英寸，默认字体大小为10磅，比如我们可以设置默认字体为10.5磅即五号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">matplotlib.rcParams[<span class="string">&#x27;font.size&#x27;</span>]=<span class="number">10.5</span></span><br></pre></td></tr></table></figure><p>字体字号和磅数的对应关系，具体可以搜索</p><table><thead><tr><th style="text-align:center">字号</th><th style="text-align:center">磅数(pt)</th></tr></thead><tbody><tr><td style="text-align:center">小五</td><td style="text-align:center">9</td></tr><tr><td style="text-align:center">五号</td><td style="text-align:center">10.5</td></tr><tr><td style="text-align:center">小四</td><td style="text-align:center">12</td></tr><tr><td style="text-align:center">小三</td><td style="text-align:center">15</td></tr><tr><td style="text-align:center">三号</td><td style="text-align:center">16</td></tr><tr><td style="text-align:center">小二</td><td style="text-align:center">18</td></tr><tr><td style="text-align:center">二号</td><td style="text-align:center">22</td></tr></tbody></table><h3 id="线宽和点的大小"><a class="markdownIt-Anchor" href="#线宽和点的大小"></a> 线宽和点的大小</h3><blockquote><p>lw=2.8时大概线宽是1mm； 散点图s=math.pi*8, 直径约为2mm</p></blockquote><p>线宽默认1.5，换算1pt=2.54/72 -&gt; <strong>1.5pt=0.53mm</strong>， 默认的markersize=2.12mm</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">matplotlib.rcParams[<span class="string">&#x27;lines.linewidth&#x27;</span>]=<span class="number">1.5</span></span><br><span class="line">matplotlib.rcParams[<span class="string">&#x27;lines.markersize&#x27;</span>]=<span class="number">6</span></span><br></pre></td></tr></table></figure><p>散点图的点默认尺寸为rcParams[‘lines.markersize’] ** 2=1.27cm²，<strong>，注意代表的是散点圆的面积</strong></p><h3 id="尺寸计算原理"><a class="markdownIt-Anchor" href="#尺寸计算原理"></a> 尺寸计算原理</h3><blockquote><p>设置的时候只需要用实际预期长度除以2.54。</p></blockquote><p>图像输出的实际尺寸大小计算及距举例，<strong>1厘米(cm)=0.394英寸(inch)， 1英寸=2.54厘米</strong></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>i</mi><mi>m</mi><mi>a</mi><mi>g</mi><mi>e</mi><mi>s</mi><mi>i</mi><mi>z</mi><mi>e</mi><mo stretchy="false">(</mo><mi>c</mi><mi>m</mi><mo stretchy="false">)</mo><mo>=</mo><mi>d</mi><mi>p</mi><mi>i</mi><mo>×</mo><mi>f</mi><mi>i</mi><mi>g</mi><mi>s</mi><mi>i</mi><mi>z</mi><mi>e</mi><mo>÷</mo><mfrac><mrow><mi>d</mi><mi>p</mi><mi>i</mi></mrow><mn>2.54</mn></mfrac><mspace linebreak="newline"></mspace><mo>=</mo><mi>f</mi><mi>i</mi><mi>g</mi><mi>s</mi><mi>i</mi><mi>z</mi><mi>e</mi><mo>×</mo><mn>2.54</mn><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">imagesize(cm)=dpi\times figsize\div \frac{dpi}{2.54}\\=figsize\times 2.54 \\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal">m</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mord mathnormal">e</span><span class="mopen">(</span><span class="mord mathnormal">c</span><span class="mord mathnormal">m</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">p</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">÷</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.0574399999999997em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord">.</span><span class="mord">5</span><span class="mord">4</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mord mathnormal">p</span><span class="mord mathnormal">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">.</span><span class="mord">5</span><span class="mord">4</span></span><span class="mspace newline"></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>d</mi><mi>p</mi><mi>i</mi><mo>=</mo><mn>300</mn><mo separator="true">,</mo><mi>f</mi><mi>i</mi><mi>g</mi><mi>s</mi><mi>i</mi><mi>z</mi><mi>e</mi><mo>=</mo><mo stretchy="false">(</mo><mn>6</mn><mo separator="true">,</mo><mn>12</mn><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mi>w</mi><mi>i</mi><mi>d</mi><mi>t</mi><mi>h</mi><mo>=</mo><mn>6</mn><mo>×</mo><mn>300</mn><mo>÷</mo><mfrac><mn>300</mn><mn>2.54</mn></mfrac><mo>=</mo><mn>15.24</mn><mi>c</mi><mi>m</mi><mspace linebreak="newline"></mspace><mi>h</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo>=</mo><mn>12</mn><mo>×</mo><mn>2.54</mn><mo>=</mo><mn>30.48</mn><mi>c</mi><mi>m</mi></mrow><annotation encoding="application/x-tex">dpi = 300, figsize = (6,12) \\width = 6\times 300 \div \frac{300}{2.54}=15.24cm \\height = 12\times 2.54 = 30.48cm</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">p</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">3</span><span class="mord">0</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">6</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">2</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">i</span><span class="mord mathnormal">d</span><span class="mord mathnormal">t</span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">6</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">÷</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord">.</span><span class="mord">5</span><span class="mord">4</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span><span class="mord">0</span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">5</span><span class="mord">.</span><span class="mord">2</span><span class="mord">4</span><span class="mord mathnormal">c</span><span class="mord mathnormal">m</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">h</span><span class="mord mathnormal">e</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">h</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">.</span><span class="mord">5</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord">0</span><span class="mord">.</span><span class="mord">4</span><span class="mord">8</span><span class="mord mathnormal">c</span><span class="mord mathnormal">m</span></span></span></span></span></p><p><strong>分辨率</strong>/resolution的度量-dpi：指每英寸点数Dots per inch/每厘米点数</p><p><strong>像素密度</strong>测量指标：ppi; pixels/cm ppcm</p><ul><li>每英寸像素Pixels per inch/每厘米像素pixels per centimetre</li></ul><h2 id="补充概念"><a class="markdownIt-Anchor" href="#补充概念"></a> 补充概念</h2><h3 id="静态图像文件格式"><a class="markdownIt-Anchor" href="#静态图像文件格式"></a> 静态图像文件格式</h3><blockquote><p>栅格raster(也称位图)和矢量vector是两类</p></blockquote><table><thead><tr><th>图片/文件格式</th><th>类型</th><th>大小</th><th>主流用途</th></tr></thead><tbody><tr><td>JPEG/JPG</td><td>有损光栅</td><td>小</td><td>Web/在线网站</td></tr><tr><td>PNG</td><td>无损光栅</td><td>中</td><td>屏幕</td></tr><tr><td>TIF/TIFF</td><td>无损光栅</td><td>大</td><td>印刷/打印</td></tr><tr><td>SVG</td><td>无损可缩放矢量</td><td>小</td><td>web/论文</td></tr><tr><td>PDF</td><td>便携式文档格式</td><td>小</td><td>多图/共享</td></tr></tbody></table><h4 id="主要区别"><a class="markdownIt-Anchor" href="#主要区别"></a> 主要区别</h4><ul><li><p>JPEG是一种有损图像文件格式，其质量会随着文件大小而降低</p></li><li><p>TIFF和RNG都是无损压缩的位图格式，但是TIF文件更大保留了更多的信息；而PNG 更加轻巧且支持透明度；但png不支持 CMYK 颜色</p></li><li><p>通常将 SVG 描述为一种图像格式，但它实际上是一种文档格式，类似于 HTML 文档，因此可以托管脚本或 CSS，因此常用于网站呈现</p></li><li><p>svg和pdf输出都是可缩放无损的，不会出现栅格的放大模糊现象</p></li><li><p>PDF可以直接用于写作，组合多个图像</p></li></ul><h4 id="别名"><a class="markdownIt-Anchor" href="#别名"></a> 别名</h4><p>JPEG/JPG：Joint Photographic Experts Group，联合图像专家组</p><p>PNG：Portable Network Graphics，便携式网络图形</p><p>TIFF：Tagged Image File Format，标记图像文件格式</p><p>SVG：Scalable Vector Graphics，可缩放矢量图形（基于XML标记语言）</p><p>PDF：Portable Document Format，便携式文档格式</p><h3 id="backends"><a class="markdownIt-Anchor" href="#backends"></a> Backends</h3><blockquote><p><a href="https://matplotlib.org/stable/users/explain/backends.html">后端Backends</a>/前端frontend，后端可理解为支撑绘图制作的工具，前端则是面向用户的绘图代码</p></blockquote><p>后端是绘制图形的底层工具和可操作接口的组合，针对不同的需求，如有时需要在命令行输出图形，或需要在jupyter中绘制图形或直接根据数值生成图形写入内存，不同的后端支持不同的文件格式</p><ul><li>后端有交互式和非交互式</li><li>默认Matplotlib 应该自动选择一个后端，允许交互式工作和从脚本绘图，输出到屏幕或文件，用户不需手动设置。若需要编写图形界面或者嵌入Web应用程序服务器可再查</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python可视化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Matplotlib </tag>
            
            <tag> 出图尺寸 </tag>
            
            <tag> 分辨率 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python中的时间格式(2)：速查版</title>
      <link href="/posts/13994161/"/>
      <url>/posts/13994161/</url>
      
        <content type="html"><![CDATA[<p>前面花时间整理了一下Python中时间格式的几个基础模块的用法，主要是针对<a href="https://hscyber.github.io/posts/a0dd2ef9/">时间格式的表达及转换</a>。不过发现有些冗余不好找，因此整一个速查的版本方便自己快速<strong>复制粘贴</strong>。</p><span id="more"></span><p>一般只用<code>datetime</code>这个库即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, date, hour</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure><h2 id="常规时间格式处理"><a class="markdownIt-Anchor" href="#常规时间格式处理"></a> 常规时间格式处理</h2><p>转换，将根据字符串的模式匹配并生成时间格式</p><p>时间格式之后就可以按照自己的要求进行转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字符串转时间</span></span><br><span class="line">dt = datetime.strptime(<span class="string">&quot;21/11/06 16:30:00&quot;</span>, <span class="string">&quot;%d/%m/%y %H:%M:%S&quot;</span>)</span><br><span class="line">dt = datetime.strptime(<span class="string">&quot;21/11/06 16&quot;</span>, <span class="string">&quot;%d/%m/%y %H&quot;</span>)</span><br><span class="line">year,month, udate = dt.year, dt.month, dt.date()</span><br><span class="line"><span class="comment"># 时间转字符串</span></span><br><span class="line">t_str = dt.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line">t_str = dt.strftime(<span class="string">&quot;%Y-%m-%d %H&quot;</span>)</span><br><span class="line">t_str = dt.strftime(<span class="string">&quot;%Y/%m/%d&quot;</span>)</span><br><span class="line"><span class="comment"># 时间加减，如加时区</span></span><br><span class="line">time_bj = time_utc+ timedelta(hours=<span class="number">8</span>)</span><br></pre></td></tr></table></figure><h2 id="pandas时间序列处理"><a class="markdownIt-Anchor" href="#pandas时间序列处理"></a> pandas时间序列处理</h2><blockquote><p>建议是写出文件的时候转成字符串，在读取处理的时候则使用datetime格式便于计算和绘图等等</p></blockquote><p>时间格式转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入时即转换</span></span><br><span class="line">df = pd.read_csv(filepath, parse_dates=[<span class="string">&#x27;time&#x27;</span>,<span class="string">&#x27;date&#x27;</span>], encoding = <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="comment"># 如果是字符串则</span></span><br><span class="line">df[<span class="string">&#x27;time&#x27;</span>]=pd.to_datetime(df[<span class="string">&#x27;time_str&#x27;</span>].astype(<span class="built_in">str</span>), <span class="built_in">format</span>=<span class="string">&#x27;%Y/%m/%d&#x27;</span>)</span><br><span class="line"><span class="comment"># 如果是时间格式转字符串</span></span><br><span class="line"><span class="comment"># df[&#x27;time_str&#x27;]=df[&#x27;time&#x27;].astype(str)； strftime()</span></span><br><span class="line">df[<span class="string">&#x27;time_str&#x27;</span>] = df[<span class="string">&#x27;time&#x27;</span>].dt.strftime(<span class="string">&#x27;%m-%d-%Y&#x27;</span>)</span><br></pre></td></tr></table></figure><p>时间序列的拆分合并</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 合并</span></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&#x27;year&#x27;</span>: [<span class="number">2015</span>, <span class="number">2016</span>],<span class="string">&#x27;month&#x27;</span>: [<span class="number">2</span>, <span class="number">3</span>],<span class="string">&#x27;day&#x27;</span>: [<span class="number">4</span>, <span class="number">5</span>],<span class="string">&#x27;hour&#x27;</span>:[<span class="number">10</span>,<span class="number">20</span>]&#125;)</span><br><span class="line">df[<span class="string">&#x27;date&#x27;</span>] = pd.to_datetime(df[[<span class="string">&#x27;year&#x27;</span>,<span class="string">&#x27;month&#x27;</span>,<span class="string">&#x27;day&#x27;</span>]])</span><br><span class="line">df[<span class="string">&#x27;datetime&#x27;</span>] = pd.to_datetime(df.date) + pd.to_timedelta(df.hour, unit=<span class="string">&#x27;h&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#拆分/转换示例</span></span><br><span class="line">df[<span class="string">&#x27;day&#x27;</span>] = df[<span class="string">&#x27;time&#x27;</span>].dt.strftime(<span class="string">&#x27;%d&#x27;</span>)</span><br><span class="line">df[<span class="string">&#x27;hour&#x27;</span>] = df[<span class="string">&#x27;time&#x27;</span>].dt.strftime(<span class="string">&#x27;%H&#x27;</span>)</span><br><span class="line">df[<span class="string">&#x27;date&#x27;</span>] = df[<span class="string">&#x27;time&#x27;</span>].dt.strftime(<span class="string">&#x27;%Y-%m-%d&#x27;</span>)</span><br><span class="line">df[<span class="string">&#x27;date&#x27;</span>] = df[<span class="string">&#x27;time&#x27;</span>].dt.strftime(<span class="string">&#x27;%x&#x27;</span>)</span><br></pre></td></tr></table></figure><p>时间序列范围筛选</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># df[&#x27;time&#x27;]为时间格式：</span></span><br><span class="line">df2 = df.loc[(df.time &gt; pd.datetime(<span class="number">2017</span>,<span class="number">8</span>,<span class="number">23</span>,<span class="number">5</span>)) &amp; (df.time &lt;= pd.datetime(<span class="number">2017</span>,<span class="number">8</span>,<span class="number">27</span>,<span class="number">23</span>))]</span><br><span class="line">df2 = df.loc[(df.time &lt; pd.datetime(<span class="number">2017</span>,<span class="number">8</span>,<span class="number">23</span>,<span class="number">6</span>)) | (df.time &gt; pd.datetime(<span class="number">2017</span>,<span class="number">8</span>,<span class="number">27</span>,<span class="number">0</span>))]</span><br><span class="line"><span class="comment"># df[&#x27;time&#x27;]为字符串：</span></span><br><span class="line">df2 = df.loc[(df.time &gt; <span class="string">&#x27;2017-08-20 00:00:00&#x27;</span>) &amp; (df.time &lt; <span class="string">&#x27;2017-08-26 00:00:00&#x27;</span>)]</span><br></pre></td></tr></table></figure><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.date_range.html">创建序列</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建序列， 可以直接接收</span></span><br><span class="line"><span class="comment"># 默认都是ISO 8601 格式 YYYY-MM-DD, &#x27;2018-01-01 03:00:00&#x27;</span></span><br><span class="line">df[<span class="string">&#x27;time&#x27;</span>] = pd.date_range(start=<span class="string">&#x27;1/1/2018&#x27;</span>, end=<span class="string">&#x27;1/08/2018&#x27;</span>, freq=<span class="string">&#x27;D&#x27;</span>) <span class="comment">#8天</span></span><br><span class="line">pd.date_range(start=<span class="string">&#x27;1/1/2018&#x27;</span>, end=<span class="string">&#x27;1/08/2018&#x27;</span>) <span class="comment">#8天</span></span><br><span class="line">pd.date_range(start=<span class="string">&#x27;1/1/2018&#x27;</span>, periods=<span class="number">8</span>) <span class="comment">#8天</span></span><br><span class="line">pd.date_range(start=<span class="string">&#x27;1/1/2018&#x27;</span>, periods=<span class="number">8</span>, freq=<span class="string">&#x27;2M&#x27;</span>)  <span class="comment">#8天，两天之间间隔为两个月</span></span><br><span class="line">pd.date_range(start=<span class="string">&#x27;2018-01-01&#x27;</span>, end=<span class="string">&#x27;2018-02-01&#x27;</span>, freq=<span class="string">&#x27;3H&#x27;</span>)</span><br><span class="line">pd.date_range(start=<span class="string">&#x27;2017-01-01&#x27;</span>, end=<span class="string">&#x27;2018-01-01&#x27;</span>, closed=<span class="string">&#x27;left&#x27;</span>) <span class="comment">#创建指定月份的日期范围pandas&lt;1.4版本,参数名为closed, pandas&gt;1.4版本为inclusive</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一月份的时间数据，按天，按小时</span></span><br><span class="line">pd.date_range(start=<span class="string">&#x27;2017-01-01&#x27;</span>, end=<span class="string">&#x27;2017-02-01&#x27;</span>, inclusive=<span class="string">&#x27;left&#x27;</span>) <span class="comment">#创建指定月份的日期范围</span></span><br><span class="line">pd.date_range(start=<span class="string">&#x27;2017-01-01&#x27;</span>, end=<span class="string">&#x27;2017-02-01&#x27;</span>, inclusive=<span class="string">&#x27;left&#x27;</span>, freq=<span class="string">&#x27;H&#x27;</span>) </span><br></pre></td></tr></table></figure><h2 id="计算脚本时长"><a class="markdownIt-Anchor" href="#计算脚本时长"></a> 计算脚本时长</h2><p>对于python <code>.py</code>脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">start_time = time.time()</span><br><span class="line">main()</span><br><span class="line">seconds = time.time() - start_time</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Time Taken:&#x27;</span>, time.strftime(<span class="string">&quot;%H:%M:%S&quot;</span>,time.gmtime(seconds)))</span><br></pre></td></tr></table></figure><p>对于jupyter notebook/lab, 运行单元格加一行，如果是vscode则不需要</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line">my process...</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 时间格式 </tag>
            
            <tag> datetime </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandas(杂)：表格的各种连接方式</title>
      <link href="/posts/18b022c/"/>
      <url>/posts/18b022c/</url>
      
        <content type="html"><![CDATA[<center>简单记录一下数据库或表格连接的类型，建议通过行数辨别</center><span id="more"></span><p>在<code>pd.merge(); df.join(); gpd.sjoin()</code>等函数中会用到，只有存在共同字段的列才能连接。否则拼接应该采用<code>pd.concat()</code><a href="https://pandas.pydata.org/docs/reference/api/pandas.concat.html">函数</a></p><ol><li><p>内连接 (inner join)，一般默认，只保留匹配到的结果</p></li><li><p>左(外)连接 (left join)，以左侧表的连接键唯一值数量为准，左表行数不变</p></li><li><p>右(外)连接 (right join)，右表行数不变</p></li><li><p>全连接 (full join)，在pandas中没有：在数据库中指返回左右表的所有行，缺失处补空值。行数=左表的行数+右表的行数-公共连接行</p></li></ol><p>举例，下面左表<strong>5行</strong>2列，右表-<strong>4行</strong>两列，公共列为fid，fid<strong>公共行数为3行</strong>，结果</p><ul><li><p>内连接返回三行，[‘a’, ‘b’,‘c’]，未匹配的丢弃</p></li><li><p>左连接返回5行，[1,2,3,4,5]，无值则补null</p></li><li><p>右连接返回3行，[3,4,5,7]，无值则补null</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data1 = &#123;</span><br><span class="line">    <span class="string">&#x27;fid&#x27;</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>:[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line">data2 = &#123;</span><br><span class="line">    <span class="string">&#x27;fid&#x27;</span>:[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>],</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>:[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;e&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line">df1 = pd.DataFrame(data1)</span><br><span class="line">df2 = pd.DataFrame(data2)</span><br><span class="line"><span class="comment"># 查看输出</span></span><br><span class="line">pd.merge(left=df1, right=df2, on=<span class="string">&#x27;fid&#x27;</span>, how=<span class="string">&#x27;left&#x27;</span>)</span><br><span class="line">pd.merge(left=df1, right=df2, on=<span class="string">&#x27;fid&#x27;</span>, how=<span class="string">&#x27;right&#x27;</span>)</span><br><span class="line">pd.merge(left=df1, right=df2, on=<span class="string">&#x27;fid&#x27;</span>, how=<span class="string">&#x27;inner&#x27;</span>)</span><br></pre></td></tr></table></figure><p>分别输出：</p><img src="/posts/18b022c/image-20220722223231092.png" class alt="image-20220722223231092">]]></content>
      
      
      <categories>
          
          <category> Pandas数据处理分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pandas </tag>
            
            <tag> join </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>矢栅处理(杂)：geopandas常用函数小结</title>
      <link href="/posts/57d7f29/"/>
      <url>/posts/57d7f29/</url>
      
        <content type="html"><![CDATA[<center>汇总一下常用的几行geopandas代码便于复用</center><span id="more"></span><blockquote><p>geopandas一般用于处理数据量不大的文件，文件大的空间操作较慢、</p><p>另外，理论上esri shapefile的文件大小上限为2Gb</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> geopandas <span class="keyword">as</span> gpd</span><br><span class="line"><span class="keyword">from</span> geopandas <span class="keyword">import</span> sjoin</span><br></pre></td></tr></table></figure><p>创建，读取or写出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读</span></span><br><span class="line">shapefilepath = <span class="string">&quot;..shp&quot;</span></span><br><span class="line">gdf = gpd.read_file(shapefilepath, encoding = <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">gdf = gpd.read_file(shapefilepath, encoding = <span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line"><span class="comment"># 通过df并添加集合创建</span></span><br><span class="line">df = pd.read_csv(filepath)</span><br><span class="line">gdf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df.lng, df.lat), crs=<span class="string">&quot;EPSG:4326&quot;</span>)</span><br><span class="line">gdf = gpd.GeoDataFrame(df, geometry=geometries, crs=<span class="string">&quot;EPSG:4326&quot;</span>)</span><br><span class="line"><span class="comment"># 写</span></span><br><span class="line">res0.to_file(outshapefile, encoding = <span class="string">&#x27;utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure><p>空间连接-<a href="https://geopandas.org/en/latest/docs/user_guide/mergingdata.html">ref</a>, predicate可选参数</p><ul><li>intersects、contains、within、touches、crosses、overlaps</li><li>how: left、right、inner，<a href="https://hscyber.github.io/posts/18b022c/">连接方式</a>含义</li><li>如果pandas的版本较旧，predicate参数名称为<code>op</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">res = sjoin(left_df=gdf_points, right_df=gdf_polygon, predicate=<span class="string">&#x27;within&#x27;</span>, how=<span class="string">&#x27;inner&#x27;</span>)</span><br><span class="line">res = sjoin(left_df=gdf_polygon, right_df=gdf_points, predicate=<span class="string">&#x27;contains&#x27;</span>, how=<span class="string">&#x27;inner&#x27;</span>)</span><br><span class="line">res = sjoin(left_df=gdf_polygon1, right_df=gdf_polygon2, predicate=<span class="string">&#x27;intersects&#x27;</span>, how=<span class="string">&#x27;inner&#x27;</span>)</span><br><span class="line">res = sjoin(left_df=gdf_polygon1, right_df=gdf_polygon2, op=<span class="string">&#x27;intersects&#x27;</span>, how=<span class="string">&#x27;inner&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 时空数据处理分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> geopandas </tag>
            
            <tag> spatialjoin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DLL文件及conda模块加载失败</title>
      <link href="/posts/69110d48/"/>
      <url>/posts/69110d48/</url>
      
        <content type="html"><![CDATA[<p>近期debug，同学在引入包(rasterio)的过程中频繁遇到<code>DLL load failed while importing _version: 找不到指定的程序</code>的问题，大部分情况都是因为包依赖的冲突/不适配问题</p><span id="more"></span><p>一般重新安装或者重新配置环境解决。</p><p>经分析此处大概也是Python环境中包的依赖版本及路径的冲突问题，一开始新建了3.9的环境能够运行，但是偶尔能用，未进一步深究，直接建议安装了3.9的miniconda替换了旧的3.7的Anaconda（该版本有点旧了）,此处大概是因为基础环境中的3.7版本GDAL与新环境的冲突。旧版本的GDAL还需要自己设置路径。</p><h2 id="dll文件"><a class="markdownIt-Anchor" href="#dll文件"></a> DLL文件</h2><blockquote><p>Dynamic-link_library 动态链接库，也即是<strong>库</strong></p></blockquote><p><a href="https://en.wikipedia.org/wiki/Dynamic-link_library">wiki</a>：是Microsoft在Microsoft Windows和OS/2操作系统中实现的共享库概念，与exe一样，DLL可以包含任意组合的代码、数据和资源。</p><ul><li>动态链接：程序在执行时从共享库中调用代码片段dll。The same architectural concept that allowed GDI to load different device drivers is that which allowed the <strong><a href="https://en.wikipedia.org/wiki/Windows_shell">Windows shell</a> to load different Windows programs</strong>, and for these programs to invoke API calls from the shared USER and GDI libraries. That concept was “dynamic linking”.</li><li>共享：不同的应用程序可以调用同一个DLL即DLL 中的代码通常在所有使用 DLL 的进程之间共享</li><li>好处：DLL 为共享代码和数据提供了一种机制，允许共享代码/数据的开发人员升级功能，而无需重新链接或重新编译应用程序。</li></ul><p>与静态库一样，DLL 的导入库由.lib文件扩展名注明</p><h2 id="conda版本及包问题"><a class="markdownIt-Anchor" href="#conda版本及包问题"></a> Conda版本及包问题</h2><blockquote><p>不同包来源和依赖库版本不同，加上维护群体和更新快慢差异，因此直接安装多个包可能存在冲突。</p></blockquote><blockquote><p>这也是为什么建议通过pip conda之类的工具来进行包的管理，即有人帮我们做了一道版本的”审查”。建议是尽量使用主流的一些包，安装时优先使用conda-forge，如果还有问题先试试新建环境，一般能走通，或者也可以找到源码自己改写。</p></blockquote><p>个人习惯使用<a href="https://docs.conda.io/en/latest/miniconda.html#:~:text=Miniconda%20is%20a%20free%20minimal,zlib%20and%20a%20few%20others.">miniconda</a>3.9版本或者3.8作为基础环境进行环境管理，然后根据不同的工作新建常用的一些环境进行环境分离（而且新环境坏了也可以直接删掉重来），比如我个人会常建空间处理、文本处理、爬虫等几个环境进行使用，而不使用base，另外有特殊版本需求的任务可以新建如2.7 3.6 环境等</p><ul><li>之前写过Python入门、包以及conda环境管理，后续改改上传一下</li></ul><p>安装包的时候建议通过谷歌搜索conda package名找到最佳安装命令(conda/或者在github)，及优先使用<a href="https://anaconda.org/"> conda-forge</a>安装，没有的包则直接通过pip安装关于为什么建议使用conda-forge和不同包分法渠道的区别还可以看看这里<a href="https://conda-forge.org/docs/user/introduction.html">官网</a>,<a href="https://stackoverflow.com/questions/39857289/should-conda-or-conda-forge-be-used-for-python-environments">帖2</a></p><ul><li>设置默认渠道的方式：<code>conda config --add channels conda-forge</code></li><li>包来源渠道channels设置文件一般在用户文件处，如我的是C:/Users/huangs/.condarc</li></ul><h2 id="部分参考"><a class="markdownIt-Anchor" href="#部分参考"></a> 部分参考</h2><ul><li><p><a href="https://docs.conda.io/en/latest/miniconda.html#:~:text=Miniconda%20is%20a%20free%20minimal,zlib%20and%20a%20few%20others.">Miniconda</a></p></li><li><p><a href="https://conda-forge.org/docs/user/introduction.html">https://conda-forge.org/docs/user/introduction.html</a></p></li><li><p><a href="https://blog.csdn.net/qq_41683065/article/details/99710373">csdn</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> conda环境管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时间序列(1)：LOESS(STL)时间序列分解</title>
      <link href="/posts/6e05178d/"/>
      <url>/posts/6e05178d/</url>
      
        <content type="html"><![CDATA[<p>近期处理定位请求时间序列的过程中用到了STL时间序列分解，趋势分析及变点检测方法，在Python和R中都进行了实践，小结一下参数设置和其他个人体会。内容包括：</p><p>1-时间序列建模/成分提取及异常分析思路；2-STL调参及代码(python and R);</p><span id="more"></span><h2 id="引言"><a class="markdownIt-Anchor" href="#引言"></a> 引言</h2><blockquote><p>时间序列中的”异常”？</p><p>此处的时间序列包含成分：周期成分(seasonal)、趋势成分(trend)及其他部分(remainded/)</p></blockquote><p>周期：如一个商场的总人口每天24小时的规律变化</p><p>趋势：最小单元一般是一个周期，及尺度会大于周期。比如商场周一到周末会有一个变化/减少的趋势线</p><p>理论上，如果规律完美，原始时间序列减去周期及趋势应该能得到一条水平线，恒为0，但实际上很少会这样，能够得到一个在0或者某个值附近波动的变化，这样都可以称为理想的白噪音了，也即是这个过程没有任何问题，但实际上：</p><ul><li>各种不确定性的内部外部因素都可能产生异常，导致某天某些时候数据突变，甚至是整个趋势的变化，这就是通常在研究中我们需要关注的点并结合问题进行进一步的分析。</li><li>有的异常或者个别的异常可能并不带来负面影响，那他就是可容忍的，因此我们需要设置一些<strong>阈值</strong>，通过一些方法来排除掉，<strong>从而找到我们真正需要关心的那些变化</strong></li></ul><p>在异常分析时这是比较常规的方式：</p><ol><li>对序列进行<strong>建模/拟合</strong>(时间序列分解实际也是这样的)，模型总是理想的</li><li>分离常态并去除规律性的部分（周期或趋势或二者均去除）。趋势的去除和周期的尺度和时间长度密切相关，因此需要结合实际问题和情况考虑趋势是否需要去除</li><li>根据问题，设定条件，判别真正的<strong>异常</strong></li></ol><h2 id="stl时序分解"><a class="markdownIt-Anchor" href="#stl时序分解"></a> stl时序分解</h2><blockquote><p>STL(“Seasonal and Trend decomposition using Loess”) 是一种用于分解时间序列的通用且稳健的方法。</p></blockquote><blockquote><p>Loess 是一种估计非线性关系的方法。STL 方法由RB Cleveland等人 ( <a href="https://otexts.com/fpp2/stl.html#ref-Cleveland1990">1990</a> )开发。</p></blockquote><h3 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h3><p>STL时间序列分解将序列分解为周期成分(seasonal)、趋势成分(trend)及其他部分(remainded/)，这几个成分可以是相加的也可以是相乘的（及加法模型和乘法模型），乘法也就意味着随着时间的推移不同成为有累积叠加作用</p><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><ul><li><p>预测： 方法与实践: <a href="https://otexts.com/fppcn/stl.html">在线书籍</a></p></li><li><p>python statsmodel包:<a href="https://www.statsmodels.org/devel/examples/notebooks/generated/stl_decomposition.html#">stl_decomposition</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 时空数据处理分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 时间序列分解 </tag>
            
            <tag> statsmodels </tag>
            
            <tag> R </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式re模块用法</title>
      <link href="/posts/da405e24/"/>
      <url>/posts/da405e24/</url>
      
        <content type="html"><![CDATA[<p>re(Regular Expression)/正则表达式是一个内置的文本处理模块，在进行<strong>数据处理（筛选、替换）以及网页数据</strong>抓取时十分常用该模块的主要功能是基于给定的表达式<strong>匹配</strong><u>字符串</u>中的某些内容，本文参考官方文档，学习以下几点内容：<u>1-正则表达式的语法；2-常用函数及参数；3-案例及常用表达式</u></p><span id="more"></span><p>先介绍函数，再介绍写法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br></pre></td></tr></table></figure><h2 id="函数方法"><a class="markdownIt-Anchor" href="#函数方法"></a> 函数方法</h2><blockquote><p>flages是在匹配时的附加参数，获得更加准确及干净的匹配结果，如可以选择<strong>不考虑换行，忽略大小写等</strong></p></blockquote><h3 id="方法及对象"><a class="markdownIt-Anchor" href="#方法及对象"></a> 方法及对象</h3><ol><li><code>re.compile(pattern, flags=0)</code>：将表达式编译为<strong>正则表达式对象</strong>以供后续使用/<strong>复用</strong><ul><li>输入pattern为表达式字符串，返回对象类型为 &lt;class ‘re.Pattern’&gt;，可以直接进行检索也可作为其他函数的pattern输入</li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pattern_ = re.<span class="built_in">compile</span>(pattern)</span><br><span class="line">result = re.match(pattern_, string)<span class="comment">#实际上就等价于re.match(pattern, string)</span></span><br><span class="line"><span class="comment"># 其他参见pattern_.search();pattern_.match();pattern_.split();pattern_.findall();...</span></span><br></pre></td></tr></table></figure><ol start="2"><li><code>re.findall(pattern, string, flags=0)</code>：常用，返回全部匹配结果，以<strong>列表list</strong>返回<ul><li>通过在表达式中加括号可以实现元组分组，两个示例</li><li><code>re.finditer(pattern, string, flags=0)</code>：同上，但是返回结果为一个迭代器</li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">re.findall(<span class="string">r&#x27;[a-zA-Z]+&#x27;</span>, <span class="string">&#x27;Which453foot378（*&amp;…… or378 378hand378 fell378 fastest&#x27;</span>)</span><br><span class="line"><span class="comment"># 返回其中的单词 [&#x27;which&#x27;, &#x27;foot&#x27;, &#x27;or&#x27;, &#x27;hand&#x27;, &#x27;fell&#x27;, &#x27;fastest&#x27;]</span></span><br><span class="line">re.findall(<span class="string">r&#x27;(\w+)=(\d+)&#x27;</span>, <span class="string">&#x27;set width=20 and height=10&#x27;</span>)</span><br><span class="line">[(<span class="string">&#x27;width&#x27;</span>, <span class="string">&#x27;20&#x27;</span>), (<span class="string">&#x27;height&#x27;</span>, <span class="string">&#x27;10&#x27;</span>)]</span><br></pre></td></tr></table></figure><ol start="3"><li><p><code>re.search(pattern, string, flags=0)</code>: 整个字符串匹配并返回满足pattern的的<strong>第一个</strong>位置，可以为空</p><ul><li>返回对象类型是&lt;class ‘re.Match’&gt;，如果没有匹配到，则返回None ；</li></ul></li><li><p><code>re.match(pattern, string, flags=0)</code>: 匹配字符串开头是否满足pattern并返回，不常用</p></li><li><p><code>re.split(pattern, string, maxsplit=0, flags=0)</code>：匹配表达式分割string，如匹配逗号分开单词</p><ul><li><p>可以视为str.split(char, num)的加强版，maxsplit设置分割次数，默认全部分割</p></li><li><p>如果pattern中包含了括号则会同时返回匹配到的内容及切分后的结果，示例：</p></li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">re.split(<span class="string">r&#x27;\W+&#x27;</span>, <span class="string">&#x27;Words, words, words.&#x27;</span>)</span><br><span class="line"><span class="comment"># [&#x27;Words&#x27;, &#x27;words&#x27;, &#x27;words&#x27;, &#x27;&#x27;]</span></span><br><span class="line">re.split(<span class="string">r&#x27;(\W+)&#x27;</span>, <span class="string">&#x27;Words, words, words.&#x27;</span>)</span><br><span class="line"><span class="comment"># [&#x27;Words&#x27;, &#x27;, &#x27;, &#x27;words&#x27;, &#x27;, &#x27;, &#x27;words&#x27;, &#x27;.&#x27;, &#x27;&#x27;]</span></span><br></pre></td></tr></table></figure><ol start="6"><li><p><code>re.sub(pattern, repl, string, count=0, flags=0)</code>：查找并<strong>替换</strong>string中pattern匹配的内容</p><ul><li><p>repl是替换为的新的内容，也可以是一个函数</p></li><li><p>可以视为str.replace(‘…’, ‘…’)的加强版，<code>re.``subn()</code>类似，但是会同时返回替换/匹配成功的次数</p></li></ul></li></ol><h3 id="flags参数"><a class="markdownIt-Anchor" href="#flags参数"></a> flags参数</h3><blockquote><p>一次只能设一个</p></blockquote><table><thead><tr><th style="text-align:center">表达式flags=</th><th style="text-align:center">全称</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">re.A</td><td style="text-align:center">ASCII</td><td style="text-align:center">让 \w, \W, \b, \B, \d, \D, \s 和 \S 只匹配ASCII，而不是Unicode</td></tr><tr><td style="text-align:center">re.I</td><td style="text-align:center">IGNORECASE</td><td style="text-align:center">忽略大小写匹配</td></tr><tr><td style="text-align:center">re.S</td><td style="text-align:center">DOTALL</td><td style="text-align:center">最常用，让 <code>'.'</code> 特殊字符匹配任何字符，包括换行符</td></tr><tr><td style="text-align:center">re.M</td><td style="text-align:center">MULTILINE</td><td style="text-align:center">当之前只能匹配字符串开头结尾的的可以拓展到多行的开头结尾</td></tr><tr><td style="text-align:center">re.X</td><td style="text-align:center">VERBOSE</td><td style="text-align:center">编写友好，写表达式时可以进行分段和添加注释</td></tr></tbody></table><h2 id="正则表达式语法"><a class="markdownIt-Anchor" href="#正则表达式语法"></a> 正则表达式语法</h2><blockquote><p>最重要的是完成准确的正则表达式的书写，通常的形式是  r’raw…’</p></blockquote><p>正则表达式的几个点</p><ol><li>可以拼接组合，如‘a-zA-Z’会一起匹配大小写字母，A|B 或匹配，优先A</li><li>可以包含普通或者特殊字符，</li><li>元字符有<code>. ^ $ * + ? &#123; &#125; [ ] \ | ( )</code>，它们不匹配自己</li><li>反斜杠<code>\</code>用于和其他字母组合表示特殊匹配形式</li><li>重复修饰符 (<code>*</code>, <code>+</code>, <code>?</code>, <code>&#123;m,n&#125;</code>，字面意思，重复匹配</li><li>关于转义符的解释：<code>r&quot;\n&quot;</code> 表示包含 <code>'\'</code> 和 <code>'n'</code> 两个字符的字符串，而 <code>&quot;\n&quot;</code> 则表示只包含一个换行符的字符串,<code>r&quot;.*?&quot;</code>匹配特殊序列而不是匹配<code>?</code>本身。</li></ol><p>语法-<a href="https://docs.python.org/zh-cn/3/library/re.html#regular-expression-syntax">详细参考</a>，此处仅介绍部分</p><ul><li><code>.</code>：匹配除了换行的任意字符。如果指定了标签<strong>re.S</strong>，它将匹配包括换行符的任意字符。</li><li><code>[]</code>:表示一个字符集合，如[amk]匹配三个字母，<code>[0-5][0-9]</code>匹配00-59<ul><li>特殊字符在集合中会失去其特殊意义，如<code>[(+*)]</code> 只会匹配这几个字面字符之一 <code>'('</code>, <code>'+'</code>, <code>'*'</code>, or <code>')'</code>。</li><li>[^…]，匹配不在 [] 中的字符</li></ul></li><li><code>()</code>: 匹配括号内的表达式，也表示一个组</li></ul><p>重复匹配符</p><ul><li><code>*</code>: 对它前面的正则式匹配0到任意次重复， 尽量多的匹配字符串。</li><li><code>+</code>: 对它前面的正则式匹配1到任意次重复。</li><li><code>?</code>: 对它前面的正则式匹配0到1次重复。 <code>ab?</code> 会匹配 <code>'a'</code> 或者 <code>'ab'</code></li><li><code>*?, +?, ??</code></li><li><code>&#123;m&#125;</code></li><li><code>&#123;mn&#125;</code>对正则式进行 m 到 n 次匹配，在 m 和 n 之间取尽量多。</li><li><code>&#123;m,n&#125;?</code>：同上，但是非贪婪模式，及尽可能少</li></ul><p>匹配数字字母及下划线等符号</p><ul><li><code>\d</code>：匹配数字想当于[0-9]；<code>\D</code>匹配非数字相当于<code>[^0-9]</code></li><li><code>\s</code>: 匹配任意空白字符（换行符等），等价于 [\t\n\r\f]，<code>\S</code>取反</li><li><code>\w</code>: 匹配字母数字及下划线，大写<code>\W</code>则取反</li></ul><p>其他：<code>\A \z</code>等匹配字符串的开头结尾</p><h2 id="案例及常用"><a class="markdownIt-Anchor" href="#案例及常用"></a> 案例及常用</h2><p>任意匹配：<code>.*?</code></p><p>匹配url: <code>[a-zA-z]+://[^\s]*</code></p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><p>源代码位置：<a href="https://github.com/python/cpython/tree/3.10/Lib/re.py">Lib/re.py</a></p><p>官方文档: <a href="https://docs.python.org/zh-cn/3/library/re.html#functions">api</a></p>]]></content>
      
      
      <categories>
          
          <category> Python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 文本处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>矢栅处理(1)：分区统计sjoin|zonal</title>
      <link href="/posts/54103437/"/>
      <url>/posts/54103437/</url>
      
        <content type="html"><![CDATA[<p><strong>按照多边形</strong>（如格网/行政区划）边界<strong>汇总统计</strong>其内的<strong>点/栅格</strong>是空间分析中的常用操作（栅格实际上可以看做点数据）。</p><p>对于软件，如果点是矢量，则可以直接通过ArcMap/QGIS的spatial join计算，点为栅格，则称zonal statistic……实际中数据多即需要批处理，可以采用QGIS、ArcPy或者基于Python（如<a href="https://geopandas.org/en/stable/docs/reference/api/geopandas.sjoin.html">geopandas</a> <a href="https://pythonhosted.org/rasterstats/manual.html#zonal-statistics">rasterstats</a>等模块）……</p><span id="more"></span><p>具体的实现流程视数据情况而定，数据量大的时候可以考虑看能不能先<strong>分块</strong>再算或者多分几步，这里仅给出一些我的处理案例，数据量更大的可能就需要考虑进一步优化实现思路了。此外：ArcGIS的底层是32位貌似且Python还是2.7的，因此运行会更慢，当然现在慢慢迁移到ArcGIS Pro，但是Pro比较吃电脑配置<strong>很多操作我更加推荐开源的QGIS</strong>，一方面QGIS参数的控制和结果更加细致，且运行速度（Python3.6）和结果预览都更快！</p><h2 id="栅格矢量zonal"><a class="markdownIt-Anchor" href="#栅格矢量zonal"></a> ∑栅格×矢量zonal</h2><p>以统计格网(polygons)内栅格值为例：</p><h3 id="python"><a class="markdownIt-Anchor" href="#python"></a> Python</h3><ol><li>ArcPy，实现Zonal Statistic<a href="https://desktop.arcgis.com/en/arcmap/latest/tools/spatial-analyst-toolbox/zonal-statistics.htm">功能</a>，应该在空间分析工具下，可自行查看文档</li><li>一个<font color="#dd0000">专门用于做分区统计的模块</font><a href="https://pythonhosted.org/rasterstats/manual.html#zonal-statistics">rasterstats文档</a>，较<strong>推荐</strong>，这里给一个简单的个人案例，统计区划内的高程信息。经过简单测试发现时间为50秒，而在QGIS中运行耗时150秒，ArcGIS理论上更慢，说明该工具还可以（毕竟底层C++）。<ul><li>传入统计的矢量数据或geometry类型+栅格图层文件路径即可，输出的是一个字典，可以直接转成df</li><li>也可以自定义计算函数作为统计参数stats</li><li>对于分类的栅格数据可以添加<code>categorical = True</code>参数</li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rasterstats <span class="keyword">import</span> zonal_stats</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> geopandas <span class="keyword">as</span> gpd</span><br><span class="line"><span class="comment"># 读取shape矢量文件为gpd，空间区域，也可以通过csv文件创建gpd</span></span><br><span class="line">gdf = gpd.read_file(<span class="string">&quot;./青海西藏县.shp&quot;</span>, encoding = <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">tiffile = <span class="string">&quot;A:/Data/dem.tif&quot;</span> <span class="comment">#栅格文件</span></span><br><span class="line">stats = zonal_stats(gdf,demfile,stats=[<span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;median&#x27;</span>, <span class="string">&#x27;majority&#x27;</span>, <span class="string">&#x27;sum&#x27;</span>])</span><br><span class="line">stats2 = zonal_stats(<span class="string">&quot;./青海西藏县.shp&quot;</span>,demfile,stats=<span class="string">&#x27;count&#x27;</span>)</span><br><span class="line"><span class="comment"># 统计的stats是一个字典，也可以输出geojson,参数geojson_out=True</span></span><br><span class="line"><span class="comment"># 这里我选择拼接两张表并导出统计的结果</span></span><br><span class="line">res = pd.concat([gdf, pd.DataFrame(stats)], axis=<span class="number">1</span>) <span class="comment">#geodataframe </span></span><br><span class="line"><span class="comment"># 再视情况写出即可res.to_file(...)</span></span><br></pre></td></tr></table></figure><ol start="3"><li>其他暂不探索</li></ol><h3 id="软件"><a class="markdownIt-Anchor" href="#软件"></a> 软件</h3><blockquote><p>之前汇总过一次全国960w格网的栅格计算，分省计算的，基于的是QGIS的批处理（通过导入参数json文件实现）/也尝试了其Python脚本发现不好用，可能是我还没上手习惯</p></blockquote><ul><li><p>ArcGIS略</p></li><li><p>QGIS：在工具箱搜索zonal或者分区统计即可</p></li></ul><img src="/posts/54103437/image-20220706222730274.png" class alt="image-20220706222730274"><p>QGIS批处理，QGIS的脚本不如ArcPy好用，所以批处理之前是用参数导入的方式实现的，但是其参数设置还需要经过一道转换，略显麻烦，但也还行，代码见：</p><img src="/posts/54103437/image-20220706223030773.png" class alt="image-20220706223030773"><p>参数设置代码参考，其要求比较严格需要标准的路径、json对象和json文件等，当时debug了好一会~，json的介绍可以我写过的<a href="https://hscyber.github.io/posts/3c868742/">这里</a>，需要设置输入文件、输出文件、栅格波段、计算方式（数量、均值等）、前缀等等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> glob <span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="comment"># infiles是输入的拆分好的960w格网文件</span></span><br><span class="line">inpath = <span class="string">&quot;A:/Data/ChinaGrid/grids_v1/shp&quot;</span></span><br><span class="line">infiles = glob(inpath+<span class="string">&quot;/*.shp&quot;</span>)</span><br><span class="line"><span class="comment"># 这里是为了把双反斜杠\\换成正斜杠/ </span></span><br><span class="line">infiles = [inpath+<span class="string">&quot;/&quot;</span>+os.path.basename(file) <span class="keyword">for</span> file <span class="keyword">in</span> infiles]</span><br><span class="line"><span class="comment"># 全部输出文件，视情况改，我这里因为只换了文件夹</span></span><br><span class="line">outfiles = [infile.replace(<span class="string">&#x27;v1&#x27;</span>,<span class="string">&#x27;v2&#x27;</span>) <span class="keyword">for</span> infile <span class="keyword">in</span> infiles]</span><br><span class="line">paras = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(outfiles)):</span><br><span class="line">    infile =  json.dumps(infiles[i])</span><br><span class="line">    <span class="comment"># outfile = json.dumps(outfiles[i])</span></span><br><span class="line">    <span class="comment"># 输入栅格，此处我计算的是同一个栅格，如果多个另外传参数</span></span><br><span class="line">    inraster =  json.dumps(<span class="string">&quot;A:/Data/ChinaGrid/base/china-gaia.tif&quot;</span>)</span><br><span class="line">    prefix = json.dumps(<span class="string">&#x27;imp_&#x27;</span>) <span class="comment"># 前缀</span></span><br><span class="line">    <span class="comment"># 这里搜一下qgis脚本 zonal的参数说明文档，或者先小文件跑看一下输出记录写的参数，1代表数量</span></span><br><span class="line">    statis = json.dumps([<span class="number">1</span>]) </span><br><span class="line">    para = &#123;</span><br><span class="line">        <span class="string">&quot;PARAMETERS&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;INPUT&quot;</span>:infile,</span><br><span class="line">            <span class="string">&quot;INPUT_RASTER&quot;</span>:inraster,</span><br><span class="line">            <span class="string">&quot;RASTER_BAND&quot;</span>:<span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">            <span class="string">&quot;COLUMN_PREFIX&quot;</span>: prefix,</span><br><span class="line">            <span class="string">&quot;STATISTICS&quot;</span>: statis&#125;,</span><br><span class="line">        <span class="string">&quot;OUTPUTS&quot;</span>: &#123;<span class="string">&quot;OUTPUT&quot;</span>: outfiles[i]&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    paras.append(para)</span><br><span class="line"><span class="built_in">print</span>(paras[<span class="number">0</span>])<span class="comment"># 预览一下</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;A:\Data\ChinaGrid\zonal_batch.json&quot;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(paras,f)</span><br></pre></td></tr></table></figure><h2 id="点矢量sjoin"><a class="markdownIt-Anchor" href="#点矢量sjoin"></a> ∑点×矢量sjoin</h2><p>以统计格网(polygons)内点的数量为例，比如我这里统计8w个0.05°格网内微博签到点的数量：</p><h3 id="软件-2"><a class="markdownIt-Anchor" href="#软件-2"></a> 软件</h3><ul><li>ArcMap：右击多边形直接join汇总点，或者通过ArcToolbox~\Analysis Tools.tbx\Overlay\Spatial Join</li></ul><img src="/posts/54103437/image-20220706220226879.png" class alt="image-20220706220226879"><img src="/posts/54103437/image-20220706220152451.png" class alt="image-20220706220152451"><img src="/posts/54103437/image-20220706221509848.png" class alt="image-20220706221509848"><ul><li>QGIS：按位置连接，在QGIS工具箱搜索join或者连接都行，其工具检索双语支持，也可以批处理</li></ul><img src="/posts/54103437/image-20220706221352490.png" class alt="image-20220706221352490"><h3 id="python-2"><a class="markdownIt-Anchor" href="#python-2"></a> Python</h3><ol><li>一种是基于ArcPy实现Spatial Join工具的脚本即可，查看tool help的代码即可，支持批处理，略</li><li>使用geopandas <a href="https://geopandas.org/en/stable/docs/reference/api/geopandas.sjoin.html">sjoin</a>，但是没法直接一步到位，以下是我的处理，先sjoin在merge，剔除无关字段</li></ol><p>我这里需要按月统计所有格网内的微博点数量，列名等参数可以自行更改，count()也可以换成求和或求值等，或者同时计算更多的类型使用pivot table，此处最后的结果是：**在原有的shapefile表上增加了12列，**每一列对应当月格网内微博点的数量</p><p>主要是以下几步：空间连接→计数→连接到polygon表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">table_sjoin = gpd.sjoin(points_table, polygons[[<span class="string">&#x27;gid&#x27;</span>, <span class="string">&#x27;geometry&#x27;</span>]])</span><br><span class="line">table_df = pd.DataFrame(table_sjoin.groupby(<span class="string">&#x27;gid&#x27;</span>)[<span class="string">&#x27;_id&#x27;</span>].count())</span><br><span class="line">polygons = pd.merge(left = polygons,right=table_df, on=<span class="string">&#x27;gid&#x27;</span>, how=<span class="string">&#x27;left&#x27;</span>).fillna(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>完整示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">outdir = <span class="string">r&quot;A:\my_research\dataset\wb1720\2017m&quot;</span></span><br><span class="line"><span class="comment"># grids是我的格网文件，wb2017是全年的微博</span></span><br><span class="line">polygons = grids.copy(deep=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">for</span> month, table <span class="keyword">in</span> wb2017.groupby(<span class="string">&#x27;month&#x27;</span>):</span><br><span class="line">    outfile = outdir+<span class="string">&quot;\\m&quot;</span>+<span class="built_in">str</span>(month)+<span class="string">&quot;.shp&quot;</span></span><br><span class="line">    <span class="comment"># 按月输出微博文件，也可以忽略</span></span><br><span class="line">    table.to_file(outfile, encoding=<span class="string">&#x27;utf-8&#x27;</span>,index=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># 统计数量，按照格网id gid。_id为微博的唯一di用于计数</span></span><br><span class="line">    <span class="comment"># 如果是某列求和则更改groupby函数及count()为其他函数即可</span></span><br><span class="line">    table_sjoin = gpd.sjoin(table, polygons[[<span class="string">&#x27;gid&#x27;</span>, <span class="string">&#x27;geometry&#x27;</span>]])</span><br><span class="line">    table_df = pd.DataFrame(table_sjoin.groupby(<span class="string">&#x27;gid&#x27;</span>)[<span class="string">&#x27;_id&#x27;</span>].count())</span><br><span class="line">    <span class="comment"># 调整列名</span></span><br><span class="line">    table_df = table_df.reset_index()</span><br><span class="line">    new_name = <span class="string">&quot;count_m&quot;</span>+<span class="built_in">str</span>(month)</span><br><span class="line">    table_df = table_df.rename(columns=&#123;<span class="string">&#x27;_id&#x27;</span>:new_name&#125;)</span><br><span class="line">    <span class="comment"># 连接表格</span></span><br><span class="line">    polygons = pd.merge(left = polygons,right=table_df, on=<span class="string">&#x27;gid&#x27;</span>, how=<span class="string">&#x27;left&#x27;</span>).fillna(<span class="number">0</span>)</span><br><span class="line">    polygons[new_name] = polygons[new_name].astype(<span class="string">&#x27;int32&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(month)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 时空数据处理分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> geopandas </tag>
            
            <tag> QGIS </tag>
            
            <tag> 矢栅统计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在读书籍:《流畅的Python》</title>
      <link href="/posts/15750410/"/>
      <url>/posts/15750410/</url>
      
        <content type="html"><![CDATA[<blockquote><p>持续阅读并更新</p></blockquote><p>本书对Python的数据模型/类型和一些基础有一些深入的讲解。翻译自国外的书籍《Fluent Python》，最早2017年出版，我大概是18年买的，那阵子Python刚开始火，不过买了发现过了好几年都看不懂，现在勉强能抽空看看hh…</p><span id="more"></span><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><blockquote><p>Python3官方教程开头是这样写的：”Python是一门既容易上手又强大的编程语言。”这句话本身并无大碍，但正因为它这一特性，很多人都只用到了其强大功能的一小部分…</p></blockquote><p>作者本书强调Python的独有特性，专注于基本库。作者表明尽管Python的包索引已经极多，但是他几乎不会提到标准库以外的任何包。</p><p>赞！因为接触过一段时间的工作会发现三方包的性能方面参差不齐，实际中需要代码优化和加速的场景越来越频繁，而如果能够多调用标准库，充分发挥Python特性，我想应该是可以有助于代码运行效率提高的。</p><h2 id="第一部分-python数据模型"><a class="markdownIt-Anchor" href="#第一部分-python数据模型"></a> 第一部分-Python数据模型</h2><blockquote><p>浅浅介绍一下Python一些<strong>数据类型/类</strong>的底层构造模式</p></blockquote><p>要点</p><ol><li>Python中的内置类型实现了很多特殊方法（以双下划线开头如<code>__getitem__()</code>），也就是函数，来实现一些比较基本的操作，如：<strong>迭代/循环、属性访问、对象实例创建删除、字符串表示，文件管理(with…)等</strong></li><li>所以当需要使用内置类型实现上述相关功能时，用<strong>内置的方法：速度更快，优先考虑</strong>，如<code>len(x)</code>，若x是一个内置类型如list的实例，那么运行就快，相当于<strong>走后门</strong>。</li><li>下一部分的主要目的就是熟悉和了解Python内置的<strong>数据类型的底层特性及内置方法</strong>：序列（列表、元组）、字典、集合等，特殊用法，从而提高代码的性能</li></ol><h2 id="数据结构序列列表元组"><a class="markdownIt-Anchor" href="#数据结构序列列表元组"></a> 数据结构——序列(列表+元组…)</h2><blockquote><p>第二部分是数据结构，包含三部分</p><p>1 序列和数组; 2 字典和集合; 3 文本和字节序列</p></blockquote><h3 id="list和推导式"><a class="markdownIt-Anchor" href="#list和推导式"></a> list和推导式</h3><ol><li><p>序列就是一个能装很多类似数据的可以遍历的数据，比如list可以装很多个元素，string可以有逐字符遍历。</p></li><li><p>序列分类</p><ol><li>按能不能放不同类型的数据分为：容器序列（list tuple…）、扁平序列(str array.array…)，后者小而快，前者更灵活</li><li>按是否可变（简单理解为自由增删改）分可变和不可变，如<strong>list dict属于可变</strong>，<strong>str tuple不可变</strong></li></ol></li><li><p>list使用要点：</p><ol><li>多使用<strong>列表推导式</strong>，但一般只用于<strong>创建</strong>新列表，一行不能搞定的也不用</li><li>生成器-列表推导，将列表推导的[]换成()就得到了生成器，生成器就是动态吐出元素不会直接创建，<strong>元素在调用时再生成</strong>，一次性的，每个只能吐一次<ul><li>节省内存，避免额外内存消耗，大数据考虑</li></ul></li></ol></li></ol><h3 id="元组tuple及的使用"><a class="markdownIt-Anchor" href="#元组tuple及的使用"></a> 元组tuple及<code>*</code>的使用</h3><ol><li>元组相当于<strong>一行记录</strong>，同属一个元组的这些数据是隐形绑定的，相当于表格的一行</li><li>元组拆包的妙用：显式或隐式的都有，很方便，举例：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 平行复制</span></span><br><span class="line">loc = (<span class="number">33.9</span>, <span class="number">118.5</span>)</span><br><span class="line">lat, lng = loc</span><br><span class="line"><span class="comment"># 函数传参</span></span><br><span class="line">afunc = f(a,b)</span><br><span class="line">z = f(*loc)</span><br><span class="line"><span class="comment"># *处理不确定个数的元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a,*b,c,d = <span class="built_in">range</span>(<span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = [<span class="number">1</span>,<span class="number">2</span>]</span><br></pre></td></tr></table></figure><ol><li>具名元组，可以用来构建：<ol><li>带字段的元组。表头？是否可以取代表格数据管理还有待探索hh</li><li>有名字的类</li></ol></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line">City = namedtuple(<span class="string">&#x27;City&#x27;</span>, <span class="string">&#x27;name country pop loc&#x27;</span>) <span class="comment">#创建类</span></span><br><span class="line">tolyo = City(<span class="string">&#x27;Tokyo&#x27;</span>,<span class="string">&#x27;JP&#x27;</span>,<span class="number">36.933</span>, (<span class="number">35.7</span>, <span class="number">139.7</span>)) <span class="comment"># 实例化</span></span><br></pre></td></tr></table></figure><h3 id="切片与赋值"><a class="markdownIt-Anchor" href="#切片与赋值"></a> 切片与赋值</h3><blockquote><p>即选取序列中的一段/一部分</p><p>索引从0开始，左闭右开 (a,b]，空表示断点</p></blockquote><ul><li>s[1:5]，选取序列s的第二个到第五个元素</li><li><code>s[a: b:c]</code>，a~b之间以间隔c取值, c值为负数代表倒序取值</li></ul><p>切片赋值时，若左侧为一个切片，右侧应该是可迭代的，即便只有一个值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alistp[<span class="number">1</span>:<span class="number">5</span>]=[<span class="number">48</span>]</span><br></pre></td></tr></table></figure><h3 id="序列的拼接"><a class="markdownIt-Anchor" href="#序列的拼接"></a> 序列的拼接</h3><p>+和*都是创建一个新的序列：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">b = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">c = a+b <span class="comment"># &gt;&gt;&gt;[1,2,3,3,4,5]</span></span><br><span class="line">d = a*<span class="number">3</span> <span class="comment"># &gt;&gt;&gt;[1, 2, 3, 1, 2, 3, 1, 2, 3]</span></span><br><span class="line">e = <span class="number">5</span>*<span class="string">&#x27;abc&#x27;</span><span class="comment"># &gt;&gt;&gt;&#x27;abcabcabcabcabc&#x27;</span></span><br></pre></td></tr></table></figure><p>+=和*=可用于对可变序列，如列表和字典，其原理是这些类的内部实现了<code>__iadd__或__imul__</code></p><ul><li>对于可变序列使用时，就地改变数据，数据的内存及ID位置不会变</li></ul><h3 id="序列排序"><a class="markdownIt-Anchor" href="#序列排序"></a> 序列排序</h3><p>list.sort()：就地排序,返回None</p><p>sorted()：对可迭代对象排序生成新对象，如列表、元组及生成器都可以</p><ul><li><p>可选参数：reverse(默认是False，升序输出); key 默认是元素本身的值排序，若设置key=str.lower或key=len可以使其忽略大小写或基于长度排序</p></li><li><p>此外，key关键字可以在很多内置函数中使用，如max() min()</p></li></ul><p>当我们需要进行查找和插入元素并<strong>保持序列的顺序不变</strong>时，可使用bisect模块，其使用二分法进行查找和插入，有需要时再检索即可</p><h3 id="处理数值序列-数组array"><a class="markdownIt-Anchor" href="#处理数值序列-数组array"></a> 处理数值序列-数组array</h3><blockquote><p>如果只处理<strong>纯数字</strong>，尤其是比如大量的浮点数，array比list要高效地多</p><p>因为数组背后是对数字的机器翻译——字节标段数</p></blockquote><p>使用数组<a href="https://docs.python.org/3/library/array.html">array</a></p><p>如以下示例生成一个含1000万的浮点数组并写入文件，再读取。会发现写入不到1s，读取约0.1s，文件大小&lt;80mb</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> array <span class="keyword">import</span> array</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> random</span><br><span class="line">floats = array(<span class="string">&#x27;d&#x27;</span>, (random() <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>**<span class="number">7</span>))) <span class="comment">#d代表底层C语言数据类型，浮点, 更多类型可查看文档</span></span><br><span class="line"><span class="comment"># 写入</span></span><br><span class="line">fp = <span class="built_in">open</span>(<span class="string">&#x27;test_floats.bin&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">floats.tofile(fp)</span><br><span class="line">fp.close()</span><br><span class="line"><span class="comment"># 读取</span></span><br><span class="line">floats2 = array(<span class="string">&#x27;d&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test_floats.bin&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    floats2.fromfile(fp, <span class="number">10</span>**<span class="number">7</span>)</span><br><span class="line">floats2==floats</span><br></pre></td></tr></table></figure><ul><li><p>此外，<strong>pickle</strong>也是一个快速序列化数字类型的内置模块，同时pickle还可以序列化各种类型的数据</p></li><li><p>array的排序可以通过, a = array.array(a.typecode, sorted(a))</p></li></ul><p>标准库之外：值得学习的Numpy和Scipy库，强大的科学计算工具</p><p>Python内部实现了双向队列的类型collections.deque：线程安全、可以快速从两段添加或删除元素的数据类型</p><h2 id="数据结构字典与集合"><a class="markdownIt-Anchor" href="#数据结构字典与集合"></a> 数据结构——字典与集合</h2><h3 id="字典功能结构"><a class="markdownIt-Anchor" href="#字典功能结构"></a> 字典功能结构</h3><h3 id="字典的构造和推导式"><a class="markdownIt-Anchor" href="#字典的构造和推导式"></a> 字典的构造和推导式</h3><h3 id="字典常用方法"><a class="markdownIt-Anchor" href="#字典常用方法"></a> 字典常用方法</h3><h3 id="键找不到时的处理"><a class="markdownIt-Anchor" href="#键找不到时的处理"></a> 键找不到时的处理</h3><p>常规查找：</p><p>my_dict.get(key, defalut)</p><p>更新处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">my_dict.setdefault(key, []).append(newvalue)</span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line"><span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> my_dict:</span><br><span class="line">    my_dict[key] = []</span><br><span class="line">my_dict[key].append(newvalue) </span><br></pre></td></tr></table></figure><h3 id="自定义字典"><a class="markdownIt-Anchor" href="#自定义字典"></a> 自定义字典</h3><h2 id="little-tips"><a class="markdownIt-Anchor" href="#little-tips"></a> little tips</h2><ol><li>“_”占位符可以用来过滤一些不需要的输出结果</li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 书籍文档学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 技术类书籍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【GIS基础及时空数据处理分析汇总】</title>
      <link href="/posts/9ce60930/"/>
      <url>/posts/9ce60930/</url>
      
        <content type="html"><![CDATA[<center>持续更新...</center><span id="more"></span><h2 id="gis基础及空间数据处理"><a class="markdownIt-Anchor" href="#gis基础及空间数据处理"></a> GIS基础及空间数据处理</h2><h3 id="gis基础"><a class="markdownIt-Anchor" href="#gis基础"></a> GIS基础</h3><p><a href="https://hscyber.github.io/posts/c82d0555/">GIS基础(1)：浅析地理/投影坐标系</a></p><p><a href="https://hscyber.github.io/posts/286d5938/">GIS基础(2)：ArcGIS常用工具清单及用途概述</a></p><h3 id="矢量及栅格数据基础"><a class="markdownIt-Anchor" href="#矢量及栅格数据基础"></a> 矢量及栅格数据基础</h3><p><a href="https://hscyber.github.io/posts/54103437/">矢栅处理(1)：分区统计sjoin|zonal</a></p><p><a href="https://hscyber.github.io/posts/a9be2430/">矢栅处理(2)：GeoTIFF数值类型及压缩</a></p><p><a href="https://hscyber.github.io/posts/f61ccf5/">矢栅处理(3)：Python读和写TIFF文件</a></p><p><a href="https://hscyber.github.io/posts/448bb583/">矢栅处理(4)：Python读取NC文件</a></p><p><a href="https://hscyber.github.io/posts/ef2a4876/">矢栅处理(5)：R语言nc转多张Geotif</a></p><p><a href="https://hscyber.github.io/posts/2f2d96ec/">矢栅处理(6)：点矢量提取栅格值extract</a></p><p><a href="https://hscyber.github.io/posts/57d7f29/">矢栅处理(杂)：geopandas常用函数小结</a></p><p><a href="https://hscyber.github.io/posts/42111e30/">矢量处理(杂)：OSM数据下载及shapefile读写</a></p><p><a href="https://hscyber.github.io/posts/1ac444bb/">栅格处理(杂)：栅格重分类或特定值转图层(批处理)</a></p><h3 id="pandas数据处理"><a class="markdownIt-Anchor" href="#pandas数据处理"></a> Pandas数据处理</h3><p><a href="https://hscyber.github.io/posts/f9c7a8a1/">Pandas(1)：数据选取/条件筛选小结</a></p><p><a href="https://hscyber.github.io/posts/18b022c/">Pandas(杂)：表格的各种连接方式</a></p><p><a href="https://hscyber.github.io/posts/4d972282/">Pandas(杂)：List/pandas文本包含筛选</a></p><p><a href="https://hscyber.github.io/posts/374675e0/">Pandas(杂)：字符串列拆分及合并</a></p><p><a href="https://hscyber.github.io/posts/a234f8ea/">Pandas(杂)：多表格写出excel</a></p><h2 id="时间序列"><a class="markdownIt-Anchor" href="#时间序列"></a> 时间序列</h2><h3 id="基础"><a class="markdownIt-Anchor" href="#基础"></a> 基础</h3><p><a href="https://hscyber.github.io/posts/6e05178d/">时间序列(1)：LOESS(STL)时间序列分解</a></p>]]></content>
      
      
      <categories>
          
          <category> 时空数据处理分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandas(1)：数据选取/条件筛选小结</title>
      <link href="/posts/f9c7a8a1/"/>
      <url>/posts/f9c7a8a1/</url>
      
        <content type="html"><![CDATA[<p>小结一下Pandas <font color="#dd0000">筛选表格数据子集</font>的方法作为速查手册……实际中数据处理分析及可视化往往只是数据表的<strong>一部分</strong>，因此经常需要进行：<strong>选取特定位置、特定日期、特定数值</strong>（如文本、空值）、或者<strong>满足若干组合条件的行、列</strong>等处理，这里简单汇总一下主要有以下几类,<strong>理论上基于代码我们可以实现任何想得到的处理</strong>：</p><ol><li>位置筛选（与表中数值无关，仅取决于行列号或行列名），最常用<mark>df.iloc[ , ]</mark></li><li>条件筛选<mark>df.loc[条件]</mark>（与数值相关，根据若干符合条件（特定值或范围）选取数据子集）</li><li>复杂条件筛选（自定义函数<mark>df.apply</mark>的运用）</li></ol><span id="more"></span><h2 id="数据预览"><a class="markdownIt-Anchor" href="#数据预览"></a> 数据预览</h2><blockquote><p>日常涉及数据类型主要有：数字、字符串、时间日期格式。</p></blockquote><p>测试数据导入及查看基本信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">filepath = <span class="string">&quot;F:/weibo2017/Dataset/s3_day/1/2017-01-01.csv&quot;</span></span><br><span class="line"><span class="comment"># 取前1000行测试即可</span></span><br><span class="line">df = pd.read_csv(filepath, header=<span class="number">0</span>, parse_dates=[<span class="string">&#x27;PubTime&#x27;</span>, <span class="string">&#x27;date&#x27;</span>], nrows=<span class="number">1000</span>)</span><br><span class="line"><span class="comment"># 查看数据字段类型及信息</span></span><br><span class="line">df.info()</span><br><span class="line">df.columns.to_list()<span class="comment"># 导出列</span></span><br><span class="line"><span class="comment"># 预览后剔除冗余列</span></span><br><span class="line">usecols = [<span class="string">&#x27;_id&#x27;</span>,<span class="string">&#x27;Tools&#x27;</span>]</span><br><span class="line">df = df.drop(columns=usecols)</span><br><span class="line"><span class="comment"># 查看表格形状，行列数</span></span><br><span class="line">df.shape <span class="comment"># nrows = df.shape[0]</span></span><br><span class="line"><span class="comment"># 查看前几行或后几行</span></span><br><span class="line">df.head(<span class="number">7</span>)</span><br><span class="line">df.tail(<span class="number">7</span>)</span><br></pre></td></tr></table></figure><h2 id="位置筛选"><a class="markdownIt-Anchor" href="#位置筛选"></a> 位置筛选</h2><blockquote><p>Python默认从<code>0</code>开始索引.</p></blockquote><h3 id="行列号切片"><a class="markdownIt-Anchor" href="#行列号切片"></a> 行列号切片</h3><ul><li><p>切片时选取<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[a,b]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span><span class="mclose">]</span></span></span></span>默认为 数学中的左闭右开<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">[a,b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span></span></span></span>，因此总的个数为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi><mo>−</mo><mi>a</mi></mrow><annotation encoding="application/x-tex">b-a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">a</span></span></span></span>个</p></li><li><p>一般情况单列返回类型<strong>Series</strong>，多列或多行则返回<strong>DataFrame</strong></p></li><li><p>大多数情况，可以访问也可以修改值</p></li></ul><p>主要函数：<strong>df.iloc[],</strong> df.iat[], <a href="http://df.at">df.at</a>[]</p><p>原则：传入一个值或一个list时返回若干行；传入参数时，返回行及列的筛选</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一个参数</span></span><br><span class="line">df.iloc[<span class="number">2</span>] <span class="comment"># 以Series类型返回第二行数据</span></span><br><span class="line">df.iloc[<span class="number">1</span>:<span class="number">4</span>] <span class="comment">#返回2 3 4行</span></span><br><span class="line">df.iloc[[<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>]] <span class="comment">#返回 3 5 7行</span></span><br><span class="line"><span class="comment"># 两个参数</span></span><br><span class="line">df.iloc[<span class="number">6</span>,<span class="number">4</span>] <span class="comment">#第六行第四列</span></span><br><span class="line">df.iloc[<span class="number">1</span>:<span class="number">4</span>,:] <span class="comment">#返回2 3 4行</span></span><br><span class="line">df.iloc[<span class="number">1</span>:<span class="number">4</span>, <span class="number">2</span>:<span class="number">4</span>] <span class="comment">#返回2~5行，3到5列</span></span><br><span class="line"><span class="comment"># 其他</span></span><br><span class="line">df.iat[<span class="number">4</span>,<span class="number">4</span>] <span class="comment">#访问第五行第五列的数值</span></span><br><span class="line">df.iat[<span class="number">3</span>,<span class="number">3</span>]=<span class="number">2</span> <span class="comment">#就地更改第四行第四列的数值</span></span><br><span class="line"><span class="comment"># 行列名称选取</span></span><br><span class="line">df.loc[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]] <span class="comment"># 多行，这里的1 2 3是索引的名字</span></span><br><span class="line">usecol = [<span class="string">&#x27;_id&#x27;</span>]</span><br><span class="line">usecol = [<span class="string">&#x27;_id&#x27;</span>,<span class="string">&#x27;Content&#x27;</span>]</span><br><span class="line">new_df = df[usecol] <span class="comment">#一列或多列都是返回dataframe</span></span><br><span class="line"><span class="comment">#df.at就地更改第四行&#x27;B&#x27;列的数值，4为行索引名称</span></span><br><span class="line">df.at[<span class="number">4</span>, <span class="string">&#x27;B&#x27;</span>]</span><br><span class="line">df.at[<span class="number">4</span>, <span class="string">&#x27;B&#x27;</span>] = <span class="number">10</span></span><br></pre></td></tr></table></figure><p>df创建列，直接df[]新建，右侧为值或者series或series的元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&#x27;列名&#x27;</span>] = ...</span><br><span class="line">df[[<span class="string">&#x27;列1&#x27;</span>,<span class="string">&#x27;列2&#x27;</span>] = ...</span><br></pre></td></tr></table></figure><h2 id="条件筛选行dfloc"><a class="markdownIt-Anchor" href="#条件筛选行dfloc"></a> 条件筛选行df.loc</h2><blockquote><p>多个条件使用: 与(&amp;), 或(|), 非(!), 及取反(~)/即补集，</p><p>主要函数<a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.loc.html">df.loc</a>，条件过多或繁琐则参考第三节apply</p></blockquote><p>条件筛选的实质是先根据条件生成一个这样的数组：[True, False, False,…]，再根据这个数组匹配</p><h3 id="特定值"><a class="markdownIt-Anchor" href="#特定值"></a> 特定值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Con = df[<span class="string">&#x27;Comment&#x27;</span>].isna()</span><br><span class="line">df.fillna(-<span class="number">1</span>)</span><br><span class="line">Cond= f[<span class="string">&#x27;Comment&#x27;</span>].isnull()</span><br><span class="line">Con = df[<span class="string">&#x27;Comment&#x27;</span>].isin([a,b,c,...])</span><br><span class="line">df2 = df.loc[Con]</span><br><span class="line"><span class="comment"># 当然为了简介通常写在一起</span></span><br><span class="line">df2 = df.loc[df[<span class="string">&#x27;Comment&#x27;</span>].isna()]</span><br><span class="line">df2 = df.loc[df[<span class="string">&#x27;Comment&#x27;</span>].isin([a,b,c,...])]</span><br><span class="line">df2 = df.loc[df[<span class="string">&#x27;Comment&#x27;</span>].<span class="built_in">str</span>.contains(<span class="string">&quot;a&quot;</span>)]</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="范围值"><a class="markdownIt-Anchor" href="#范围值"></a> 范围值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Con = df[<span class="string">&#x27;hour&#x27;</span>]==<span class="number">3</span></span><br><span class="line">Con = df[<span class="string">&#x27;hour&#x27;</span>]&gt;=<span class="number">23</span></span><br><span class="line">df2 = df.loc[Con]</span><br><span class="line">df2 = df.loc[(df[<span class="string">&#x27;date&#x27;</span>]==<span class="string">&#x27;2017-01-01&#x27;</span>) &amp; (df[<span class="string">&#x27;Transfer&#x27;</span>]&gt;<span class="number">6</span>)]</span><br><span class="line"><span class="comment"># 筛选hour&lt;=3的行</span></span><br><span class="line">df2 = df.loc[~(df[<span class="string">&#x27;hour&#x27;</span>]&gt;<span class="number">3</span>)]</span><br></pre></td></tr></table></figure><h2 id="复杂条件筛选"><a class="markdownIt-Anchor" href="#复杂条件筛选"></a> 复杂条件筛选</h2><blockquote><p>个人建议通过类似 df.apply(lambda x: myfun(x)) 的方式实现</p></blockquote><p>即自定义一个新的函数生成新列，再筛选，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">myfun</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> x&gt;<span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> x&gt;<span class="number">0</span>:</span><br><span class="line">        retuen <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        retuen <span class="number">2</span></span><br></pre></td></tr></table></figure><p>有几种形式，一种是单列输入单输出,这里的lambda x就是每一行的该列(df[col])的值</p><ul><li>df[newcol] = df[col].apply(lambda x: myfun(x))</li></ul><p>有时候需要多列参与运算，结果是返回单个值</p><p>如函数为myfun(x, y)，即有多个输入，这种情况x是代表一行，建议写成row,因此需要指定值</p><ul><li>df[col]  = df.apply(lambda row: myfun(row[col1],row[col2]), axis=1)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&#x27;datetime&#x27;</span>] =  df.apply(<span class="keyword">lambda</span> row: datetime(row.year, row.month, row.day, row.hour), axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>如果输入输出都得是多列的，则需要通过zip函数拆包并新建多个列来接收，</p><p>举例<code>df[],df[]... = zip(*df.apply())</code>：其他情况类推</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">myfun</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="keyword">return</span> x,y</span><br><span class="line">df[<span class="string">&#x27;x&#x27;</span>], df[<span class="string">&#x27;y&#x27;</span>] = <span class="built_in">zip</span>(*df.apply(<span class="keyword">lambda</span> row: myfun(row[<span class="string">&#x27;Co_oridinate1&#x27;</span>],row[<span class="string">&#x27;Co_oridinate2&#x27;</span>]), axis=<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>关于更多函数的运用后续小结</p>]]></content>
      
      
      <categories>
          
          <category> Pandas数据处理分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pandas </tag>
            
            <tag> 表格数据筛选 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据处理习惯及VSCode使用简介</title>
      <link href="/posts/9730787a/"/>
      <url>/posts/9730787a/</url>
      
        <content type="html"><![CDATA[<p>介绍一下Vscode Python环境配置，并小结一下自己目前<strong>基于Python的数据分析工作习惯</strong>。</p><p>之前的模式是基于Anaconda环境，使用Jupyter Notebook/Lab和pycharm，现在是基于Miniconda，用VSCode为主；至于涉及空间的处理，则主要是基于Python库（Gdal; geopandas…）、ArcPy以及QGIS、ArcMap等软件。</p><span id="more"></span><p>ps: QGIS在一些功能和处理速度等功能比ArcMap好用些，比如 Spatial join; Zonal statistic等，好用且速度更快，遗憾的是感觉QGIS的Python脚本功能不如ArcPy。</p><h2 id="背景"><a class="markdownIt-Anchor" href="#背景"></a> 背景</h2><blockquote><p>言归正传，尽管jupyter notebook/lab是广为推崇的Python数据分析利器，我也用了很长一段时间，但网页版的jupyter偶尔出bug，每次启动还需要启动浏览器，且在文件夹及数据管理等方面不太方便，在好朋友推荐下转向了支持Jupyter的开源且轻巧的vscode，上手了一段时间觉得很舒服~</p></blockquote><h2 id="vs-code的使用简介"><a class="markdownIt-Anchor" href="#vs-code的使用简介"></a> Vs Code的使用简介</h2><blockquote><p>下载链接<a href="https://code.visualstudio.com/">官网</a>，官方文档<a href="https://code.visualstudio.com/api">VSCode API</a></p><p>Learn:<a href="https://code.visualstudio.com/docs/datascience/jupyter-notebooks">Jupyter Notebooks in VS Code</a></p></blockquote><ol><li>下载软件并安装，建议勾选”将打开文件添加到右键菜单”，方便在任意文件夹右击新建脚本</li><li>安装插件</li></ol><p>具体看之后更新的这个<a href="https://hscyber.github.io/posts/9089f596/">推文-Python环境(2)：安装及配置</a></p><h3 id="jupyter-notebook"><a class="markdownIt-Anchor" href="#jupyter-notebook"></a> jupyter notebook</h3><blockquote><p>最好是在本地预装好Miniconda 或 Anaconda，个人推荐前者</p></blockquote><h3 id="py-script"><a class="markdownIt-Anchor" href="#py-script"></a> .py script</h3><blockquote><p>运行脚本时需要从上方打开Terminal-命令行窗口~</p></blockquote><h2 id="我的工作模式"><a class="markdownIt-Anchor" href="#我的工作模式"></a> 我的工作模式</h2><blockquote><p>不论数据获取、处理还是分析，编程都只是实现任务的<strong>工具</strong>之一，所以最核心的还是目的及思路步骤。</p><p>好记性不如烂笔头，对我而言记录逻辑和步骤是十分重要的，这便于复用和查错。</p></blockquote><h3 id="问题思路"><a class="markdownIt-Anchor" href="#问题思路"></a> 问题思路</h3><p>这方面很难讲，我个人目前是习惯</p><ol><li>先捋捋问题的核心是什么，最后要得到什么样的输出和数据结果，需要兼顾的问题等等</li><li>然后花一段时间结合数据、经验与熟系的工具拟定初步方案（这步若卡住则需要多做功课或请教师兄师姐老师）</li><li>觉得想清楚了差不多了就开始动手想具体步骤，也即实现方案的具体步骤</li><li>开始上手，代码+软件齐上阵，过程中记录出现的问题并视情况调整</li><li>……</li></ol><p>如下图，这是我近期处理数据时候记录的一些笔记（基于typora），供参考，我也是最近才开始文本记录，对于一些<strong>步骤多点</strong>的任务，最好还是记录一下，当然，后续也会试情况不断调整和完善需要记录的内容，目前：</p><ol><li>输出结果，时间</li><li>处理思路/步骤|时间记录</li><li>问题记录</li><li>主要代码附录</li></ol><img src="/posts/9730787a/image-20220624185014513.png" class alt="image-20220624185014513"><p>另外，实际一些<strong>小的案例</strong>，直接写在py脚本的开头简单写写就行，很多软件都有添加脚本header信息的功能，如以下案例我需要将网站抓取的原始GPS轨迹数据处理为表格，于是我的文件头是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*-coding:utf-8 -*-</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">@File    :   json2shp.py</span></span><br><span class="line"><span class="string">@Time    :   2022/04/01 19:50:21</span></span><br><span class="line"><span class="string">@Author  :   huangsh </span></span><br><span class="line"><span class="string">@Version :   1.0</span></span><br><span class="line"><span class="string">@Contact :   1126456109@qq.com</span></span><br><span class="line"><span class="string">@Desc    :   将json文件转换为geopandas csv</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1. 导入json文件，将.json转换为csv文件，转换为列：pid,time,lng,lat,elev,speed,geometry-用wkt表示</span></span><br><span class="line"><span class="string">2. 将csv转换为line几何类型，用wkt表示</span></span><br><span class="line"><span class="string">3. 根据文件名(tid)将csv与表进行连接，得到最终的表</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">参考链接|API文档：</span></span><br><span class="line"><span class="string">1. </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> os, time, json</span><br><span class="line"><span class="keyword">from</span> multiprocessing.pool <span class="keyword">import</span> Pool</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>总之</strong>，<u>在数据处理分析过程中，充分捋清并记录自己的思维逻辑和实现步骤，并记录出现得到问题，能够提高效率</u></p><h3 id="代码工具实现思路"><a class="markdownIt-Anchor" href="#代码工具实现思路"></a> 代码/工具实现思路</h3><blockquote><p>Python包的使用主要是依靠多看多记来熟练，此外，学会并且习惯看文档</p><p>通常数据量不大，不考虑效率会有很多种方法达到目的，查就好了，至于大的数据或者较慢的操作如空间处理，则需要通过多进程或者优化数据类型、代码逻辑来加速了，此处暂不展开</p></blockquote><p>在有了思路的基础上，我写代码的习惯是遵循逻辑分解，Step by Step</p><ul><li>过程中要实时记录和调整思路</li></ul><ol><li><p>然后先在IPython或者jupyter中编写并实时调试，大量的数据一般是先跑一个案例测试</p></li><li><p>完成调试后加循环，视情况编写函数遍历或并行，如果文件很多或很大建议循环时加try记录报错情况（避免挂着程序以为能跑一晚上结果10分钟就报错了hh）</p></li><li><p>最后，如果代码行数较多时或需要并行则新建‘.py’文件写一下</p></li><li><p>…</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 科研门外汉 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> VSCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python处理Json文件</title>
      <link href="/posts/3c868742/"/>
      <url>/posts/3c868742/</url>
      
        <content type="html"><![CDATA[<p>本文小结JSON相关的一些知识点和读写方式，涉及内容</p><p>①. 序列化与反序列化；②.Json数据格式转换及其读写；③. 出错案例/非标准JSON文件处理</p><p>首先：<code>import json</code></p><span id="more"></span><h2 id="序列化与json文件"><a class="markdownIt-Anchor" href="#序列化与json文件"></a> 序列化与JSON文件</h2><blockquote><p>序列化<a href="https://en.wikipedia.org/wiki/Serialization">Serialization</a>，广泛地讲就是将内存中创建/生成的数据对象存为文件的过程</p><p>平时读写txt csv excel shapefile pickle json geojson都可以视为(反)序列化的过程</p></blockquote><h3 id="json文件"><a class="markdownIt-Anchor" href="#json文件"></a> JSON文件</h3><p>JSON全称是“JavaScript Object Notation”，是一种数据格式，js中的大量属性都是通过字典格式表示，因此json主要以字典格式存储。此外，<a href="https://en.wikipedia.org/wiki/GeoJSON">GeoJSON</a>是在<a href="https://en.wikipedia.org/wiki/JSON">json</a>文件的基础上构建的一种，处理方式类似。</p><p>序列化(serialization)与反序列化(deserialization)</p><ol><li><p>序列化指将数据结构、对象转换为可读取状态，如存为文件，以便下次或在其他环境中能够恢复到原来的状态；也称对象编组(marshlling)。</p></li><li><p>从一序列字节提取数据结果的反向操作则成为反序列化，也称解码组(unmarshlling) 。</p></li></ol><p>python中的序列化模块主要有：pickle、json 等等</p><h3 id="json对象"><a class="markdownIt-Anchor" href="#json对象"></a> JSON对象</h3><blockquote><p>在未保存前其在内存中的表示即数据类型，类似于DataFrame与csv的关系</p></blockquote><p>Python中的JSON序列化过程中，即在内存中的表示/数据类型：</p><ul><li><p>字典<code>dict</code>会编组为标准的<code>JSON</code>对象</p></li><li><p><code>list</code>及<code>tuple</code>转换为<code>array</code></p></li><li><p>字符及数值分别转换为<code>string</code>;<code>numbers</code></p></li></ul><h2 id="数据类型转换dumpsloads"><a class="markdownIt-Anchor" href="#数据类型转换dumpsloads"></a> 数据类型转换：dumps()+loads()</h2><blockquote><p>json.dumps()就是序列化的函数，不带s的是用来读写的</p></blockquote><p>我们可以直接将列表、字典等各种数据类型通过<code>json.dumps(object)</code>转换为json格式</p><p>当然，实际中更常用的是通过<code>json.loads(json_string)</code>读取json对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="comment"># 其他对象转为json对象</span></span><br><span class="line">mylist = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">mydic = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;h&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>:<span class="number">24</span>,</span><br><span class="line">    <span class="string">&quot;money&quot;</span>:<span class="number">1500</span>&#125;</span><br><span class="line">data_json = json.dumps(mydic)</span><br><span class="line"><span class="built_in">print</span>(data_json) <span class="comment"># &#123;&quot;name&quot;: &quot;h&quot;, &quot;age&quot;: 24, &quot;money&quot;: 1500&#125;</span></span><br><span class="line">data_json = json.dumps(mydic, indent=<span class="number">4</span>)</span><br><span class="line">data_json <span class="comment"># &#x27;&#123;\n    &quot;name&quot;: &quot;h&quot;,\n    &quot;age&quot;: 24,\n    &quot;money&quot;: 1500\n&#125;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(data_json) <span class="comment"># print()打印的话，会看待标准的字典样式，带4的缩进</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># json转为原始对象</span></span><br><span class="line">mydict = json.loads(data_json)</span><br></pre></td></tr></table></figure><h2 id="json文件写和读dumpload"><a class="markdownIt-Anchor" href="#json文件写和读dumpload"></a> JSON文件写和读dump()+load()</h2><blockquote><p>一般而言json文件是由<strong>字典+列表</strong>多层嵌套组成，最终文件是字符串</p></blockquote><p>写json文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以不转换将数据直接写入</span></span><br><span class="line">mylist = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;test.json&quot;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(mydic, f, indent=<span class="number">4</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;test.json&quot;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(mylist, f)</span><br></pre></td></tr></table></figure><p>读json文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;test.json&quot;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    mylist = json.load(f)</span><br></pre></td></tr></table></figure><p>追加到json文件，追加无法像文本一样直接写入，需要读取原始json字典或者list，修改后再重新写出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.读取json文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;test.json&quot;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    mydic = json.load(f)</span><br><span class="line"><span class="comment">#2.修改，update好像是Python3.9及之后有的函数，也可以其他方式修改</span></span><br><span class="line">x = &#123;<span class="string">&quot;x&quot;</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]&#125;</span><br><span class="line">mydic.update(x)</span><br><span class="line"><span class="comment">#3.重新写入</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;test.json&quot;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(mydic, f)</span><br></pre></td></tr></table></figure><h2 id="读写出错非标准json格式处理"><a class="markdownIt-Anchor" href="#读写出错非标准json格式处理"></a> 读写出错?——非标准json格式处理</h2><blockquote><p>出错调试案例</p></blockquote><p><strong>情况1</strong>：由于文件的多次序列与反序列化/读写，会导致格式不一致或<strong>非标准文件的产生</strong>。</p><ul><li>如：读文件时出现：<code>JSONDecodeError: Invalid control character at: line...</code>，说明文件格式不标准，添加参数<code>json.load(jf, strict=False)</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./pois.json&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    poi_list = json.load(f, strict=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p><strong>情况2</strong>：文件是多个json对象组成的，理论上应该是存成[{},{}…]或类似的结构</p><ul><li>如通过记事本或notepad打开文件长这样，<strong>每行是一个json对象</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;created_at&quot;</span>:<span class="string">&quot;Sat Jul 01 13:00:00 +0000 2017&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="number">881135299081887744</span>,...&#125;</span><br><span class="line">&#123;<span class="string">&quot;id&quot;</span>:<span class="number">865709269722832896</span>,<span class="string">&quot;id_str&quot;</span>:<span class="string">&quot;865709269722832896&quot;</span>,<span class="string">&quot;user_id&quot;</span>...&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>处理逻辑：先读取文件再逐行/逐对象load加载</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 复合写法，将对象追加到list</span></span><br><span class="line">tweets = []</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&#x27;./dataset/tweets.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>):</span><br><span class="line">    tweets.append(json.loads(line))</span><br><span class="line"><span class="comment"># 拆开写</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./dataset/tweets.json&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:   </span><br><span class="line">    jsonstr_list = f.readlines()</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> jsonstr_list:</span><br><span class="line">    x = json.loads(line)</span><br><span class="line">    tweets.append(x)</span><br></pre></td></tr></table></figure><h3 id="中文显示"><a class="markdownIt-Anchor" href="#中文显示"></a> 中文显示</h3><p>输出文件中文编码显示<strong>ensure_ascii=False</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;./china.json&quot;</span>,<span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    json.dump(ty_city,fp,indent=<span class="number">4</span>,ensure_ascii=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h2 id="部分参考"><a class="markdownIt-Anchor" href="#部分参考"></a> 部分参考</h2><blockquote><p>详细的也可以自己查或看以下链接</p></blockquote><p>- <a href="https://docs.python.org/zh-cn/3.9/library/json.html#basic-usage">Json in python</a></p><p>- <a href="https://www.geeksforgeeks.org/working-with-json-data-in-python/">Working With JSON Data in Python</a></p><p>- <a href="https://www.geeksforgeeks.org/python-difference-between-json-dump-and-json-dumps/">dump vs dumps</a></p>]]></content>
      
      
      <categories>
          
          <category> Python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> json文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【研究生新手笔记汇总】</title>
      <link href="/posts/979af058/"/>
      <url>/posts/979af058/</url>
      
        <content type="html"><![CDATA[<center>存放与研究生工作及摸鱼相关度较大的内容...</center><span id="more"></span><h3 id="文献与跟踪"><a class="markdownIt-Anchor" href="#文献与跟踪"></a> 文献与跟踪</h3><p><a href="https://hscyber.github.io/posts/33f7b1b7/">文献篇(1) 论文检索</a></p><p><a href="https://hscyber.github.io/posts/99dce68a/">文献篇(2) 论文下载</a></p><p><a href="https://hscyber.github.io/posts/e8c71149/">文献篇(3) 如何开展研究背景调研和总结？</a></p><p><a href="https://hscyber.github.io/posts/4270937d/">研究跟踪(1)：感兴趣期刊及研究方向的最新动态获取</a></p><h3 id="杂"><a class="markdownIt-Anchor" href="#杂"></a> 杂</h3><p><a href="https://hscyber.github.io/posts/81af99e4/">快速提升学术论文写作能力的1313法则</a></p><p><a href="https://hscyber.github.io/posts/9730787a/">数据处理习惯</a></p><h3 id="统计相关"><a class="markdownIt-Anchor" href="#统计相关"></a> 统计相关</h3><p><a href="https://hscyber.github.io/posts/ca790165/">论文学习(1)：Generalized Linear Mixed Models</a></p><p><a href="https://hscyber.github.io/posts/aff1e629/">【预】统计基础(1)：概念学习与理解1</a></p><p><a href="https://hscyber.github.io/posts/5663ac13/">【预】回归建模(2)：变量预览及预处理</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Pandas(杂)：List/pandas文本包含筛选</title>
      <link href="/posts/4d972282/"/>
      <url>/posts/4d972282/</url>
      
        <content type="html"><![CDATA[<p>处理<strong>文本或字符串</strong>数据常需要对内容进行<strong>关键词筛选</strong>，如选出表格df中包含某几个关键词的行，选出某个列表<strong>texts</strong>中所有包含某些关键词的句子<strong>keywords</strong>，或选择属于某个list的行……</p><span id="more"></span><h2 id="字符串"><a class="markdownIt-Anchor" href="#字符串"></a> 字符串</h2><blockquote><p>子串包含行筛选</p></blockquote><p>单个字符串的筛选则可以通过<code>if (substring in text)</code>进行判断</p><p>pandas可通过<code>df['text'].str.contains(&quot;keyword1|keyword2...&quot;)</code></p><p>代码举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 表格行筛选</span></span><br><span class="line">keywords = <span class="string">&quot;天鸽|台风|hato|HATO|Hato|帕卡|Pakhar|pakhar&quot;</span></span><br><span class="line">df = df.loc[df[<span class="string">&#x27;content_cleaned&#x27;</span>].<span class="built_in">str</span>.contains(keywords)] </span><br><span class="line"><span class="comment"># 列表筛选举例，先转为列表（为了举例，实际中会采用contains()的方式）</span></span><br><span class="line">contents = df[<span class="string">&#x27;content_cleaned&#x27;</span>].to_list()</span><br><span class="line">keywords = [<span class="string">&quot;天鸽&quot;</span>,<span class="string">&quot;台风&quot;</span>,<span class="string">&quot;hato&quot;</span>,<span class="string">&quot;HATO&quot;</span>,<span class="string">&quot;Hato&quot;</span>]</span><br><span class="line">contents2 = [content <span class="keyword">for</span> content <span class="keyword">in</span> contents <span class="keyword">if</span> <span class="built_in">any</span>(w <span class="keyword">in</span> content <span class="keyword">for</span> w <span class="keyword">in</span> keywords)]</span><br></pre></td></tr></table></figure><p>如果是且，则改成<code>&amp;</code>;<code>all()</code></p><h2 id="列表包含"><a class="markdownIt-Anchor" href="#列表包含"></a> 列表包含</h2><p>列表推导</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newlist = [text <span class="keyword">for</span> text <span class="keyword">in</span> texts <span class="keyword">if</span> <span class="built_in">any</span>(w <span class="keyword">in</span> text <span class="keyword">for</span> w <span class="keyword">in</span> keywords)]</span><br></pre></td></tr></table></figure><p>如果是列元素是否包含于<strong>list</strong>的筛选：</p><ul><li><code>df2 = df1.loc[df1['ID'].isin(keywords)]</code></li><li>取反则加<code>~</code>，如用户筛选：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vipusers = [...]</span><br><span class="line">wb_vip = wb.loc[wb[<span class="string">&#x27;ID&#x27;</span>].isin(vipusers)]</span><br><span class="line"><span class="comment"># 取反则</span></span><br><span class="line">wb_vip = wb.loc[~wb[<span class="string">&#x27;ID&#x27;</span>].isin(vipusers)]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Pandas数据处理分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pandas </tag>
            
            <tag> 文本筛选 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【预】文献篇(3) 如何开展研究背景调研和总结？</title>
      <link href="/posts/e8c71149/"/>
      <url>/posts/e8c71149/</url>
      
        <content type="html"><![CDATA[<blockquote><p>待补充</p></blockquote><p>本文预计包含以下内容：</p><p>①为什么要进行文献调研和现状分析？ ②要把握的重难点是？  ③怎么查文献读文献？<br>④ 应用类？方法类？如何总结归纳？   ⑤论文背景部分怎么写？</p><span id="more"></span><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><blockquote><p>最近一个多月的时间，由于团队在进行几个项目的申请工作，所以非常密集地针对几个较为宽泛的研究主题进行了<u>文献调研、研究现状归纳总结和撰写研究背景</u>，过程中有了很多收获，遂想花点时间静心整理一下自己入学一年多时间里在读文献，调查研究现状和写背景方面的一些习惯和心得。[这周加班干活，具体内容待闲暇时间补充……20220609]</p></blockquote><h2 id="why"><a class="markdownIt-Anchor" href="#why"></a> Why</h2><blockquote><p>为什么要读文献</p><p>为什么要开展背景调研</p></blockquote><h2 id="what"><a class="markdownIt-Anchor" href="#what"></a> What</h2><blockquote><p>文献的类别</p><p>阅读的类别</p></blockquote><h2 id="how-读"><a class="markdownIt-Anchor" href="#how-读"></a> How -&gt;读</h2><blockquote><p>怎么检索查阅及下载文献</p><p>怎么读和记</p></blockquote><h2 id="how-思"><a class="markdownIt-Anchor" href="#how-思"></a> How -&gt; 思</h2><blockquote><p>如何梳理与总结</p></blockquote><h2 id="how-写"><a class="markdownIt-Anchor" href="#how-写"></a> How -&gt; 写</h2><blockquote><p>怎么写科技论文研究背景</p><p>怎么写申报书研究现状</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 科研门外汉 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文献 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文献篇(2) 论文下载</title>
      <link href="/posts/99dce68a/"/>
      <url>/posts/99dce68a/</url>
      
        <content type="html"><![CDATA[<p>小结个人平时下载文献的流程和几种方式…今天有人问我是怎么下载<strong>英文文献</strong>的？我大概捋了一下：</p><p>1.论文所在官网；2.<a href="https://scholar.google.com/">谷歌学术</a> + <a href="https://sci-hub.se/">Scihub</a>（优先doi号搜索）3.<a href="https://www.researchgate.net/">researchgate</a>，若作者未发可以点击<strong>请求全文</strong> 4…</p><span id="more"></span><h2 id="主页"><a class="markdownIt-Anchor" href="#主页"></a> 主页</h2><p>下载文献的目的通常是为了精度或者引用，所以我的习惯是首先应明确论文是否需要下载，这时候一般</p><ol><li>进到论文主页（通过名称或doi直接搜索直达）查看作者及摘要信息等，确定论文是否需要下载</li><li>确定下载后先看能不能通过主页下载，有的期刊本身是开源的或者作者选择了Open，这之后可以直接下，若不行则尝试机构登录</li><li>用科学院的邮箱进行机构登录可以解锁ELSEVIER及很多好期刊的资源，能通过机构下载的优先使用，这样的文章pdf质量也最好,如<a href="https://www.nature.com/articles/s41558-022-01344-2">示例1</a>，<a href="https://doi.org/10.1016/j.compenvurbsys.2022.101777">示例2</a></li></ol><img src="/posts/99dce68a/image-20220609213555174.png" class alt="image-20220609213555174"><img src="/posts/99dce68a/image-20220609214043317.png" class alt="image-20220609214043317"><h2 id="谷歌学术或scihub"><a class="markdownIt-Anchor" href="#谷歌学术或scihub"></a> 谷歌学术或SciHub</h2><blockquote><p>(<a href="https://scholar.google.com/">Google 学术搜索</a>)<a href="https://sci-hub.se/">Sci-Hub消除科学障碍</a></p><p>一般前面的操作不行我才会到scihub求助</p></blockquote><img src="/posts/99dce68a/image-20220609214239964.png" class alt="image-20220609214239964"><img src="/posts/99dce68a/image-20220609214345185.png" class alt="image-20220609214345185"><h2 id="researchgate"><a class="markdownIt-Anchor" href="#researchgate"></a> ResearchGate</h2><blockquote><p><a href="https://www.researchgate.net/">https://www.researchgate.net/</a></p></blockquote><p>很多学者都会在这里建立自己的个人建立，并及时添加个分享最新的研究成果，加上平台的学者网络和研究推荐，是个很实用的<strong>学者及论文追踪平台</strong></p><p>这里很多人会把论文的预印本或者发表后的pdf附在成果上，如果没有则可以<strong>请求全文</strong>，基本上有求必应（有点时间长可以尝试发邮件），有人对自己的研究感兴趣，这对于科研人员来说是件非常高兴的事情，如这周我就给两名陌生学者共享了组里的未开源的论文pdf</p><img src="/posts/99dce68a/image-20220609214948366.png" class alt="image-20220609214948366"><h2 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h2><p>如果还不能找到自己的文献可以求助他人同学，或者给论文作者发邮件</p><p>以上~</p>]]></content>
      
      
      <categories>
          
          <category> 科研门外汉 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文下载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>R语言学习(1)：基础</title>
      <link href="/posts/7b2f7b5e/"/>
      <url>/posts/7b2f7b5e/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>从Python到R</strong></p></blockquote><p>相比于Python，R语言在进行统计分析建模及可视化方面有明显优势，且很多算法提供了R版本但不一定有Python。而两种语言在数据处理分析等方面其实相像，因此可以通过<strong>类比</strong>熟悉一下R语言，以便快速上手R并完成一些工作。本文小结R语言基础，主要涉及</p><ol><li>基本语法，数据类型</li><li>常用函数，流程控制（写循环）</li><li>文件读写及数据框的常规操作</li></ol><span id="more"></span><p>目前我用Python最常用的有以下操作：</p><ol><li>用列表或字典存数据；写for循环；创建DataFrame。</li><li>批量获取文件名；读写csv文件，获取表格字段信息等；行列筛选；分组聚合。</li><li>对DataFrame进行运算，apply函数应用。</li></ol><p>R的基础语法和数据类型？在R中上述常规操作如何实现？</p><img src="/posts/7b2f7b5e/dataframe.png" class alt="dataframe"><h2 id="r基础"><a class="markdownIt-Anchor" href="#r基础"></a> R基础</h2><h3 id="对象类型"><a class="markdownIt-Anchor" href="#对象类型"></a> 对象类型</h3><blockquote><p>R中的对象即是我们通常理解的变量</p><p><strong>R的索引默认从1开始而非0</strong></p></blockquote><p>数值类型：TRUE/FLASE; integer; numric; complex; character; raw(二进制)</p><p>特殊：Inf(正无穷); -Inf; NaN(非数字); NA(缺失，不存在); NULL(空变量，元素存在但是没赋值)</p><ol><li>向量/Vector，<code>c()</code>，相当于数组，其内元素的类型必须相同</li><li>列表/List，<code>list()</code>，类似于Python中的list但是包容性更强，可以同时包含多种不同类型的数据</li><li>矩阵/Matrix，<code>matrix()</code>,二维数组</li><li>数组/Array，<code>array()</code></li><li>因子/Factor，<code>factor()</code>，类别变量</li><li>数据框/Data Frame，<code>data.frame()</code>，表格数据，每列为一个向量，列名为name</li></ol><h3 id="运算"><a class="markdownIt-Anchor" href="#运算"></a> 运算</h3><ol><li><p>比较：用<code>==; !=</code>来比较整数/向量/字符串是否相等，用<code>all.equal(a,b)</code>比较两个数字</p></li><li><p>变量赋值：<code>&lt;-; =</code>，都可以 无区别，个人习惯=，全局变量赋值<code>&lt;&lt;-</code></p></li><li><p>逻辑向量：<code>&amp; ! |</code>，与非或，根据向量生成逻辑向量<code>any();all()</code></p></li></ol><h3 id="循环流程控制"><a class="markdownIt-Anchor" href="#循环流程控制"></a> 循环/流程控制</h3><ol><li><code>if else</code></li></ol><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span><span class="punctuation">(</span>x<span class="operator">&gt;</span><span class="number">3</span><span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    y<span class="operator">=</span><span class="number">6</span></span><br><span class="line"><span class="punctuation">&#125;</span> <span class="keyword">else</span></span><br><span class="line"><span class="punctuation">&#123;</span>message<span class="punctuation">(</span><span class="string">&quot;ok&quot;</span><span class="punctuation">)</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><code>repeat</code>循环，结合<code>next; break</code></li></ol><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">n<span class="operator">=</span><span class="number">0</span>;j<span class="operator">=</span><span class="number">0</span></span><br><span class="line">message<span class="punctuation">(</span><span class="string">&quot;do while&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="keyword">repeat</span><span class="punctuation">&#123;</span></span><br><span class="line">  n<span class="operator">=</span>n<span class="operator">+</span><span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span><span class="punctuation">(</span>n<span class="operator">%%</span><span class="number">7</span><span class="operator">==</span><span class="number">0</span><span class="punctuation">)</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    message<span class="punctuation">(</span>n<span class="punctuation">)</span></span><br><span class="line">    <span class="keyword">next</span>  <span class="comment">#跳过后续代码直接进入下一次迭代</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line">  j<span class="operator">=</span>j<span class="operator">+</span><span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span><span class="punctuation">(</span>n<span class="operator">==</span><span class="number">100</span><span class="punctuation">)</span> <span class="keyword">break</span> <span class="comment">#结束循环</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment"># j=86，跳过了14次</span></span><br></pre></td></tr></table></figure><ol start="3"><li><code>while</code>循环，直接用</li><li><code>for</code>循环</li></ol><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span><span class="punctuation">(</span>i <span class="keyword">in</span> <span class="number">1</span><span class="operator">:</span><span class="number">5</span><span class="punctuation">)</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span> </span><br><span class="line"><span class="keyword">for</span><span class="punctuation">(</span>n <span class="keyword">in</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="literal">TRUE</span><span class="punctuation">,</span> <span class="literal">FALSE</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="常用函数"><a class="markdownIt-Anchor" href="#常用函数"></a> 常用函数</h2><h3 id="查看信息"><a class="markdownIt-Anchor" href="#查看信息"></a> 查看信息</h3><p><code>library(bfast)</code>: 导入三方包，此处为bfast</p><p><code>Rscript test.R </code>：运行脚本</p><p><code>ls()</code>：查看所有变量，ls(pattern=“ab”)可以正则匹配</p><p><code>rm(list=ls())</code>：删除所有变量</p><p><code>class(); mode(); typeof()</code>:查看变量/数值类型：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x <span class="operator">=</span> array<span class="punctuation">(</span><span class="number">1</span><span class="operator">:</span><span class="number">24</span><span class="punctuation">,</span> <span class="built_in">dim</span><span class="operator">=</span><span class="built_in">c</span><span class="punctuation">(</span><span class="number">4</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"><span class="built_in">class</span><span class="punctuation">(</span>x<span class="punctuation">)</span> <span class="comment">#&quot;array&quot;</span></span><br><span class="line">mode<span class="punctuation">(</span>x<span class="punctuation">)</span> <span class="comment">#&quot;numeric&quot;</span></span><br><span class="line">typeof<span class="punctuation">(</span>x<span class="punctuation">)</span> <span class="comment">#&quot;integer&quot;</span></span><br></pre></td></tr></table></figure><p><code>length()</code>：计算向量长度</p><p><code>dim()</code>：返回多维向量的维度</p><p><code>names()</code>：对象命名, R中可以给每个对象赋予名称，类似于字典的<strong>键</strong></p><p><code>unlist()</code>；将多维list展开成一维</p><p><code>options(digits=n)</code>：设置全局小数点显示位数</p><p><code>summary()</code>:汇总函数，输出向量最大最小值四分位数等信息，也可以作用与data.frame，每列的汇总信息</p><p><code>attribute/</code>查看对象的所有属性裂变</p><p><code>View()</code>以电子表格的形式查看data.frame</p><h3 id="文件路径相关"><a class="markdownIt-Anchor" href="#文件路径相关"></a> 文件路径相关</h3><blockquote><p>R中支持正斜杠<code>/</code>或双反斜杠<code>\\</code></p></blockquote><p><code>path = getwd()</code>：返回当前工作路径</p><p><code>file.path(&quot;c&quot;,&quot;program files&quot;,&quot;R&quot;)</code>:拼接，类似于Python中的os.path.join()</p><p><code>files = dir(path ,pattern = &quot;\\.csv$&quot;)</code>：返回路径下所有csv文件名</p><p><code>filenames = dir(path ,pattern = &quot;\\.csv$&quot;, full.names = TRUE)</code>:返回文件名绝对路径</p><p><code>basename(file)</code>：文件名</p><p><code>path.expand(&quot;~&quot;)</code>：返回当前绝对&quot;C:/Users/huangs/Documents&quot;</p><h3 id="创建字典name"><a class="markdownIt-Anchor" href="#创建字典name"></a> 创建”字典name”</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="operator">:</span><span class="number">4</span><span class="punctuation">)</span></span><br><span class="line"><span class="built_in">names</span><span class="punctuation">(</span>x<span class="punctuation">)</span> <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&#x27;a1&#x27;</span><span class="punctuation">,</span><span class="string">&#x27;a2&#x27;</span><span class="punctuation">,</span><span class="string">&#x27;a3&#x27;</span><span class="punctuation">,</span><span class="string">&#x27;a4&#x27;</span><span class="punctuation">)</span></span><br><span class="line">x<span class="punctuation">[</span><span class="string">&#x27;a1&#x27;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><h3 id="创建序列range"><a class="markdownIt-Anchor" href="#创建序列range"></a> 创建序列”range”</h3><p><code>1:10</code>：创建一个1~10的序列</p><p><code>seq(); seq.int()</code>：相当于Python中的range()</p><p><code>seq_alone(x)</code>：创建一个和x一样长的，从1开始的序列</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">seq<span class="punctuation">(</span><span class="number">0</span><span class="punctuation">,</span> <span class="number">1</span><span class="punctuation">,</span> length.out <span class="operator">=</span> <span class="number">11</span><span class="punctuation">)</span> <span class="comment"># 0.1~1.0</span></span><br><span class="line"><span class="built_in">seq.int</span><span class="punctuation">(</span><span class="number">0</span><span class="punctuation">,</span><span class="number">10</span><span class="punctuation">)</span> <span class="comment">#0 1 ... 10</span></span><br><span class="line">seq<span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">9</span><span class="punctuation">,</span> by <span class="operator">=</span> <span class="number">2</span><span class="punctuation">)</span>     <span class="comment"># 1 3 5 7 9</span></span><br><span class="line">seq<span class="punctuation">(</span><span class="number">1.575</span><span class="punctuation">,</span> <span class="number">5.125</span><span class="punctuation">,</span> by <span class="operator">=</span> <span class="number">0.05</span><span class="punctuation">)</span></span><br><span class="line">seq<span class="punctuation">(</span><span class="number">17</span><span class="punctuation">)</span> <span class="comment">#等价于seq.int(17) seq(1:17) seq_len(17)</span></span><br></pre></td></tr></table></figure><p><code>rep(1:5),3</code>：基于一个序列的重复构造新序列，有多个参数可选，可以自定义重复规则</p><p><code>runif(30，1, 50)</code>：服从标准/随机分布的30个数，random uniform seq</p><h3 id="创建时间序列"><a class="markdownIt-Anchor" href="#创建时间序列"></a> 创建时间序列</h3><blockquote><p>有关R中的时间在另外的笔记中进行总结</p></blockquote><p>seq.Date: Generate Regular Sequences of Dates。<a href="https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/seq.Date">api</a></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## first days of years</span></span><br><span class="line">seq<span class="punctuation">(</span>as.Date<span class="punctuation">(</span><span class="string">&quot;1910/1/1&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span> as.Date<span class="punctuation">(</span><span class="string">&quot;1999/1/1&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span> <span class="string">&quot;years&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment">## by month</span></span><br><span class="line">seq<span class="punctuation">(</span>as.Date<span class="punctuation">(</span><span class="string">&quot;2000/1/1&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span> by <span class="operator">=</span> <span class="string">&quot;month&quot;</span><span class="punctuation">,</span> length.out <span class="operator">=</span> <span class="number">12</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment">## quarters</span></span><br><span class="line">seq<span class="punctuation">(</span>as.Date<span class="punctuation">(</span><span class="string">&quot;2000/1/1&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span> as.Date<span class="punctuation">(</span><span class="string">&quot;2003/1/1&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span> by <span class="operator">=</span> <span class="string">&quot;quarter&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## find all 7th of the month between two dates, the last being a 7th.</span></span><br><span class="line">st <span class="operator">&lt;-</span> as.Date<span class="punctuation">(</span><span class="string">&quot;1998-12-17&quot;</span><span class="punctuation">)</span></span><br><span class="line">en <span class="operator">&lt;-</span> as.Date<span class="punctuation">(</span><span class="string">&quot;2000-1-7&quot;</span><span class="punctuation">)</span></span><br><span class="line">ll <span class="operator">&lt;-</span> seq<span class="punctuation">(</span>en<span class="punctuation">,</span> st<span class="punctuation">,</span> by <span class="operator">=</span> <span class="string">&quot;-1 month&quot;</span><span class="punctuation">)</span></span><br><span class="line">rev<span class="punctuation">(</span>ll<span class="punctuation">[</span>ll <span class="operator">&gt;</span> st <span class="operator">&amp;</span> ll <span class="operator">&lt;</span> en<span class="punctuation">]</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p>seq.POSIXt: Generate Regular Sequences of Times。<a href="https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/seq.POSIXt">api</a></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## first days of years</span></span><br><span class="line">seq<span class="punctuation">(</span>ISOdate<span class="punctuation">(</span><span class="number">1910</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">)</span><span class="punctuation">,</span> ISOdate<span class="punctuation">(</span><span class="number">1999</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">)</span><span class="punctuation">,</span> <span class="string">&quot;years&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment">## by month</span></span><br><span class="line">seq<span class="punctuation">(</span>ISOdate<span class="punctuation">(</span><span class="number">2000</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">)</span><span class="punctuation">,</span> by <span class="operator">=</span> <span class="string">&quot;month&quot;</span><span class="punctuation">,</span> length.out <span class="operator">=</span> <span class="number">12</span><span class="punctuation">)</span></span><br><span class="line">seq<span class="punctuation">(</span>ISOdate<span class="punctuation">(</span><span class="number">2000</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">,</span><span class="number">31</span><span class="punctuation">)</span><span class="punctuation">,</span> by <span class="operator">=</span> <span class="string">&quot;month&quot;</span><span class="punctuation">,</span> length.out <span class="operator">=</span> <span class="number">4</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment">## quarters</span></span><br><span class="line">seq<span class="punctuation">(</span>ISOdate<span class="punctuation">(</span><span class="number">1990</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">)</span><span class="punctuation">,</span> ISOdate<span class="punctuation">(</span><span class="number">2000</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">)</span><span class="punctuation">,</span> by <span class="operator">=</span> <span class="string">&quot;quarter&quot;</span><span class="punctuation">)</span> <span class="comment"># or &quot;3 months&quot;</span></span><br><span class="line"><span class="comment">## days vs DSTdays: use c() to lose the time zone.</span></span><br><span class="line">seq<span class="punctuation">(</span><span class="built_in">c</span><span class="punctuation">(</span>ISOdate<span class="punctuation">(</span><span class="number">2000</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">,</span><span class="number">20</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">,</span> by <span class="operator">=</span> <span class="string">&quot;day&quot;</span><span class="punctuation">,</span> length.out <span class="operator">=</span> <span class="number">10</span><span class="punctuation">)</span></span><br><span class="line">seq<span class="punctuation">(</span><span class="built_in">c</span><span class="punctuation">(</span>ISOdate<span class="punctuation">(</span><span class="number">2000</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">,</span><span class="number">20</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">,</span> by <span class="operator">=</span> <span class="string">&quot;DSTday&quot;</span><span class="punctuation">,</span> length.out <span class="operator">=</span> <span class="number">10</span><span class="punctuation">)</span></span><br><span class="line">seq<span class="punctuation">(</span><span class="built_in">c</span><span class="punctuation">(</span>ISOdate<span class="punctuation">(</span><span class="number">2000</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">,</span><span class="number">20</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">,</span> by <span class="operator">=</span> <span class="string">&quot;7 DSTdays&quot;</span><span class="punctuation">,</span> length.out <span class="operator">=</span> <span class="number">4</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h3 id="apply运算"><a class="markdownIt-Anchor" href="#apply运算"></a> apply运算</h3><ul><li><p><code>lapply(list(),f(x))</code>：<code>&quot;list apply&quot;</code>，</p><ul><li>对<strong>list</strong>中的每一个元素依次计算<code>f()</code>，并返回一个新的<strong>list</strong></li></ul></li><li><p><code>vapply(list()/vector(), f(x), numeric(1))</code>：<code>&quot;vaetor apply&quot;</code>：返回vector，但需要确保结果可用vector包装并指定返回的数据类型及长度</p></li><li><p><code>eapply()</code>；遍历环境中的变量</p></li><li><p><code>mapply()</code>:多参数apply，</p></li><li><p><code>tapply</code>：类似<strong>group by</strong>，<code>with(data, tapply(x1, x2, f()))</code></p><ul><li><code>by, aggregate</code></li></ul></li><li><p><code>library(plyr)</code>：指定输入输出形式的apply函数</p><ul><li><code>ddply()</code>; 输入输出为<strong>data.frame</strong></li><li><code>llply()</code>；输入输出均为list</li><li><code>laply()</code>；输入list，输出array</li></ul></li></ul><h3 id="csv读写"><a class="markdownIt-Anchor" href="#csv读写"></a> CSV读写</h3><ul><li><p>数据加载：<code>load(file = &quot;...rda&quot;)</code></p></li><li><p>csv读写：</p></li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df <span class="operator">=</span> read.csv<span class="punctuation">(</span>path<span class="punctuation">,</span> header <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span>encoding <span class="operator">=</span> <span class="string">&quot;UTF-8&quot;</span><span class="punctuation">)</span></span><br><span class="line">write.csv<span class="punctuation">(</span>df<span class="punctuation">,</span>file <span class="operator">=</span> <span class="string">&#x27;....csv&#x27;</span><span class="punctuation">,</span>row.names <span class="operator">=</span> <span class="built_in">F</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h3 id="异常捕获"><a class="markdownIt-Anchor" href="#异常捕获"></a> 异常捕获</h3><p>trycatch</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">tryCatch<span class="punctuation">(</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment"># 待执行/判断的代码</span></span><br><span class="line">    a<span class="operator">+</span>b</span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> warning <span class="operator">=</span> <span class="keyword">function</span><span class="punctuation">(</span>w<span class="punctuation">)</span><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment"># 出现warning状态时执行，可以输出警告，也可以执行其它命令</span></span><br><span class="line">    print<span class="punctuation">(</span><span class="string">&quot;warning&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> error <span class="operator">=</span> <span class="keyword">function</span><span class="punctuation">(</span>e<span class="punctuation">)</span><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment"># 出现Error状态时执行，可以输出错误，也可以执行其它命令</span></span><br><span class="line">    print<span class="punctuation">(</span>error<span class="punctuation">)</span></span><br><span class="line">    k <span class="operator">=</span> <span class="operator">-</span><span class="number">1</span></span><br><span class="line">    print<span class="punctuation">(</span>k<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span>finally <span class="operator">=</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="built_in">return</span><span class="punctuation">(</span>k<span class="punctuation">)</span></span><br><span class="line">  <span class="comment"># 这里的代码最后一定会执行</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h2 id="表格操作"><a class="markdownIt-Anchor" href="#表格操作"></a> 表格操作</h2><blockquote><p>R中的data.frame类似于Python的pandas dataframe ，用于表示表格型数据，应用十分灵活方便</p></blockquote><h3 id="行列选择"><a class="markdownIt-Anchor" href="#行列选择"></a> 行列选择</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建</span></span><br><span class="line">data.frame<span class="punctuation">(</span></span><br><span class="line">x <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span>..<span class="punctuation">)</span></span><br><span class="line">y <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span>..<span class="punctuation">)</span></span><br><span class="line">z <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span>..<span class="punctuation">)</span></span><br><span class="line"><span class="built_in">names</span> <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&#x27;ID&#x27;</span><span class="punctuation">,</span>...<span class="punctuation">)</span></span><br><span class="line">row.names <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span>...<span class="punctuation">)</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><img src="/posts/7b2f7b5e/dataframe.png" class alt="image-20220607230008504"><p>其他操作</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取表格信息</span></span><br><span class="line">str<span class="punctuation">(</span>df<span class="punctuation">)</span></span><br><span class="line">summary<span class="punctuation">(</span>df<span class="punctuation">)</span></span><br><span class="line"><span class="comment">#转置</span></span><br><span class="line">t<span class="punctuation">(</span>df<span class="punctuation">)</span> </span><br><span class="line">colSums<span class="punctuation">(</span>df<span class="punctuation">[</span><span class="punctuation">,</span><span class="punctuation">]</span><span class="punctuation">)</span><span class="operator">/</span>colMeans<span class="punctuation">(</span>df<span class="punctuation">[</span><span class="punctuation">,</span><span class="punctuation">]</span><span class="punctuation">)</span> <span class="comment">#计算列的和及均值</span></span><br><span class="line"><span class="comment"># 增加新列</span></span><br><span class="line">df<span class="operator">$</span>new_col <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span>..<span class="punctuation">)</span></span><br><span class="line"><span class="comment"># 增加新行，拼接两个df</span></span><br><span class="line">newdf <span class="operator">=</span> rbind<span class="punctuation">(</span>df1<span class="punctuation">,</span> df2<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h3 id="新建csv并追加dataframe"><a class="markdownIt-Anchor" href="#新建csv并追加dataframe"></a> 新建csv并追加data.frame</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">outfile <span class="operator">=</span> <span class="string">&quot;../.*csv&quot;</span></span><br><span class="line">out.table <span class="operator">=</span> data.frame<span class="punctuation">(</span><span class="punctuation">)</span></span><br><span class="line"><span class="keyword">for</span> <span class="punctuation">(</span>colname <span class="keyword">in</span> <span class="built_in">names</span><span class="punctuation">(</span>df<span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">&#123;</span></span><br><span class="line">    gridid <span class="operator">=</span> colname</span><br><span class="line">    x <span class="operator">=</span> df<span class="punctuation">[</span><span class="punctuation">,</span>colname<span class="punctuation">]</span></span><br><span class="line">    res <span class="operator">=</span> myfun<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line">    k <span class="operator">=</span> res<span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span></span><br><span class="line">    pvalue <span class="operator">=</span> res<span class="punctuation">[</span><span class="number">2</span><span class="punctuation">]</span></span><br><span class="line">    ktime <span class="operator">=</span> times<span class="punctuation">[</span>k<span class="punctuation">]</span></span><br><span class="line">      <span class="comment"># Populate the row</span></span><br><span class="line">    new.row <span class="operator">=</span> data.frame<span class="punctuation">(</span>gridid <span class="operator">=</span> gridid<span class="punctuation">,</span> ktime <span class="operator">=</span> ktime<span class="punctuation">,</span> pvalue <span class="operator">=</span> pvalue<span class="punctuation">)</span></span><br><span class="line">    out.table <span class="operator">=</span> rbind<span class="punctuation">(</span>out.table<span class="punctuation">,</span> new.row<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">write.csv<span class="punctuation">(</span>out.table<span class="punctuation">,</span>file <span class="operator">=</span> outfile<span class="punctuation">,</span> row.names <span class="operator">=</span> <span class="built_in">F</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h3 id="拆分"><a class="markdownIt-Anchor" href="#拆分"></a> 拆分</h3><p><code>groups = split(df, df$Quarter)</code>：返回的是<strong>dflist</strong>，通过索引访问，如<strong>groups[1]</strong></p><p>拆分后遍历</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">df &lt;- data<span class="selector-class">.frame</span>(</span><br><span class="line">  Weekday = <span class="built_in">factor</span>(<span class="built_in">rep</span>(<span class="built_in">c</span>(<span class="string">&quot;Mon&quot;</span>, <span class="string">&quot;Tues&quot;</span>, <span class="string">&quot;Wed&quot;</span>, <span class="string">&quot;Thurs&quot;</span>, <span class="string">&quot;Fri&quot;</span>), each = <span class="number">4</span>), </span><br><span class="line">                   levels = <span class="built_in">c</span>(<span class="string">&quot;Mon&quot;</span>, <span class="string">&quot;Tues&quot;</span>, <span class="string">&quot;Wed&quot;</span>, <span class="string">&quot;Thurs&quot;</span>, <span class="string">&quot;Fri&quot;</span>)),</span><br><span class="line">  Quarter = <span class="built_in">paste0</span>(<span class="string">&quot;Q&quot;</span>, <span class="built_in">rep</span>(<span class="number">1</span>:<span class="number">4</span>, each = <span class="number">5</span>)), </span><br><span class="line">  Delay = <span class="built_in">c</span>(<span class="number">9.9</span>, <span class="number">5.4</span>, <span class="number">8.8</span>, <span class="number">6.9</span>, <span class="number">4.9</span>, <span class="number">9.7</span>, <span class="number">7.9</span>, <span class="number">5</span>, <span class="number">8.8</span>, <span class="number">11.1</span>, <span class="number">10.2</span>, <span class="number">9.3</span>, <span class="number">12.2</span>,</span><br><span class="line">            <span class="number">10.2</span>, <span class="number">9.2</span>, <span class="number">9.7</span>, <span class="number">12.2</span>, <span class="number">8.1</span>, <span class="number">7.9</span>, <span class="number">5.6</span>))</span><br><span class="line">            </span><br><span class="line">gs = <span class="built_in">split</span>(df, df<span class="variable">$Quarter</span>)</span><br><span class="line"><span class="function"><span class="title">for</span><span class="params">(gp in gs)</span></span></span><br><span class="line">&#123;</span><br><span class="line">  tempdf = data<span class="selector-class">.frame</span>(gp)</span><br><span class="line">  <span class="built_in">print</span>(tempdf<span class="variable">$Weekday</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="dplyr包"><a class="markdownIt-Anchor" href="#dplyr包"></a> dplyr包</h2><blockquote><p>一个功能强大的数据处理包<a href="https://dplyr.tidyverse.org/">dplyr</a></p></blockquote><p>安装：<code>install.packages(&quot;tidyverse&quot;)</code>;<code>install.packages(&quot;dplyr&quot;)</code></p><p><code>%&gt;%</code>管道操作符，该符号的意思是将前者作为后者的输入参数进行传入</p><h3 id="拆分group_split"><a class="markdownIt-Anchor" href="#拆分group_split"></a> 拆分group_split</h3><h3 id="groupby分类汇总"><a class="markdownIt-Anchor" href="#groupby分类汇总"></a> Groupby分类汇总</h3><p>参考<a href="https://mgimond.github.io/ES218/Week03ab_groupby.html#Count_the_number_of_records_in_each_group">1</a></p><p>操作实例</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">df <span class="operator">&lt;-</span> data.frame<span class="punctuation">(</span></span><br><span class="line">  Weekday <span class="operator">=</span> factor<span class="punctuation">(</span><span class="built_in">rep</span><span class="punctuation">(</span><span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;Mon&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Tues&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Wed&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Thurs&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Fri&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span> each <span class="operator">=</span> <span class="number">4</span><span class="punctuation">)</span><span class="punctuation">,</span> </span><br><span class="line">                   levels <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;Mon&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Tues&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Wed&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Thurs&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Fri&quot;</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">  Quarter <span class="operator">=</span> paste0<span class="punctuation">(</span><span class="string">&quot;Q&quot;</span><span class="punctuation">,</span> <span class="built_in">rep</span><span class="punctuation">(</span><span class="number">1</span><span class="operator">:</span><span class="number">4</span><span class="punctuation">,</span> each <span class="operator">=</span> <span class="number">5</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">,</span> </span><br><span class="line">  Delay <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">9.9</span><span class="punctuation">,</span> <span class="number">5.4</span><span class="punctuation">,</span> <span class="number">8.8</span><span class="punctuation">,</span> <span class="number">6.9</span><span class="punctuation">,</span> <span class="number">4.9</span><span class="punctuation">,</span> <span class="number">9.7</span><span class="punctuation">,</span> <span class="number">7.9</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">,</span> <span class="number">8.8</span><span class="punctuation">,</span> <span class="number">11.1</span><span class="punctuation">,</span> <span class="number">10.2</span><span class="punctuation">,</span> <span class="number">9.3</span><span class="punctuation">,</span> <span class="number">12.2</span><span class="punctuation">,</span></span><br><span class="line">            <span class="number">10.2</span><span class="punctuation">,</span> <span class="number">9.2</span><span class="punctuation">,</span> <span class="number">9.7</span><span class="punctuation">,</span> <span class="number">12.2</span><span class="punctuation">,</span> <span class="number">8.1</span><span class="punctuation">,</span> <span class="number">7.9</span><span class="punctuation">,</span> <span class="number">5.6</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">library<span class="punctuation">(</span>dplyr<span class="punctuation">)</span></span><br><span class="line">df <span class="operator">%&gt;%</span> </span><br><span class="line">  group_by<span class="punctuation">(</span>Weekday<span class="punctuation">)</span> <span class="operator">%&gt;%</span> </span><br><span class="line">  summarize<span class="punctuation">(</span>min_delay <span class="operator">=</span> <span class="built_in">min</span><span class="punctuation">(</span>Delay<span class="punctuation">)</span><span class="punctuation">,</span> max_delay <span class="operator">=</span> <span class="built_in">max</span><span class="punctuation">(</span>Delay<span class="punctuation">)</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> R语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> R语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法及Typora使用简介</title>
      <link href="/posts/c694f527/"/>
      <url>/posts/c694f527/</url>
      
        <content type="html"><![CDATA[<p>经常给人安利typora-markdown编辑器，遂在此放一下markdown的基本语法和typora的使用，常用的标记符号不超过十个，上手简单。</p><span id="more"></span><blockquote><p><a href="https://markdown.com.cn/basic-syntax/">Markdown</a>语言,使用易读易写的纯文本格式编写文档，可与HTML混编，可导出 HTML、PDF 以及本身的 .md 格式的文件。因简洁、高效、易读、易写，Markdown被大量使用，如Github、Wikipedia、简书、公众号等。</p></blockquote><p>！总之，用于书写笔记博客等均很方便，包括带公式的文档等，学习成本也很低。</p><h2 id="markdown语法"><a class="markdownIt-Anchor" href="#markdown语法"></a> Markdown语法</h2><h3 id="引入-word"><a class="markdownIt-Anchor" href="#引入-word"></a> 引入-word</h3><ol><li>确定样式：回顾一下我们用word写文档的过程，类比学习：首先新建\或使用已有的一个word模板\板式，定义好<u>文件的布局（页面尺寸、方向、分栏）、字体（中英文，大小，加粗等等）、段落（缩进，段前段后格式）、分级标题（自动编号）等</u>的样式，打开word并保存本地文件，如我本机一般会新建若干个通用/面向不同场景的文档模板(<code>.dotm</code>结尾，放在指定目录下即可，选项中可以查看并设置模板文件的默认路径。</li><li>创建文件并打开撰写</li><li>…插入图文参考等并进一步排版</li></ol><p>实际上md latex软件写文档的逻辑类似，都是定义样式→书写→渲染，最大的区别是<strong>纯文本/代码</strong>。</p><h3 id="md的基本使用"><a class="markdownIt-Anchor" href="#md的基本使用"></a> md的基本使用</h3><blockquote><p>实际上也可以使用文本编辑器打开word文档但是是乱码，不能识别，但是md可以</p></blockquote><p>基于一些基本的标识符撰写纯文本，然后在基于一些软件或编辑器/类比word进行样式渲染</p><p>主要用法举例，更多请查<a href="https://markdown.com.cn/basic-syntax/">Markdown</a>——<strong>注意空格的使用</strong>：</p><img src="/posts/c694f527/image-20220803224504684.png" class alt="image-20220803224504684"><h3 id="代码及公式"><a class="markdownIt-Anchor" href="#代码及公式"></a> 代码及公式</h3><img src="/posts/c694f527/image-20220803225316432.png" class alt="image-20220803225316432"><p>公式的书写和语法需要多查多熟悉，顺带推荐可以直接截图粘贴为md格式的<a href="https://mathpix.com/">Mathpix Snipping Tool</a></p><h3 id="md的利弊"><a class="markdownIt-Anchor" href="#md的利弊"></a> md的利弊</h3><p>好处</p><ol><li>熟悉了基本语法后书写快捷</li><li>且跨平台便于分享，且文件占用空间小，打开查看方便</li><li>图片与文本分离存放，以链接形式书写</li><li>在写代码时候可以嵌入笔记本，如Python jupyter以及R md、matlab md</li><li>…</li></ol><p>不便</p><ol><li>不便于进行较细致的调整</li><li>自定义md文件渲染的样式需要一定的学习成本（包括分级展示）</li><li>不足以撰写学术论文，建议使用LATEX，后续我也会更新Latex书写论文的一些笔记</li><li>…</li></ol><h2 id="typora使用"><a class="markdownIt-Anchor" href="#typora使用"></a> Typora使用</h2><blockquote><p>前提设置：1 在文件资源管理器处 -&gt; 查看-&gt;显示文件拓展名；2建议将md文件的默认打开方式改为typora.</p><p><a href="https://typora.io/">简介的软件介绍</a></p></blockquote><ul><li>如果不想付费永久订阅可以尝试下载旧版<a href="https://typora.io/windows/dev_release.html">&lt;1.0</a>，并在安装后设置该软件禁止使用网络</li><li>且markdown编辑器有挺多，可以自行尝试探索</li></ul><p><strong>md文件是纯文本文件，记事本可查看，typora等只是提供了更便捷的编辑功能以及样式功能</strong></p><ol><li>在准备用来记笔记的文件夹下新建txt并将后缀修改为<code>.md</code></li><li>打开软件进入偏好设置<ol><li>启动选项可设置为打开指定目录</li><li>外观下拉可以设置主题及找新的样式</li><li>图片插入设置，个人需求，我的设置是<ol><li><img src="/posts/c694f527/image-20220803225738321.png" class alt="image-20220803225738321"></li></ol></li><li>导出pdf等需要下载<a href="https://pandoc.org/installing.html">pandoc</a>支持</li><li><img src="/posts/c694f527/image-20220803225709482.png" class alt="image-20220803225709482"></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>订阅了Typora~</title>
      <link href="/posts/34eb4d05/"/>
      <url>/posts/34eb4d05/</url>
      
        <content type="html"><![CDATA[<p><a href="https://typora.io/">Topora</a>是一款简洁、优雅的markdown编辑器，加上首创的<strong>所见即所得</strong>风格，自定义主题等，我一直用来记笔记写文本，很推荐！</p><span id="more"></span><p>遗憾的是，今天下午发现typora旧的测试版已经无法打开，强制要求购买序列号。作为忠实粉的我最后尝试了一下一个翻版的开源软件<a href="https://github.com/marktext/marktext">MarkText</a>，也挺好用，能够实现一样的功能，体验上除了主题外观好像差别不大，在图片方面似乎做的更好，但我实在是习惯了Typora，所以选择了入手支持</p><ul><li>价格的话$15~￥89，支持三台设备，永久有效，可随时更换设备</li></ul><img src="/posts/34eb4d05/typora.png" class alt="激活成功">]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandas(杂)：字符串列拆分及合并</title>
      <link href="/posts/374675e0/"/>
      <url>/posts/374675e0/</url>
      
        <content type="html"><![CDATA[<p>pandas处理表格时，<strong>字符串</strong>列的<u>拆分及合并</u>操作，类似于excel中的分列</p><p>1.根据分隔符将一列<strong>拆</strong>成多列;      2.将多列进行<strong>合并</strong></p><span id="more"></span><img src="/posts/374675e0/image-20220531130906473.png" class alt="image-20220531130906473"><h2 id="分列"><a class="markdownIt-Anchor" href="#分列"></a> 分列</h2><blockquote><p>参考api介绍: <a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.str.split.html">Series.str.split()</a></p><p>该方法支持正则表达式</p></blockquote><p>处理高德Poi数据时发现有一列<strong>typename</strong>是这样的：</p><ul><li>汽车服务;汽车服务相关;汽车服务相关</li><li>生活服务;人才市场;人才市场</li><li>餐饮服务;中餐厅;中餐厅</li></ul><p>分别代表大中小类别，因此通过如下代码切分</p><ul><li><code>expand=True</code>表示将拆分的字符串展开为单独的列</li><li><code>n</code>指定拆分的分隔符个数，默认0/-1全部拆分</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试数据，原始df过大</span></span><br><span class="line">df_sample = df.sample(<span class="number">500</span>)</span><br><span class="line"><span class="comment"># 直接切分，预览结果发现得到五列，后两列大量为None,有的小类过细</span></span><br><span class="line">df_sample[<span class="string">&#x27;typename&#x27;</span>].<span class="built_in">str</span>.split(<span class="string">&#x27;;&#x27;</span>, expand=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 因此最终的切分代码</span></span><br><span class="line">df_sample[[<span class="string">&#x27;type1&#x27;</span>, <span class="string">&#x27;type2&#x27;</span>, <span class="string">&#x27;type3&#x27;</span>]] = df_sample[<span class="string">&#x27;typename&#x27;</span>].<span class="built_in">str</span>.split(<span class="string">&#x27;;&#x27;</span>, n=<span class="number">2</span>, expand=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="合并"><a class="markdownIt-Anchor" href="#合并"></a> 合并</h2><blockquote><p>参考api介绍: <a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.str.cat.html">Series.str.cat()</a></p><p>补充的其他方法，另见<a href="https://sparkbyexamples.com/pandas/pandas-combine-two-columns-of-text-in-dataframe/">参考2</a></p></blockquote><p>确保各类为文本/字符串类型，否则先转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># df[&#x27;type1&#x27;] = df[&#x27;type1&#x27;].astype(str)</span></span><br><span class="line"><span class="comment"># 最直接的是字符串相加</span></span><br><span class="line">df_sample[<span class="string">&quot;typename2&quot;</span>] = df_sample[<span class="string">&#x27;type1&#x27;</span>].astype(<span class="built_in">str</span>) +<span class="string">&quot;-&quot;</span>+ df_sample[<span class="string">&quot;type2&quot;</span>]+<span class="string">&quot;-&quot;</span>+ df_sample[<span class="string">&quot;type3&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并方式2</span></span><br><span class="line">df_sample[<span class="string">&#x27;typename2&#x27;</span>] = df_sample[<span class="string">&#x27;type1&#x27;</span>].<span class="built_in">str</span>.cat(df_sample[[<span class="string">&#x27;type2&#x27;</span>, <span class="string">&#x27;type3&#x27;</span>]], sep=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用字符串join函数</span></span><br><span class="line">df[<span class="string">&quot;typename2&quot;</span>] = df[[<span class="string">&#x27;type1&#x27;</span>, <span class="string">&#x27;type2&#x27;</span>, <span class="string">&#x27;type3&#x27;</span>]].apply(<span class="string">&quot;-&quot;</span>.join, axis=<span class="number">1</span>)</span><br><span class="line">df[<span class="string">&quot;typename2&quot;</span>] = df[[<span class="string">&#x27;type1&#x27;</span>, <span class="string">&#x27;type2&#x27;</span>, <span class="string">&#x27;type3&#x27;</span>]].agg(<span class="string">&quot;-&quot;</span>.join, axis=<span class="number">1</span>)</span><br><span class="line">df[<span class="string">&quot;typename2&quot;</span>] = df[[<span class="string">&#x27;type1&#x27;</span>, <span class="string">&#x27;type2&#x27;</span>, <span class="string">&#x27;type3&#x27;</span>]].apply(<span class="keyword">lambda</span> x: <span class="string">&quot;-&quot;</span>.join(x), axis =<span class="number">1</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Pandas数据处理分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pandas </tag>
            
            <tag> 表格分列及合并 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文献篇(1) 论文检索</title>
      <link href="/posts/33f7b1b7/"/>
      <url>/posts/33f7b1b7/</url>
      
        <content type="html"><![CDATA[<p>背景调研和文献整理是研究开展的必要过程，通常在明确问题之后首先就要进行一个较完整的文献梳理。本文主要介绍<a href="https://scholar.google.com/">谷歌学术</a>以及<a href="https://www.connectedpapers.com/">Connected papers</a>的使用，侧重于英文文献，其他常用平台还有<a href="https://www.webofscience.com/wos/woscc/basic-search">Web Of Science</a>、<a href="https://www.cnki.net/">中国知网</a>。</p><span id="more"></span><img src="/posts/33f7b1b7/image-20220604165048854.png" class alt="image-20220604165048854"><h2 id="google-scholar"><a class="markdownIt-Anchor" href="#google-scholar"></a> Google Scholar</h2><blockquote><p><a href="https://scholar.google.com/">谷歌学术网址</a>，<strong>Stand on the shoulders of giants</strong></p><p>此平台也是一个很好的<strong>跟踪学者研究成果</strong>的平台</p></blockquote><h3 id="类型及时间筛选"><a class="markdownIt-Anchor" href="#类型及时间筛选"></a> 类型及时间筛选</h3><p>左侧设置搜索选项：</p><ul><li><p><strong>类型</strong>可以选择<strong>综述</strong>(review)或所有类型的文章（在论文投稿时会注明文章类型，其中包括review，因此平台可以识别）</p></li><li><p><strong>时间</strong>通常不受限，尤其是梳理研究历史和重要的文章的时候，也常设置近五年、三年或者近一年以追踪最近的成果进展</p></li></ul><h3 id="内容筛选"><a class="markdownIt-Anchor" href="#内容筛选"></a> 内容筛选</h3><p>逻辑符(大写)：<strong>AND  OR</strong>，常见论文搜索/组合方式（<strong>冒号后无空格</strong>）：</p><ul><li>关键词检索：typhoon resilience 或 typhoon+resilience 等价于typhoon AND resilience</li><li>短语关键词检索：“social resilience”</li><li>搜索标题：intitle<ul><li>intitle:(resilience typhoon)</li><li>intitle:((typhoon OR hurricane) AND (resilience))</li></ul></li><li>搜索作者：author:(“San Zhang” OR “Si Li”)</li><li>搜索期刊文献：“social resilience” <u>source</u>:“International Journal of Geographical Information Science”</li></ul><p>**我最常用的是标题检索，如：intitle:((typhoon OR hurricane) AND (resilience) AND “social media”)。**想要更加广泛一点或者词组不一定包含在标题中时，则建议直接关键词组合，这样会默认检索论文全文信息。</p><h2 id="connected-papers"><a class="markdownIt-Anchor" href="#connected-papers"></a> Connected papers</h2><blockquote><p><a href="https://www.connectedpapers.com/">Find and explore academic papers</a>一个论文检索及管理、可视化梳理的平台</p><p>我通常用来找一个具体研究方向上<strong>被引量高</strong>的一些较为重要的文章</p></blockquote><img src="/posts/33f7b1b7/image-20220604170812558.png" class alt="image-20220604170812558"><h3 id="作者的初衷"><a class="markdownIt-Anchor" href="#作者的初衷"></a> 作者的初衷</h3><p>多年来，我们一直感到学术文献回顾和探索的痛苦，并且一直在思考如何解决它。很多时候，我们找到了一篇有趣的论文，并且我们希望：<u>1. 查找针对同一主题的不同方法和方法；2. 追踪该领域的最新研究状况；3. 确定开创性作品和背景知识；4.探索并沉浸在主题中，并了解论文中的趋势和动态。</u>因此开发了这个平台</p><h3 id="怎么阅读"><a class="markdownIt-Anchor" href="#怎么阅读"></a> 怎么阅读</h3><p>布局显示</p><ul><li>相似的论文聚集在一起，并通过更强的线条（边缘）相连，<strong>线的颜色越深，联系越强</strong>，研究延续性越强。</li><li>指标刻画，<strong>论文被引越多，圆圈越大</strong>;论文越新，颜色越深。</li></ul><p><strong>List view</strong>：按时间顺序排列</p><p><strong>Prior and derivative works</strong></p><ul><li>开创性论文Prior</li><li>衍生的新方法论文/综述derivative</li></ul><p><strong>右侧可以查看论文摘要并且创建新的CP图</strong></p><p><strong>下载</strong>：直接下载.bib结尾的引文格式</p><h2 id="google"><a class="markdownIt-Anchor" href="#google"></a> Google</h2><blockquote><p><a href="https://www.google.com/">谷歌官网，需要梯子</a>，最后介绍一下搜索引擎的高级检索，百度也有类似的功能。</p><p><a href="http://www.googleguide.com/advanced_operators_reference.html">参考1-官方搜索运算符文档</a>，可以进行<u>标题，网址、文本、类型</u>等的检索。</p></blockquote><p>常用搜索（逻辑符(大写)：<strong>AND  OR</strong>，也可以用空格或+替换AND）</p><ul><li><strong>标题</strong>包含：intitle。如输入<u>intitle:google</u>（<strong>冒号后无空格</strong>），网页标题中带有google的网页都会被搜索出来。<ul><li>还有<strong>allintitle</strong>，可以进行多个关键词的检索，包括还有allintext, allinurl，用法类似。</li><li>也就是说进行单个/并列关键词检索时二者检索结果均无区别，看习惯。<strong>e.g., [ intitle:google intitle:search ] is the same as [ allintitle: google search ]</strong>。</li></ul></li><li><strong>网址</strong>包含：inurl。搜索包含有特定字符的URL。</li><li><strong>网页正文</strong>包含：intext。搜索网页正文内容中的指定字符。</li><li><strong>文件</strong>检索：filetype。搜索指定类型的文件。例如输入<u>filetype:pdf</u>，将返回所有以pdf结尾的文件URL，这通常用于组合-即多条件检索,如 <u>inurl:google AND filetype:pdf</u>。<ul><li><img src="/posts/33f7b1b7/image-20220527104807053.png" class alt="searchfile"></li></ul></li><li><strong>相关网站</strong>检索site。找到与指定网站有联系的URL。例如输入<u>site:igsnrr.cas.cn</u>。所有和这个网站有联系的URL都会被显示。</li><li><strong>相似网站</strong>检索：related。查询将列出与您指定的网页相似的网页，如<u>related:igsnrr.cas.cn</u>：结果中会呈现科学网、中科院心理研究所、天文台等，可自行尝试。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 科研门外汉 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 谷歌学术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matplotlib基础(1)：图的组成元素</title>
      <link href="/posts/8dfff56a/"/>
      <url>/posts/8dfff56a/</url>
      
        <content type="html"><![CDATA[<p><strong>绘图技能</strong>是我一直想要拓展和延伸的一个技能。这一方面需要通过大量的输入来学习别人对图表的设计和呈现，学习色彩、布局等等……另一方面还要能够用代码来实现，而需要基于代码的可视化是一个比较繁琐的内容，需要学习和积累。故在此开始记录自己Python可视化的学习过程，当然，也便于代码的复用。本文主要涉及内容：</p><ol><li><strong>Matplotlib中Figure的组成要素</strong></li><li><strong>主要元素的常用方法汇总</strong></li><li>其他的诸如风格、字体、网格、图例、色带陆续总结……</li></ol><span id="more"></span><p>一张好看的学术图表不仅能够更优雅简洁地传递信息，也能给人予美的享受。在撰写学术论文的过程，耗费大量时间的除了做实验，另一个一定是作图了，要通过几张图把信息很好地呈现出来，需要费不少功夫。</p><blockquote><p>本系列笔记主要参考：<a href="https://matplotlib.org/stable/tutorials/introductory/usage.html">Matplotlib usage</a>, <a href="https://matplotlib.org/stable/api/index.html">Matplotlibapi文档</a>，<a href="https://matplotlib.org/stable/gallery/index.html">Matplotlib Gallery</a>，部分参考<a href="https://github.com/rougier/scientific-visualization-book">Rougier老师的开源书</a></p></blockquote><p>另外，快速绘图<a href="https://matplotlib.org/cheatsheets/cheatsheets.pdf">备忘录下载</a>，该备忘录有两张大图（<a href="https://camo.githubusercontent.com/bc3b143766ed68eb6a851900c317c5d9222eb1471888942afb35137aa5141557/68747470733a2f2f6d6174706c6f746c69622e6f72672f63686561747368656574732f63686561747368656574732d312e706e67">基础绘图</a>;<a href="https://camo.githubusercontent.com/8566d191963c2ada58246241d19a1252c519edea1ecf4049f5bc939e302e36a8/68747470733a2f2f6d6174706c6f746c69622e6f72672f63686561747368656574732f63686561747368656574732d322e706e67">色彩及文字等</a>），可以快速查看常见的绘图操作/函数，函数右侧的<strong>api</strong>还可以点击直达官网api文档详细介绍。</p><img src="/posts/8dfff56a/text-shadow.png" class alt="matplotlib"><p>上图即通过matplotlib代码制作，详见<a href="https://github.com/rougier/scientific-visualization-book">book</a></p><h2 id="图的组成"><a class="markdownIt-Anchor" href="#图的组成"></a> 图的组成</h2><blockquote><p>matplotlib最新版的文档做了较大的改版，提供了更全的<a href="https://matplotlib.org/stable/gallery/index.html">api参考</a></p></blockquote><p>下图是Matplotlib官方文档中提供的一张介绍图组成元素的图，很整洁，左图为<a href="https://matplotlib.org/3.1.1/gallery/showcase/anatomy.html">旧版anatomy</a>，右图为最新的文档<a href="https://matplotlib.org/stable/gallery/showcase/anatomy.html?highlight=anatomy">anatomy</a>里的图，我稍作改动放到了一起：</p><img src="/posts/8dfff56a/anatomy.png" class alt="anatomy"><h3 id="组成总览"><a class="markdownIt-Anchor" href="#组成总览"></a> 组成总览</h3><ul><li><p><strong>Figure</strong>：所有绘图元素的顶级容器，大致可以理解为<strong>画布canvas</strong>。我们可以设置它的尺寸(figsize)、标题(suptile)、x标签(supxlabel)、背景颜色(facecolor )等属性，背景默认是透明 transparent=True。</p></li><li><p><strong>Axes</strong>：相当于Subplot，子图，是我们实际的绘图区域，为<strong>矩形</strong>。一张图可以有多个子图(Axes)，如上图</p><ul><li><strong>Spines</strong>： 图边，每个子图都有4条边，<u>每条边有主副刻度线(Tick)+主副刻度标签(Tick labels)+边标签(Label)</u>，默认只显示左+下的Spine。</li><li><strong>Axis</strong>：默认显示的左和下方的两条Spines分别为<u>yaxis，xaxis</u>，属性同Spines。</li><li><strong>Line points</strong>…：绘制的图形，也就是我们要在axes上画的东西</li><li><strong>Legend</strong>：图例，每个axes都可以根据其上绘制的图形生成图例，也可以不依赖图形单独创建。</li><li><strong>Grid</strong>：网格线，自行选择是否添加（按照主副刻度线生成）</li><li><strong>Text</strong>：文本，可以作为注释说明添加到图上<ul><li><strong>Annotation</strong>：可以添加连接线/箭头的文本，注释</li></ul></li></ul></li><li><p><strong>Artist</strong> : <strong>Everything on the figure</strong>, including Figure, Axes, and Axis objects, is an artist. 理解为图元素。</p><ul><li>组成<a href="https://matplotlib.org/stable/_images/inheritance-746d7ad5b4a3ecbadc51ab040f5d995f5c6ecc71.png">图</a></li></ul></li></ul><p>了解了组成部件，之后我们的学习任务主要就是了解和属性各个部件繁多的<strong>属性和属性调整的方法</strong>，以及组合。</p><p>下一节即有针对性地看一下各个元素的属性方法等</p><h3 id="图的基本单元"><a class="markdownIt-Anchor" href="#图的基本单元"></a> 图的基本单元</h3><p>任意的一张图，本质上是由以下三种要素的组合（莫明想起了GIS里的点线面hh）：</p><ul><li>patchs：块，如background bars ……</li><li>lines：线，如tick,line……</li><li>texts：文本，如label title……</li></ul><p>多数情况下我们都是使用绘图自带的<strong>默认</strong>设置，但是实际上，<font color="#dd0000">一张图的任一组成部分即上述部件都能够被访问和调整</font>如我们可以像下面这样直接设置每个label加粗，<strong>这些方法都能够在文档中快速找到</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">5</span>,<span class="number">2</span>))</span><br><span class="line"><span class="keyword">for</span> label <span class="keyword">in</span> ax.get_xaxis().get_ticklabels():</span><br><span class="line">    label.set_fontweight(<span class="string">&quot;bold&quot;</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><p>🔥想强调的是，每个部件在我们创建了一个图形之后就有了<strong>类</strong>对应的<strong>实例</strong>（对类不熟悉的可以移步<a href="https://hscyber.github.io/posts/659ef075/">Python中的类</a>），通过查阅<a href="https://matplotlib.org/stable/api/index.html">文档</a>我们可以看到该对象的<strong>所有属性及方法</strong>，进一步地我们可以按需检索并实现我们对图形想要进行的<strong>任意设置或调整</strong>，下面开始介绍并举例：</p><h2 id="主要部件详解"><a class="markdownIt-Anchor" href="#主要部件详解"></a> 主要部件详解</h2><p>虽然有文档，但是我还是要熟悉一些常见的属性方法，以使我们能够<strong>快速出图</strong>，至于最终成图的细节则可以再细扣</p><p>另外，以下所有均来自<u>Matplotlib3.5官方文档</u>，一些参数细节暂不展开讲，在后续的总结中再慢慢铺开</p><h3 id="figure"><a class="markdownIt-Anchor" href="#figure"></a> Figure</h3><blockquote><p><code>class matplotlib.figure.Figure</code>, <a href="https://matplotlib.org/stable/api/figure_api.html#matplotlib.figure.Figure">类的属性及方法</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment"># 创建一个 fig实例 </span></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">5</span>, <span class="number">4</span>))</span><br><span class="line">fig, ax = plt.subplots()</span><br></pre></td></tr></table></figure><p>常用属性及方法/函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建时即可传参</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">matplotlib</span>.figure.Figure(figsize=<span class="literal">None</span>, dpi=<span class="literal">None</span>, facecolor=<span class="literal">None</span>, edgecolor=<span class="literal">None</span>, linewidth=<span class="number">0.0</span>, frameon=<span class="literal">None</span>, subplotpars=<span class="literal">None</span>, tight_layout=<span class="literal">None</span>, constrained_layout=<span class="literal">None</span>, *, layout=<span class="literal">None</span>, **kwargs)</span><br><span class="line"><span class="comment"># 添加子图</span></span><br><span class="line">.add_subplot()</span><br><span class="line">.add_axes()</span><br><span class="line">.subplots()</span><br><span class="line">.add_gridspec() <span class="comment">#复杂布局时使用</span></span><br><span class="line"><span class="comment"># 日期ticklabels自动调整，自动旋转以免叠盖</span></span><br><span class="line">.autofmt_xdate(bottom=<span class="number">0.2</span>, rotation=<span class="number">30</span>, ha=<span class="string">&#x27;right&#x27;</span>, which=<span class="string">&#x27;major&#x27;</span>)</span><br><span class="line"><span class="comment"># 添加色带</span></span><br><span class="line">.colorbar(mappable, cax=<span class="literal">None</span>, ax=<span class="literal">None</span>, use_gridspec=<span class="literal">True</span>, **kw)</span><br><span class="line"><span class="comment"># 放置图例</span></span><br><span class="line">.legend()</span><br><span class="line"><span class="comment"># 设置标题、文本</span></span><br><span class="line">.suptitle()</span><br><span class="line">.supxlabel(); .supylabel()</span><br><span class="line">.text(x, y, s, fontdict=<span class="literal">None</span>, **kwargs)</span><br><span class="line"><span class="comment"># 保存，常用，常用设置会在另一篇文章展开</span></span><br><span class="line">.savefig(fname, *, dpi=<span class="string">&#x27;figure&#x27;</span>, <span class="built_in">format</span>=<span class="literal">None</span>, metadata=<span class="literal">None</span>,</span><br><span class="line">        bbox_inches=<span class="literal">None</span>, pad_inches=<span class="number">0.1</span>,</span><br><span class="line">        facecolor=<span class="string">&#x27;auto&#x27;</span>, edgecolor=<span class="string">&#x27;auto&#x27;</span>,</span><br><span class="line">        backend=<span class="literal">None</span>, **kwargs)</span><br><span class="line"><span class="comment"># 设置各种属性，可以一次性设置多个参数，详见文档</span></span><br><span class="line">.<span class="built_in">set</span>(*...)</span><br><span class="line">.set_label(s)</span><br><span class="line">.set_alpha(alpha)</span><br><span class="line">.set_constrained_layout(constrained)</span><br><span class="line">.set_constrained_layout_pads(*, w_pad=<span class="literal">None</span>, h_pad=<span class="literal">None</span>, wspace=<span class="literal">None</span>, hspace=<span class="literal">None</span>)</span><br><span class="line">.set_dpi(); .set_edgecolor; .set_facecolor()...</span><br><span class="line"><span class="comment"># 获取</span></span><br><span class="line">.gca()  <span class="comment">#当前axes</span></span><br><span class="line">.get_axes()</span><br><span class="line">.get_children()</span><br><span class="line">.get_edgecolor(); .get_facecolor()</span><br><span class="line">.get_figheight(); .get_figwidth()</span><br></pre></td></tr></table></figure><h3 id="axes-绘图区"><a class="markdownIt-Anchor" href="#axes-绘图区"></a> 🔥Axes-绘图区</h3><blockquote><p><code>class matplotlib.axes.Axes</code>，<a href="https://matplotlib.org/stable/api/axes_api.html#the-axes-class">类的属性及方法</a></p></blockquote><p>创建，有很多种方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#常用</span></span><br><span class="line">fig, ax = plt.subplots(ncols=<span class="number">2</span>, nrows=<span class="number">3</span>, figsize=(<span class="number">12</span>,<span class="number">8</span>), sharex=<span class="literal">True</span>)</span><br><span class="line">axs[<span class="number">2</span>, <span class="number">0</span>].plot([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]) <span class="comment">#在第三行第一列绘图</span></span><br><span class="line">ax_list = ax.flatten() <span class="comment">#可以遍历获取各个axes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一张图,一个axes,</span></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">10</span>, <span class="number">8</span>))</span><br><span class="line">ax = fig.add_subplot(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, aspect=<span class="number">1</span>)<span class="comment"># aspect是xy横纵比</span></span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>, aspect=<span class="number">1</span>)</span><br><span class="line"><span class="comment">#创建两个axes,一行两列</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax1,ax2 = fig.add_subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, aspect=<span class="number">1</span>),fig.add_subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, aspect=<span class="number">1</span>)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment">#创建两个axes,两行一列</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax1,ax2 = fig.add_subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, aspect=<span class="number">1</span>),fig.add_subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, aspect=<span class="number">1</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建共享x、y轴的axes，左右双图</span></span><br><span class="line">axes.twinx() </span><br><span class="line">axes.twiny()</span><br><span class="line">.sharex()<span class="comment"># 也可以手动设置/绑定axes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 大小不一多子图的复杂布局，使用gridspec，具体查阅文档</span></span><br><span class="line">fig = plt.figure(constrained_layout=<span class="literal">True</span>)</span><br><span class="line">gs = fig.add_gridspec(<span class="number">3</span>, <span class="number">3</span>) <span class="comment">#初始九个图</span></span><br><span class="line">f_ax1 = fig.add_subplot(gs[<span class="number">0</span>, :]) <span class="comment">#合并了第一行的三个图，现在变成7张图</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>绘图（快速绘图）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">.plot() <span class="comment">#折线图</span></span><br><span class="line">.scatter() <span class="comment">#散点图</span></span><br><span class="line">.bar() <span class="comment">#柱状图</span></span><br><span class="line">.pie() <span class="comment">#饼图</span></span><br><span class="line">.hist() <span class="comment">#直方图</span></span><br><span class="line">.boxplot() <span class="comment"># 箱线图</span></span><br><span class="line">.hexbin(); .hist2d() <span class="comment">#二维直方图，√大量数据的相关性展示可用</span></span><br><span class="line">.stackplot() <span class="comment">#堆积柱状图</span></span><br><span class="line">.violinplot() <span class="comment">#小提琴图</span></span><br><span class="line">.imshow() <span class="comment">#绘制图片，二维矩阵栅格</span></span><br><span class="line"><span class="comment"># ...接口很多，还可以绘制洋流图、等高线、频谱图等</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制x y辅助线</span></span><br><span class="line">.vlines() <span class="comment">#竖线</span></span><br><span class="line">.hlines() <span class="comment">#横线</span></span><br><span class="line"><span class="comment"># 水平填充、垂直填充、任意填充</span></span><br><span class="line">.fill_between()</span><br><span class="line">.fill_betweenx()</span><br><span class="line">.fill()</span><br></pre></td></tr></table></figure><p>添加注释</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.annotate() <span class="comment">#添加注释</span></span><br><span class="line">.text() <span class="comment">#添加注释</span></span><br><span class="line">.secondary_xaxis() <span class="comment">#添加水平轴；可以实现上下双刻度线，具体见文档</span></span><br><span class="line">.secondary_yaxis() <span class="comment">#添加垂直边；可以实现左右双刻度线</span></span><br><span class="line">.arrow() <span class="comment">#添加箭头</span></span><br><span class="line">.inset_axes() <span class="comment">#添加注释，插入子图</span></span><br><span class="line">.table() <span class="comment">#添加注释</span></span><br></pre></td></tr></table></figure><p>要素属性设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">.set_xlim(); .get_xlim()<span class="comment"># 设置显示的范围，有set一般都有get</span></span><br><span class="line">.set_ylim()</span><br><span class="line">.set_xbound(); .set_ybound()<span class="comment"># 设置上下界</span></span><br><span class="line">.set_xlabel();.set_ylabel() <span class="comment">#设置标签</span></span><br><span class="line"></span><br><span class="line">.set_title() <span class="comment">#设置标题</span></span><br><span class="line">.set_xticks(); y... <span class="comment">#设置刻度值</span></span><br><span class="line">.set_xticklabels() <span class="comment">#设置刻度标签</span></span><br><span class="line">.minorticks_off(); .minorticks_on() <span class="comment">#次刻度的显示设置</span></span><br><span class="line">.ticklabel_format() <span class="comment">#格式化labels，如可以设置科学计数法显示</span></span><br><span class="line">.tick_params() <span class="comment"># 各种参数包括网格线等的设置</span></span><br><span class="line">.locator_params() <span class="comment">#设置主刻度线，高级自定义</span></span><br><span class="line">.set_position() <span class="comment">#设置图像在图中的位置，比如可以设置绘图左下角起点</span></span><br><span class="line"></span><br><span class="line">.set_xscale() <span class="comment">#设置刻度变换</span></span><br><span class="line">.set_yscale()</span><br><span class="line">.set_xmargin() <span class="comment">#设置绘制图形距离边/spines的距离,变相裁剪</span></span><br><span class="line">.set_ymargin() </span><br><span class="line">.set_aspect() <span class="comment">#设置轴缩放的横纵比</span></span><br><span class="line"></span><br><span class="line">.legend() <span class="comment">#设置图例</span></span><br><span class="line">h, l = ax.get_legend_handles_labels() <span class="comment">#获取图例句柄及标签</span></span><br><span class="line">.invert_xaxis();.invert_yaxis() <span class="comment">#设置轴的增大方向</span></span><br></pre></td></tr></table></figure><p>外观开关设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 隐藏</span></span><br><span class="line">.set_axis_off()</span><br><span class="line">.set_axis_on()</span><br><span class="line">.grid()</span><br><span class="line">.get_facecolor()</span><br><span class="line">.set_facecolor()</span><br><span class="line">.get_xaxis() <span class="comment">#获取XAxis实例</span></span><br><span class="line">.get_yaxis()</span><br><span class="line"><span class="comment"># 隐藏轴及标签</span></span><br><span class="line">ax.get_xaxis().set_visible(<span class="literal">False</span>)</span><br><span class="line">ax.get_yaxis().set_visible(<span class="literal">False</span>)</span><br><span class="line">ax.get_xaxis().set_ticks([])</span><br><span class="line">ax.get_yaxis().set_ticks([])</span><br><span class="line">ax.xaxis.set_ticklabels([])</span><br><span class="line">ax.yaxis.set_ticklabels([])</span><br></pre></td></tr></table></figure><p>元素添加及参考系变换等，我们可以自行创建任意的图像然后添加到axes中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.add_artist()</span><br><span class="line">.add_child_axes()</span><br><span class="line">.add_collection()</span><br><span class="line">.add_image()</span><br><span class="line">.add_line()</span><br><span class="line">.add_patch()</span><br><span class="line">.add_table()</span><br><span class="line"><span class="comment"># 轴的标准化坐标0-1和实际坐标的变换可能用到，具体用法在另一篇展开</span></span><br><span class="line">.get_xaxis_transform</span><br><span class="line">.get_yaxis_transform</span><br></pre></td></tr></table></figure><h3 id="spines-边框"><a class="markdownIt-Anchor" href="#spines-边框"></a> Spines-边框</h3><blockquote><p><code>class matplotlib.spines.Spine</code>，<a href="https://matplotlib.org/stable/api/spines_api.html">类的属性及方法</a></p></blockquote><p>属性设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取和设置显示/隐藏边框</span></span><br><span class="line">ax.spines[<span class="string">&#x27;top&#x27;</span>].set_visible(<span class="literal">False</span>)</span><br><span class="line">ax.spines.top.set_visible(<span class="literal">False</span>)</span><br><span class="line">ax.spines[[<span class="string">&#x27;top&#x27;</span>, <span class="string">&#x27;right&#x27;</span>]].set_visible(<span class="literal">False</span>)</span><br><span class="line">ax.spines[:].set_visible(<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 其他</span></span><br><span class="line">.set_bounds(low=<span class="literal">None</span>, high=<span class="literal">None</span>)</span><br><span class="line">.set_color(c)  <span class="comment"># 设置颜色</span></span><br><span class="line">.set_position(position)<span class="comment">#常用，设置位置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更改边界线的形状，实际上axes依旧是矩形</span></span><br><span class="line">.set_patch_circle() <span class="comment"># 设置为圆形</span></span><br><span class="line">set_patch_arc(center, radius, theta1, theta2)</span><br></pre></td></tr></table></figure><h3 id="text-文本"><a class="markdownIt-Anchor" href="#text-文本"></a> Text-文本</h3><blockquote><p><code>class matplotlib.text.Text</code>，<a href="https://matplotlib.org/stable/api/text_api.html">类的属性及方法</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class matplotlib.text.Text(x=0, y=0, text=&#x27;&#x27;, color=None, ...)</span><br><span class="line"># 先添加文本</span><br><span class="line">text = ax.text(s = &quot;注释&quot;,x,y,c = &#x27;r&#x27;...)# 可以通过这样的方式获取文本示例再设置属性</span><br><span class="line"># 批量设置</span><br><span class="line">.set(*, agg_filter=&lt;UNSET&gt;, alpha=&lt;UNSET&gt;, animated=&lt;UNSET&gt;,...)</span><br></pre></td></tr></table></figure><p>属性具体设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">.set_text(s) <span class="comment">#设置字的内容 </span></span><br><span class="line">.set_position((x,y))<span class="comment">#设置字的位置</span></span><br><span class="line">.set_x(x)</span><br><span class="line">.set_bbox(rectprops) <span class="comment">#设置字体外边框</span></span><br><span class="line">.set_color(color); .set_c(color)</span><br><span class="line"><span class="comment"># 字体及大小</span></span><br><span class="line">.set_font(fp); .set_fontproperties()</span><br><span class="line">.set_family.(); .set_fontfamily()</span><br><span class="line">.set_fontsize(fontsize)</span><br><span class="line"><span class="comment"># 设置加粗倾斜等</span></span><br><span class="line">.set_fontstyle(fontstyle);<span class="comment">#设置斜体&#123;&#x27;normal&#x27;, &#x27;italic&#x27;, &#x27;oblique&#x27;&#125;</span></span><br><span class="line">.set_fontweight(weight) <span class="comment">#字体粗细，&#123;a numeric value in range 0-1000, &#x27;ultralight&#x27;, &#x27;light&#x27;, &#x27;normal&#x27;, &#x27;regular&#x27;, &#x27;book&#x27;, &#x27;medium&#x27;, &#x27;roman&#x27;, &#x27;semibold&#x27;, &#x27;demibold&#x27;, &#x27;demi&#x27;, &#x27;bold&#x27;, &#x27;heavy&#x27;, &#x27;extra bold&#x27;, &#x27;black&#x27;&#125;</span></span><br><span class="line"><span class="comment"># 对齐方式</span></span><br><span class="line">.set_ha(align); </span><br><span class="line">.set_horizontalalignment(align)<span class="comment"># align&#123;&#x27;center&#x27;, &#x27;right&#x27;, &#x27;left&#x27;&#125;</span></span><br><span class="line"><span class="comment"># 旋转角度</span></span><br><span class="line">.set_rotation(s) <span class="comment">#float or &#123;&#x27;vertical&#x27;, &#x27;horizontal&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 行间距，默认1.2</span></span><br><span class="line">.set_linespacing(spacing)</span><br><span class="line"><span class="comment"># 数学公式，生效的前提是未设置全局Tex,(usetex=True).</span></span><br><span class="line">.set_math_fontfamily(fontfamily)</span><br><span class="line">.set_usetex(usetex=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">.update(kwargs) <span class="comment">#dict，传入字典更新其属性</span></span><br><span class="line">.update_from(other)</span><br></pre></td></tr></table></figure><h2 id="后续"><a class="markdownIt-Anchor" href="#后续"></a> 后续</h2><blockquote><p>待办</p></blockquote><ol><li>绘图逻辑与思路</li><li>Matplotlib绘图初始设置模板（包含风格、字体等等的初始化）</li><li>Matplotlib图片输出设置，空间占用与dpi的权衡……</li><li>绘图布局详解及案例</li><li>色彩及色带详解及案例</li><li>时间序列刻度详解及案例</li><li>文本及注释详解</li><li>其他绘图库了解及探索</li><li>地图绘制……</li><li>……</li></ol>]]></content>
      
      
      <categories>
          
          <category> Python可视化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Matplotlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔随记-2022/520</title>
      <link href="/posts/29d41ed/"/>
      <url>/posts/29d41ed/</url>
      
        <content type="html"><![CDATA[<p>今天是2022年5月20日，加了一天的班赶材料，这会闲下来，贴一首诗…</p><p>When I started loving myself, Charlie Chaplin</p><span id="more"></span><h2 id="when-i-started-loving-myself"><a class="markdownIt-Anchor" href="#when-i-started-loving-myself"></a> When I started loving myself</h2><h2 id="当我开始爱自己"><a class="markdownIt-Anchor" href="#当我开始爱自己"></a> 当我开始爱自己</h2><blockquote><p>The poem below was written by Charlie Chaplin on his 70th birthday,  April 16, 1959. <a href="https://charterforcompassion.org/attributes-of-compassion/when-i-started-loving-myself">参考</a></p></blockquote><p>When I started loving myself<br>I understood that I’m always and at any given opportunity<br>in the right place at the right time.<br>And I understood that all that happens is right –<br>from then on I could be calm.<br>Today I know: It’s called TRUST.</p><p>When I started to love myself I understood how much it can offend somebody<br>When I tried to force my desires on this person,<br>even though I knew the time is not right and the person was not ready for it,<br>and even though this person was me.<br>Today I know: It’s called LETTING GO</p><p>When I started loving myself<br>I could recognize that emotional pain and grief<br>are just warnings for me to not live against my own truth.<br>Today I know: It’s called AUTHENTICALLY BEING.</p><p>When I started loving myself<br>I stopped longing for another life<br>and could see that everything around me was a request to grow.<br>Today I know: It’s called MATURITY.</p><p>When I started loving myself<br>I stopped depriving myself of my free time<br>and stopped sketching further magnificent projects for the future.<br>Today I only do what’s fun and joy for me,<br>what I love and what makes my heart laugh,<br>in my own way and in my tempo.<br>Today I know: it’s called HONESTY.</p><p>When I started loving myself<br>I escaped from all what wasn’t healthy for me,<br>from dishes, people, things, situations<br>and from everything pulling me down and away from myself.<br>In the beginning I called it the “healthy egoism”,<br>but today I know: it’s called SELF-LOVE.</p><p>When I started loving myself<br>I stopped wanting to be always right<br>thus I’ve been less wrong.<br>Today I’ve recognized: it’s called HUMBLENESS.</p><p>When I started loving myself<br>I refused to live further in the past<br>and worry about my future.<br>Now I live only at this moment where EVERYTHING takes place,<br>like this I live every day and I call it CONSCIOUSNESS.</p><p>When I started loving myself<br>I recognized, that my thinking<br>can make me miserable and sick.<br>When I requested for my heart forces,<br>my mind got an important partner.<br>Today I call this connection HEART WISDOM.</p><p>We do not need to fear further discussions,<br>conflicts and problems with ourselves and others<br>since even stars sometimes bang on each other<br>and create new worlds.<br>Today I know: THIS IS LIFE!</p>]]></content>
      
      
      <categories>
          
          <category> 生活漫步 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【Python可视化相关笔记汇总】</title>
      <link href="/posts/5144b1ce/"/>
      <url>/posts/5144b1ce/</url>
      
        <content type="html"><![CDATA[<center>关于Python可视化的内容，持续更新...</center><span id="more"></span><h2 id="matplotlib"><a class="markdownIt-Anchor" href="#matplotlib"></a> Matplotlib</h2><h3 id="基础篇"><a class="markdownIt-Anchor" href="#基础篇"></a> 基础篇</h3><p><a href="https://hscyber.github.io/posts/8dfff56a/">matplotlib基础(1)：图的组成元素</a></p><p><a href="https://hscyber.github.io/posts/5524eff4/">matplotlib基础(2)：绘图逻辑与输出尺寸/格式</a></p><p><a href="https://hscyber.github.io/posts/459b5ff7/">matplotlib基础(3)：图片存储常用格式及参数设置</a></p><p><a href="https://hscyber.github.io/posts/152b5c56/">matplotlib基础(杂)：边框spines及刻度ticks/labels属性设置及隐藏</a></p>]]></content>
      
      
      <categories>
          
          <category> Python可视化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Matplotlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅析Python中的类、模块、包</title>
      <link href="/posts/659ef075/"/>
      <url>/posts/659ef075/</url>
      
        <content type="html"><![CDATA[<p>类和继承是面向对象编程<a href="https://en.wikipedia.org/wiki/Object-oriented_programming">(OOP)</a>中的重要概念，Python中的大量模块等也都是基于类实现的；模块和包是Python可拓展性和便捷性的支撑，也是我们接触最多的内容。了解Python中的类、模块和包一方面有助于强化写代码时候的<strong>逻辑</strong>（更清楚地知道自己写的代码-每一步是在干嘛）、提高效率，同时便于我们更好地<strong>读懂</strong>并复制粘贴别人的代码。本文主要内容：</p><ol><li>Python中的<strong>模块(module)<strong>和</strong>包(package)</strong></li><li>Python中如何定义<strong>类(class)</strong></li><li>什么时候需要类？</li></ol><span id="more"></span><h2 id="模块和包"><a class="markdownIt-Anchor" href="#模块和包"></a> 模块和包</h2><blockquote><p><a href="https://docs.python.org/3/tutorial/modules.html">官方文档的介绍——Modules in python</a></p></blockquote><p><strong>模块</strong>：一个<code>.py文件</code>就构成了一个模块，模块名即为去掉后缀之后的名。</p><p><strong>包</strong>：一个包含<code>__init__.py</code>文件+若干子包+若干模块的<strong>文件夹</strong>，文件夹的名字即为<strong>包名</strong>，第一个文件是必须（该文件的作用即是为了防止系统将含.py文件的文件夹均识别为包）,因此有些时候github上下载别人写好的小工具包可以直接放在文件夹下import使用而不需要install。</p><ul><li>模块包含内置模块、标准模块以及第三方模块；包也包括内置的包、第三方包</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在交互窗口中运行，内置的模块路径在c拓展内</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> time,os,datetime,pandas</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>time</span><br><span class="line">&lt;module <span class="string">&#x27;time&#x27;</span> (built-<span class="keyword">in</span>)&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os</span><br><span class="line">&lt;module <span class="string">&#x27;os&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;D:\\Miniconda3\\lib\\os.py&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>datetime</span><br><span class="line">&lt;module <span class="string">&#x27;datetime&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;D:\\Miniconda3\\lib\\datetime.py&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pandas</span><br><span class="line">&lt;module <span class="string">&#x27;pandas&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;D:\\Miniconda3\\lib\\site-packages\\pandas\\__init__.py&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><ul><li>从<a href="https://www.python.org/downloads/source/">官网</a>下载初始Python的源码做一个简单的了解：</li></ul><img src="/posts/659ef075/image-20220518132724603.png" class alt="libs"><p>下载完成后进入文件夹：<u>A:\Python-3.10.4\Lib</u>，可以看到其中只有两种文件</p><ol><li><strong>文件夹即包</strong>，熟悉的如：json、logging、multiprocessing、urllib</li><li><strong>py文件，即脚本/模块</strong>，熟悉的如：<a href="http://os.py">os.py</a>、<a href="http://re.py">re.py</a>、<a href="http://zipfile.py">zipfile.py</a></li><li>一个<strong>特殊的空文件夹，site-packages</strong>，打开其中有一个文本描述，写的是：本目录用于存放第三方的包（通过pypi/conda安装的包即存放在这）</li></ol><p>所以，即便我们不安装额外的包，也可以使用内置的模块及标准库中的模块与包：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time, os, re</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> pool</span><br></pre></td></tr></table></figure><p>Python的巨大优势就在于可拓展性和便捷，有大量的第三方包可供使用。另外，除了安装第三方包、我们也可以自己写模块和包用于调用。</p><p><u>tip：自己写的py文件放在目录下可以直接import，然后使用其中的<strong>变量及函数</strong>。通常该文件写完需要调试，这时候可以将运行的代码放在</u><code>if '__main__'== __main__:</code> <u>之下，这样在其他脚本import调用该”模块时”也不会执行运行的代码。</u></p><h2 id="定义类"><a class="markdownIt-Anchor" href="#定义类"></a> 定义类</h2><p>构造函数：</p><h2 id="何时需要类"><a class="markdownIt-Anchor" href="#何时需要类"></a> 何时需要类？</h2><blockquote><p>参考：<a href="https://stackoverflow.com/questions/33072570/when-should-i-be-using-classes-in-python">使用类的原因-讨论</a></p></blockquote><blockquote><p>通常，使用Python的内置及第三方模块可以完成我们的工作，并不需要自定义类，但随着工作量的增大和复杂化，或许会有这样的需求，以pandas为例</p></blockquote><p>结合实际讨论，</p><ol><li>属性/结果的保存和即时访问：当我们通过<code>pandas.read_csv()</code>读取一个文件之后，得到一个实例化的对象<code>dataframe</code>，接下来我们可以通过columns,names,head,shape等参数访问其<strong>属性</strong>，即对象实例化之后我们可以使用和追踪它的状态，就好像创建了一个list，而不只是调用了一个方法。</li><li>便于拓展和重用，可以继承，即方便别人用和自己调用，比如他人可以基于pandas开发geopandas等包，也即是依赖</li><li>结构清晰，好看，从各种包的api文档（如<a href="https://pandas.pydata.org/pandas-docs/stable/reference/frame.html">pandas</a>，<a href="https://matplotlib.org/stable/gallery/index.html">matplotlib</a>，<a href="https://numpy.org/doc/stable/reference/index.html">numpy</a>，<a href="https://geopandas.org/en/latest/docs/reference.html">geopandas</a>……）我们可以看看，其组织结构清楚，便于查阅……</li><li>……</li></ol><p><strong>何时使用？</strong></p><p>（虽然一直在享受着类的便捷，但个人还没遇到一定得用类的情况hh）</p><ul><li>当工作简单或者只是实现一个或者多个函数时，不需要。类的重要一点就是属性和方法组装在了一起，如果只是一个一次性的处理脚本不需要类</li><li>编写开源包和模块时</li><li>工作量比较大，代码组织感觉比较乱时，可以考虑（理理逻辑，通过多个函数/脚本也可以写出结构清晰的脚本）。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 类 </tag>
            
            <tag> 模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python中的时间格式(1)：详细版</title>
      <link href="/posts/a0dd2ef9/"/>
      <url>/posts/a0dd2ef9/</url>
      
        <content type="html"><![CDATA[<p>时间格式是一类较特殊也十分普遍的格式，大量数据都含有时间信息，在实际的学习中会经常接触。最近有创建、处理或转换时间序列数据的需求，因此做一个梳理并汇总以便在后续遇到相关处理时可以拿来即用，还有另一个简化的<a href="https://hscyber.github.io/posts/13994161">速查版</a>。本文主要涉及内容：</p><ol><li>python内置模块<strong>time</strong>及 <strong>datetime</strong>的时间格式及处理</li><li><strong>Pandas</strong>时间格式的表达及常规处理</li></ol><span id="more"></span><h2 id="主要参考"><a class="markdownIt-Anchor" href="#主要参考"></a> 主要参考</h2><blockquote><p>不论是Python的内置模块还是第三方提供的模块，官网的文档都是很好的学习资源，尤其是想要了解地更深的时候或者debug的时候，</p></blockquote><ul><li><a href="https://strftime.org/">https://strftime.org/</a></li></ul><p>Python官方文档</p><ul><li><a href="https://docs.python.org/3.9/library/index.html">python标准库</a></li><li><a href="https://docs.python.org/3.9/library/time.html">time模块文档</a></li><li><a href="https://docs.python.org/3.9/library/time.html">datetime模块文档</a></li></ul><p>NumPy</p><ul><li><a href="https://numpy.org/doc/stable/reference/arrays.datetime.html">NumPy中的日期和时间</a></li><li><a href="https://numpy.org/doc/stable/reference/routines.datetime.html">时间转换函数</a></li></ul><p>Pandas，pandas主要处理表格型数据，因此实际中数据以时间序列存在</p><ul><li><a href="https://pandas.pydata.org/docs/user_guide/timeseries.html">时间序列相关处理函数</a></li><li><a href="https://pandas.pydata.org/docs/user_guide/timedeltas.html#">时间增量/差</a></li></ul><p>涉及Python模块和类、实例、属性及方法相关相关的概念可查阅此文<a href="https://hscyber.github.io/posts/659ef075/">Python中的类</a></p><p>！在实际中最常用的其实一般是datetime的部分功能（如下），此文将各模块功能列出，便于检索</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br></pre></td></tr></table></figure><hr><h2 id="内置模块time"><a class="markdownIt-Anchor" href="#内置模块time"></a> 内置模块time</h2><h3 id="表达格式"><a class="markdownIt-Anchor" href="#表达格式"></a> 表达格式</h3><ol><li><p><strong>数字</strong> &lt;‘float’&gt;，Unix时间戳：从epoch(1970年1月1日00:00:00 UTC)经过的秒数/偏移量，如631123200000表示&quot;1990-01-01 00:00:00&quot;</p></li><li><p><strong>时间元组</strong> &lt; ‘time.struct_time’&gt;（实际实现，给计算机看的）包含了一个时间的完整信息</p><ul><li>time.struct_time(tm_year=2022, tm_mon=5, tm_mday=11, tm_hour=2, tm_min=53, tm_sec=2, tm_wday=2, tm_yday=131, tm_isdst=0)</li></ul></li><li><p><strong>字符串</strong> &lt;‘str’&gt;（可读性强，给人看的）：如&quot;1990-01-01 00:00:00&quot;，“2018-01-01”，&quot;1998/01/01&quot;等</p></li></ol><h3 id="时间获取"><a class="markdownIt-Anchor" href="#时间获取"></a> 时间获取</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># print(&quot;获取计算机当前时间时间：&#123;0&#125;,数据类型：&#123;1&#125;&quot;.format(t, type(t)))</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">t = time.time()</span><br><span class="line"><span class="comment"># 1652701116.7288237,数据类型: &lt;class &#x27;float&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">t = time.ctime()</span><br><span class="line"><span class="comment"># Mon May 16 19:38:36 2022,数据类型：&lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">t = time.gmtime()</span><br><span class="line"><span class="comment"># time.struct_time(tm_year=2022, tm_mon=5, tm_mday=16, tm_hour=11, tm_min=38, tm_sec=36, tm_wday=0, tm_yday=136, tm_isdst=0),数据类型：&lt;class &#x27;time.struct_time&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">t = time.localtime() <span class="comment">#逆操作time.mktime()：可以将数字转换成元组</span></span><br><span class="line"><span class="comment">#同上 time.struct_time(tm..</span></span><br></pre></td></tr></table></figure><h3 id="单个时间转换strftimestrptime"><a class="markdownIt-Anchor" href="#单个时间转换strftimestrptime"></a> 单个时间转换(<code>strftime()+strptime()</code>)</h3><p>将时间元组转换为格式化字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t_struct = time.gmtime() <span class="comment">#创建时间元组</span></span><br><span class="line">t_string = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, t_struct)</span><br></pre></td></tr></table></figure><p>将字符串转换为时间元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t_string = <span class="string">&#x27;2022-05-16 13:16:15&#x27;</span></span><br><span class="line">t_struct = time.strptime(t_string,<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br></pre></td></tr></table></figure><p>所有格式化参数可以在此页面查找<a href="https://strftime.org/">strftime()</a><br>常用的如下（注意区分大小写）：</p><ul><li><code>%Y %m %d</code>: 2022-05-01, <code>%Y %-m %-d</code>: 2022-5-1,</li><li><code>%H %M %S</code>: 05:01:08, <code>%-H %-M %-S</code>: 5:1:8,</li><li><code>%x</code>:‘05/11/22’,</li><li><code>%X</code>:'‘02:49:06’,</li><li><code>%c</code>: ‘Wed May 11 02:49:36 2022’</li><li><code>%a</code>: Sun, <code>%A</code>: Sunday, <code>%W</code>:0-6,weekday</li><li><code>%b</code>: Jan, <code>%B</code>: January,</li><li>…</li><li><code>%z</code>: UTC offset in the form +HHMM or -HHMM.  “%z %Z”:‘+0800 中国标准时间’</li><li><code>%j</code>: 001, 002, …, 366,</li><li><code>%U</code> <code>%W</code>：周数，一年的第多少周，前者表示周日为第一天</li></ul><h3 id="其他函数"><a class="markdownIt-Anchor" href="#其他函数"></a> 其他函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 脚本运行时间计算</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">start_time = time.time()</span><br><span class="line">main()<span class="comment">#需要计时的代码</span></span><br><span class="line">end_time = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;脚本运行总时长:&#123;:.2f&#125; min&#x27;</span>.<span class="built_in">format</span>((end_time-start_time)/<span class="number">60</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;脚本运行总时长:&#123;:.2f&#125; h&#x27;</span>.<span class="built_in">format</span>((end_time-start_time)/<span class="number">3600</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 代码停顿3秒</span></span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="内置模块datetime"><a class="markdownIt-Anchor" href="#内置模块datetime"></a> 🔥内置模块datetime</h2><blockquote><p>time较为底层，一般用的不多，其他实际中主要用datetime<br>datetime是基于time包开发的包，datetime可以拆解为date和time两个部分。可以将这两个分开管理(datetime.date类，datetime.time类)，也可以将两者合在一起(datetime.datetime类)，datetime包还定义了时间间隔对象(timedelta)。</p></blockquote><h3 id="子类对象"><a class="markdownIt-Anchor" href="#子类对象"></a> 子类/对象</h3><p>类，这些类可以直接通过&quot;属性&quot;进行实例化对象，如datetime.date(2022, 5, 20)</p><ul><li><code>datetime.time</code>：独立于任何特定日期的理想化时间，包含属性: <u>hour, minute, second</u>, microsecond 和 tzinfo。<ul><li>属性的意思表明可以通过 .month .hour获取对象实例的属性值</li></ul></li><li><code>datetime.date</code>: 理想化的简单型日期, 属性: <u>year, month, and day</u>。</li><li><code>datetime.datetime</code>: 日期和时间的结合。属性：<u>year, month, day, hour, minute, second</u>, microsecond, and tzinfo.</li><li><code>datetime.timedelta</code>：表示两个 date 对象或 time 对象，或者 datetime 对象之间的<u>时间间隔</u>，精确到微秒。<ul><li>常用于时间之间的加减等操做</li></ul></li><li><code>datetime.tzinfo</code>：时区信息对象</li><li><code>datetime.timezone</code>：表示相对于UTC的偏移量</li></ul><p>这些类创建实例的<strong>共有属性</strong></p><ol><li>不可变</li><li>可哈希，即可以作为字典的键key</li><li>支持通过pickle模块进行高效封存，惯用pickle可以为实际工作带来诸多便利，见<a href>pickle使用-待更新</a></li><li>支持加减法，且涉及时间间隔及时间差等可以通过<strong>timedelta</strong>进行运算</li></ol><h3 id="date常用操作"><a class="markdownIt-Anchor" href="#date常用操作"></a> date常用操作</h3><blockquote><p>time的操作与之类似</p></blockquote><h4 id="获取创建时间"><a class="markdownIt-Anchor" href="#获取创建时间"></a> 获取/创建时间</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> date, timedelta</span><br><span class="line">today = date.today() <span class="comment">#输出 datetime.date(2022, 5, 16)</span></span><br><span class="line">year, month = today.year, today.month</span><br><span class="line"></span><br><span class="line">my_birthday = date(<span class="number">1998</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">time_to_birthday = <span class="built_in">abs</span>(my_birthday - today) <span class="comment"># datetime.timedelta(days=8901)</span></span><br></pre></td></tr></table></figure><p>UTC时间转北京时间：<code>time_bj = time_utc+ timedelta(hours=8)</code></p><h4 id="日期与字符串格式的转换"><a class="markdownIt-Anchor" href="#日期与字符串格式的转换"></a> 日期与字符串格式的转换</h4><p>将时间date转换为格式化字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> date</span><br><span class="line">t1 = date(<span class="number">2022</span>, <span class="number">1</span>, <span class="number">1</span>) </span><br><span class="line"><span class="comment">#  ISO 8601 格式 YYYY-MM-DD</span></span><br><span class="line">t_string = date.isoformat(t1) <span class="comment">#&#x27;2022-01-01&#x27;</span></span><br></pre></td></tr></table></figure><p>将字符串转换为日期date</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t1 = <span class="string">&#x27;2022-01-01&#x27;</span></span><br><span class="line">t_date = date.fromisoformat(t1) <span class="comment">#输出datetime.date(2022, 1, 1)</span></span><br></pre></td></tr></table></figure><ul><li><p>其他方法，时间替换<code>date.replace</code>(year=self.year, month=self.month, day=self.day)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">d = date(<span class="number">2022</span>, <span class="number">12</span>, <span class="number">31</span>)</span><br><span class="line"><span class="comment"># 时间替换</span></span><br><span class="line">d2 = d.replace(day=<span class="number">26</span>)</span><br><span class="line"><span class="comment">#返回一个 time.struct_time</span></span><br><span class="line">d3 = date.timetuple(d) </span><br><span class="line"><span class="comment"># 获取当前时间的字符串格式</span></span><br><span class="line">t = date.today()</span><br><span class="line">t.ctime()<span class="comment"># 等价于`time.ctime(time.mktime(d.timetuple()))`</span></span><br><span class="line"><span class="comment">#输出&#x27;Mon May 16 00:00:00 2022&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="datetime常用操作"><a class="markdownIt-Anchor" href="#datetime常用操作"></a> 🔥datetime常用操作</h3><p>获取/创建时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, date, time, timezone</span><br><span class="line">datetime.now()   </span><br><span class="line">datetime.now(timezone.utc)</span><br><span class="line"><span class="comment"># 年月日等属性获取,date()</span></span><br><span class="line">t = datetime.now()</span><br><span class="line">year,month, udate = t.year, t.month, t.date()</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line"><span class="comment"># datetime.datetime(2022, 5, 16, 21, 10, 32, 304773)</span></span><br><span class="line"><span class="comment"># datetime.datetime(2022, 5, 16, 13, 10, 32, 306332, tzinfo=datetime.timezone.utc)</span></span><br></pre></td></tr></table></figure><p>时间合并</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, date, time</span><br><span class="line">d = date(<span class="number">2022</span>, <span class="number">5</span>, <span class="number">12</span>)</span><br><span class="line">t = time(<span class="number">1</span>, <span class="number">18</span>)</span><br><span class="line">dt = datetime.combine(d, t)</span><br></pre></td></tr></table></figure><p>时间与字符串的转换，参数与<code>time</code>模块类似</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字符串转时间</span></span><br><span class="line">dt = datetime.strptime(<span class="string">&quot;21/11/06 16:30&quot;</span>, <span class="string">&quot;%d/%m/%y %H:%M&quot;</span>)</span><br><span class="line"><span class="comment"># 时间转字符串</span></span><br><span class="line">t_str = dt.strftime(<span class="string">&quot;%Y-%m-%d %H:%M&quot;</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="pandas中的时间格式"><a class="markdownIt-Anchor" href="#pandas中的时间格式"></a> Pandas中的时间格式</h2><blockquote><p>pandas为表格，因此处理的一般为时间序列而非单个时间</p></blockquote><p>pandas中的时间格式主要为以下两类</p><ul><li>datetime (datetime64[ns])， 类比datetime</li><li>String/Object</li></ul><h3 id="创建序列"><a class="markdownIt-Anchor" href="#创建序列"></a> 创建序列</h3><blockquote><p>pd.date_range()</p></blockquote><ul><li>pandas.date_range(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, …)<a href="https://pandas.pydata.org/docs/reference/api/pandas.date_range.html">文档</a></li><li>参数说明<ul><li><code>start end</code>:起始日期</li><li><code>periods</code>:日期数量</li><li><code>freq</code>: 间隔，默认<code>D</code>,可以设<code>M</code>,<code>8H</code><a href="https://pandas.pydata.org/docs/user_guide/timeseries.html#timeseries-offset-aliases">详见</a></li><li><code>inclusive</code>：=‘both’,‘left’,‘right’，'neither’指定左右是否闭合，如生成某月份数据但不知道该月多少天，可以指定为left，右边写下月第一天</li></ul></li></ul><p>常用代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建序列， 可以直接接收</span></span><br><span class="line"><span class="comment"># 默认都是ISO 8601 格式 YYYY-MM-DD, &#x27;2018-01-01 03:00:00&#x27;</span></span><br><span class="line">df[<span class="string">&#x27;time&#x27;</span>] = pd.date_range(start=<span class="string">&#x27;1/1/2018&#x27;</span>, end=<span class="string">&#x27;1/08/2018&#x27;</span>, freq=<span class="string">&#x27;D&#x27;</span>) <span class="comment">#8天</span></span><br><span class="line">pd.date_range(start=<span class="string">&#x27;1/1/2018&#x27;</span>, end=<span class="string">&#x27;1/08/2018&#x27;</span>) <span class="comment">#8天</span></span><br><span class="line">pd.date_range(start=<span class="string">&#x27;1/1/2018&#x27;</span>, periods=<span class="number">8</span>) <span class="comment">#8天</span></span><br><span class="line">pd.date_range(start=<span class="string">&#x27;1/1/2018&#x27;</span>, periods=<span class="number">8</span>, freq=<span class="string">&#x27;2M&#x27;</span>)  <span class="comment">#8天，两天之间间隔为两个月</span></span><br><span class="line">pd.date_range(start=<span class="string">&#x27;2018-01-01&#x27;</span>, end=<span class="string">&#x27;2018-02-01&#x27;</span>, freq=<span class="string">&#x27;3H&#x27;</span>)</span><br><span class="line">pd.date_range(start=<span class="string">&#x27;2017-01-01&#x27;</span>, end=<span class="string">&#x27;2017-02-01&#x27;</span>, closed=<span class="string">&#x27;left&#x27;</span>) <span class="comment">#创建指定月份的日期范围pandas&lt;1.4版本</span></span><br><span class="line">pd.date_range(start=<span class="string">&#x27;2017-01-01&#x27;</span>, end=<span class="string">&#x27;2017-02-01&#x27;</span>, inclusive=<span class="string">&#x27;left&#x27;</span>) <span class="comment">#创建指定月份的日期范围pandas&gt;1.4版本</span></span><br></pre></td></tr></table></figure><h3 id="时间序列格式转换"><a class="markdownIt-Anchor" href="#时间序列格式转换"></a> 🔥时间序列格式转换</h3><p><strong>datetime→string</strong>:<code>astype()+strftime()</code>，输入的列为datetime64[ns]类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># astype()</span></span><br><span class="line">df[<span class="string">&#x27;time_str&#x27;</span>]=df[<span class="string">&#x27;time&#x27;</span>].astype(<span class="built_in">str</span>)</span><br><span class="line"><span class="comment"># strftime()</span></span><br><span class="line">df[<span class="string">&#x27;time_str&#x27;</span>] = df[<span class="string">&#x27;time&#x27;</span>].dt.strftime(<span class="string">&#x27;%m/%d/%Y&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>string→datetime</strong>: <code>to_datetime</code>，输入的列为String或Object类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&#x27;time&#x27;</span>]=pd.to_datetime(df[<span class="string">&#x27;time_str&#x27;</span>].astype(<span class="built_in">str</span>), <span class="built_in">format</span>=<span class="string">&#x27;%Y/%m/%d&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="时间合并与拆分"><a class="markdownIt-Anchor" href="#时间合并与拆分"></a> 时间合并与拆分</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 合并</span></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&#x27;year&#x27;</span>: [<span class="number">2015</span>, <span class="number">2016</span>],<span class="string">&#x27;month&#x27;</span>: [<span class="number">2</span>, <span class="number">3</span>],<span class="string">&#x27;day&#x27;</span>: [<span class="number">4</span>, <span class="number">5</span>],<span class="string">&#x27;hour&#x27;</span>:[<span class="number">10</span>,<span class="number">20</span>]&#125;)</span><br><span class="line">df[<span class="string">&#x27;date&#x27;</span>] = pd.to_datetime(df[[<span class="string">&#x27;year&#x27;</span>,<span class="string">&#x27;month&#x27;</span>,<span class="string">&#x27;day&#x27;</span>]])</span><br><span class="line">df[<span class="string">&#x27;datetime&#x27;</span>] = pd.to_datetime(df.date) + pd.to_timedelta(df.hour, unit=<span class="string">&#x27;h&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#拆分/转换示例</span></span><br><span class="line">df[<span class="string">&#x27;day2&#x27;</span>] = df[<span class="string">&#x27;time&#x27;</span>].dt.strftime(<span class="string">&#x27;%D&#x27;</span>)</span><br><span class="line">df[<span class="string">&#x27;hour2&#x27;</span>] = df[<span class="string">&#x27;time&#x27;</span>].dt.strftime(<span class="string">&#x27;%H&#x27;</span>)</span><br><span class="line">df[<span class="string">&#x27;date2&#x27;</span>] = df[<span class="string">&#x27;time&#x27;</span>].dt.strftime(<span class="string">&#x27;%x&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="基于时间筛选数据"><a class="markdownIt-Anchor" href="#基于时间筛选数据"></a> 基于时间筛选数据</h3><blockquote><p><code>&amp;</code>与;<code>|</code>或</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># df[&#x27;time&#x27;]为时间格式：</span></span><br><span class="line">df2 = df.loc[(df.time &gt; pd.datetime(<span class="number">2017</span>,<span class="number">8</span>,<span class="number">23</span>,<span class="number">0</span>)) &amp; (df.time &lt; pd.datetime(<span class="number">2017</span>,<span class="number">8</span>,<span class="number">27</span>,<span class="number">0</span>))]</span><br><span class="line">df2 = df.loc[(df.time &lt; pd.datetime(<span class="number">2017</span>,<span class="number">8</span>,<span class="number">23</span>,<span class="number">0</span>)) | (df.time &gt; pd.datetime(<span class="number">2017</span>,<span class="number">8</span>,<span class="number">27</span>,<span class="number">0</span>))]</span><br><span class="line"><span class="comment"># df[&#x27;time&#x27;]为字符串：</span></span><br><span class="line">df2 = df.loc[(df.time &gt; <span class="string">&#x27;2017-08-20 00:00:00&#x27;</span>) &amp; (df.time &lt; <span class="string">&#x27;2017-08-26 00:00:00&#x27;</span>)]</span><br></pre></td></tr></table></figure><h3 id="其他操作"><a class="markdownIt-Anchor" href="#其他操作"></a> 其他操作</h3><blockquote><p>待补充<br>……</p></blockquote><p>有了以上的基础，在实际中可以灵活按需涉及方案排列组合等实现想要的结果……</p>]]></content>
      
      
      <categories>
          
          <category> Python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 时间格式 </tag>
            
            <tag> datetime </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python基础相关笔记汇总】</title>
      <link href="/posts/feb4247b/"/>
      <url>/posts/feb4247b/</url>
      
        <content type="html"><![CDATA[<center>持续更新……Python环境及管理配置，基础模块使用等</center><span id="more"></span><h3 id="python环境"><a class="markdownIt-Anchor" href="#python环境"></a> Python环境</h3><p><a href="https://hscyber.github.io/posts/c5ac1642/">Python环境(1)：基础知识</a></p><p><a href="https://hscyber.github.io/posts/9089f596/">Python环境(2)：安装及配置</a></p><p><a href="https://hscyber.github.io/posts/42743416/">Python环境(3)：环境及包管理Conda+pypi</a></p><p><a href="https://hscyber.github.io/posts/911c717a/">Python环境(4)：环境迁移及共享</a></p><p><a href="https://hscyber.github.io/posts/364976c7/">Python环境(杂)：conda update CondaHTTPError</a></p><h3 id="基础操作"><a class="markdownIt-Anchor" href="#基础操作"></a> 基础操作</h3><p><a href="https://hscyber.github.io/posts/659ef075/">浅析Python中的类、模块、包</a></p><p><a href="https://hscyber.github.io/posts/a0dd2ef9/">Python中的时间格式(1)：详细版</a></p><p><a href="https://hscyber.github.io/posts/13994161/">Python中的时间格式(2)：速查版</a></p><p><a href="https://hscyber.github.io/posts/3c868742/">Python处理Json文件</a></p><p><a href="https://hscyber.github.io/posts/da405e24/">正则表达式re模块用法</a></p><p><a href="https://hscyber.github.io/posts/290b74f/">Python文件路径及目录批处理</a></p><h3 id="python性能"><a class="markdownIt-Anchor" href="#python性能"></a> Python性能</h3><p><a href="https://hscyber.github.io/posts/4b434785/">python性能(1)：multiprocessing多进程</a></p><p><a href="https://hscyber.github.io/posts/a8ff5b9/">python性能(2)：大文件处理思路</a></p>]]></content>
      
      
      <categories>
          
          <category> Python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo图片自动上传同步测试</title>
      <link href="/posts/2852138d/"/>
      <url>/posts/2852138d/</url>
      
        <content type="html"><![CDATA[<p>typora图片插入格式设置 <code>![](相对文件夹/图片名)</code></p><span id="more"></span><img src="/posts/2852138d/WallpaperStudio10-19184.jpg" class alt="WallpaperStudio10-19184"><img src="/posts/2852138d/test.png" class alt="image">]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156/"/>
      <url>/posts/4a17b156/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="command"><a class="markdownIt-Anchor" href="#command"></a> command</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
