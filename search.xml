<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>A image test post</title>
    <url>/posts/2852138d/</url>
    <content><![CDATA[<p>typora图片插入格式设置 <code>![](相对文件夹/图片名)</code></p>
<img src="/posts/2852138d/test.png" class alt="image">



]]></content>
      <categories>
        <category>Hexo框架</category>
      </categories>
  </entry>
  <entry>
    <title>浅析Python中的类、模块、包</title>
    <url>/posts/659ef075/</url>
    <content><![CDATA[<p>类和继承是面向对象编程<a href="https://en.wikipedia.org/wiki/Object-oriented_programming">(OOP)</a>中的重要概念，Python中的大量模块等也都是基于类实现的；模块和包是Python可拓展性和便捷性的支撑，也是我们接触最多的内容。了解Python中的类、模块和包一方面有助于强化写代码时候的<strong>逻辑</strong>（更清楚地知道自己写的代码-每一步是在干嘛）、提高效率，同时便于我们更好地<strong>读懂</strong>并复制粘贴别人的代码。本文主要内容：</p>
<ol>
<li>Python中的<strong>模块(module)<strong>和</strong>包(package)</strong></li>
<li>Python中如何定义<strong>类(class)</strong></li>
<li>什么时候需要类？</li>
</ol>
<span id="more"></span>

<h2 id="模块和包"><a href="#模块和包" class="headerlink" title="模块和包"></a>模块和包</h2><blockquote>
<p><a href="https://docs.python.org/3/tutorial/modules.html">官方文档的介绍——Modules in python</a></p>
</blockquote>
<p><strong>模块</strong>：一个**.py文件**就构成了一个模块，模块名即为去掉后缀之后的名。</p>
<p><strong>包</strong>：一个包含<code>__init__.py</code>文件+若干子包+若干模块的<strong>文件夹</strong>，文件夹的名字即为<strong>包名</strong>，第一个文件是必须（该文件的作用即是为了防止系统将含.py文件的文件夹均识别为包）。</p>
<ul>
<li>模块包含内置模块、标准模块以及第三方模块；包也包括内置的包、第三方包</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在交互窗口中运行，内置的模块路径在c拓展内</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> time,os,datetime,pandas</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>time</span><br><span class="line">&lt;module <span class="string">&#x27;time&#x27;</span> (built-<span class="keyword">in</span>)&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os</span><br><span class="line">&lt;module <span class="string">&#x27;os&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;D:\\Miniconda3\\lib\\os.py&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>datetime</span><br><span class="line">&lt;module <span class="string">&#x27;datetime&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;D:\\Miniconda3\\lib\\datetime.py&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pandas</span><br><span class="line">&lt;module <span class="string">&#x27;pandas&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;D:\\Miniconda3\\lib\\site-packages\\pandas\\__init__.py&#x27;</span>&gt;</span><br></pre></td></tr></table></figure>



<ul>
<li>从<a href="https://www.python.org/downloads/source/">官网</a>下载初始Python的源码做一个简单的了解：</li>
</ul>
<img src="/posts/659ef075/image-20220518132724603.png" class alt="libs">

<p>下载完成后进入文件夹：<u>A:\Python-3.10.4\Lib</u>，可以看到其中只有两种文件</p>
<ol>
<li><strong>文件夹即包。</strong>熟悉的如：json、logging、multiprocessing、urllib</li>
<li><strong>py文件，即脚本&#x2F;模块。</strong>熟悉的如：os.py、re.py、zipfile.py</li>
<li>一个<strong>特殊的空文件夹，site-packages</strong>，打开其中有一个文本描述，写的是：本目录用于存放第三方的包（通过pypi&#x2F;conda安装的包即存放在这）</li>
</ol>
<p>所以，即便我们不安装额外的包，也可以使用内置的模块及标准库中的模块与包：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time, os, re</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> pool</span><br></pre></td></tr></table></figure>



<p>Python的巨大优势就在于可拓展性和便捷，有大量的第三方包可供使用。另外，除了安装第三方包、我们也可以自己写模块和包用于调用。</p>
<p><u>tip：自己写的py文件放在目录下可以直接import，然后使用其中的<strong>变量及函数</strong>。通常该文件写完需要调试，这时候可以将运行的代码放在</u><code>if &#39;__main__&#39;== __main__:</code> <u>之下，这样在其他脚本import调用该”模块时”也不会执行运行的代码。</u></p>
<h2 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h2><p>构造函数：</p>
<h2 id="何时需要类？"><a href="#何时需要类？" class="headerlink" title="何时需要类？"></a>何时需要类？</h2><blockquote>
<p>参考：<a href="https://stackoverflow.com/questions/33072570/when-should-i-be-using-classes-in-python">使用类的原因-讨论</a></p>
</blockquote>
<blockquote>
<p>通常，使用Python的内置及第三方模块可以完成我们的工作，并不需要自定义类，但随着工作量的增大和复杂化，或许会有这样的需求，以pandas为例</p>
</blockquote>
<p>结合实际讨论，</p>
<ol>
<li>当我们通过<code>pandas.read_csv()</code>读取一个文件之后，得到一个实例化的对象<code>dataframe</code>，接下来我们可以通过columns,names,head,shape等参数访问其属性，即对象实例化之后我们可以使用和追踪它的状态，就好像创建了一个list，而不只是调用了一个方法。</li>
<li>便于拓展和重用，可以继承，即方便别人用和自己调用，比如他人可以基于pandas开发geopandas等包，也即是依赖</li>
<li>结构清晰，好看，从各种包的api文档（如<a href="https://pandas.pydata.org/pandas-docs/stable/reference/frame.html">pandas</a>，<a href="https://matplotlib.org/stable/gallery/index.html">matplotlib</a>，<a href="https://numpy.org/doc/stable/reference/index.html">numpy</a>，<a href="https://geopandas.org/en/latest/docs/reference.html">geopandas</a>……）我们可以看看，其组织结构清楚，便于查阅……</li>
<li>……</li>
</ol>
<p><strong>何时使用？</strong>——拙见</p>
<p>（虽然在享受着类的便捷，但个人还没遇到一定得用类的情况hh）</p>
<ul>
<li>当工作简单或者只是实现一个或者多个函数时，不需要。类的重要一点就是属性和方法组装在了一起，如果只是一个一次性的处理脚本不需要类</li>
<li>编写开源包和模块时</li>
<li>工作量比较大，代码组织感觉比较乱时，可以考虑（但其实理理逻辑，通过多个脚本也可以写出结构清晰的脚本）。</li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>类</tag>
        <tag>模块</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/posts/4a17b156/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<span id="more"></span>

<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<h3 id="command"><a href="#command" class="headerlink" title="command"></a>command</h3><figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">hexo clean <span class="variable">&amp;&amp;</span> hexo g <span class="variable">&amp;&amp;</span> hexo deploy</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hexo框架</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Lovemyself</title>
    <url>/posts/29d41ed/</url>
    <content><![CDATA[<p>今天是2022年5月20日，加了一天的班赶材料，这会闲下来，放一首诗……</p>
<span id="more"></span>

<h2 id="When-I-started-loving-myself"><a href="#When-I-started-loving-myself" class="headerlink" title="When I started loving myself"></a>When I started loving myself</h2><h2 id="当我开始爱自己"><a href="#当我开始爱自己" class="headerlink" title="当我开始爱自己"></a>当我开始爱自己</h2><blockquote>
<p>The poem below was written by Charlie Chaplin on his 70th birthday,  April 16, 1959. <a href="https://charterforcompassion.org/attributes-of-compassion/when-i-started-loving-myself">参考</a></p>
</blockquote>
<p>When I started loving myself<br>I understood that I’m always and at any given opportunity<br>in the right place at the right time.<br>And I understood that all that happens is right –<br>from then on I could be calm.<br>Today I know: It’s called TRUST.</p>
<p>When I started to love myself I understood how much it can offend somebody<br>When I tried to force my desires on this person,<br>even though I knew the time is not right and the person was not ready for it,<br>and even though this person was me.<br>Today I know: It’s called LETTING GO</p>
<p>When I started loving myself<br>I could recognize that emotional pain and grief<br>are just warnings for me to not live against my own truth.<br>Today I know: It’s called AUTHENTICALLY BEING.</p>
<p>When I started loving myself<br>I stopped longing for another life<br>and could see that everything around me was a request to grow.<br>Today I know: It’s called MATURITY.</p>
<p>When I started loving myself<br>I stopped depriving myself of my free time<br>and stopped sketching further magnificent projects for the future.<br>Today I only do what’s fun and joy for me,<br>what I love and what makes my heart laugh,<br>in my own way and in my tempo.<br>Today I know: it’s called HONESTY.</p>
<p>When I started loving myself<br>I escaped from all what wasn’t healthy for me,<br>from dishes, people, things, situations<br>and from everything pulling me down and away from myself.<br>In the beginning I called it the “healthy egoism”,<br>but today I know: it’s called SELF-LOVE.</p>
<p>When I started loving myself<br>I stopped wanting to be always right<br>thus I’ve been less wrong.<br>Today I’ve recognized: it’s called HUMBLENESS.</p>
<p>When I started loving myself<br>I refused to live further in the past<br>and worry about my future.<br>Now I live only at this moment where EVERYTHING takes place,<br>like this I live every day and I call it CONSCIOUSNESS.</p>
<p>When I started loving myself<br>I recognized, that my thinking<br>can make me miserable and sick.<br>When I requested for my heart forces,<br>my mind got an important partner.<br>Today I call this connection HEART WISDOM.</p>
<p>We do not need to fear further discussions,<br>conflicts and problems with ourselves and others<br>since even stars sometimes bang on each other<br>and create new worlds.<br>Today I know: THIS IS LIFE!</p>
<h2 id="爱"><a href="#爱" class="headerlink" title="爱"></a>爱</h2><blockquote>
<p>韶华易逝，好好珍惜</p>
</blockquote>
<p>人这一生</p>
<ul>
<li>向内，追寻精神的成长，自我的独立和完善、灵魂的完整<ul>
<li>勇敢而坚定地去认识、接纳和锻炼自己吧……</li>
</ul>
</li>
<li>向外<ul>
<li>寻一个钟爱的人、一份热爱的事业，勇敢地、精心地守护和前行</li>
<li>和谐共处的家庭、社会关系和社会生活……</li>
</ul>
</li>
</ul>
<p>我们始终是自由的，不要因为他人言语和外界环境而妥协扭曲自己心底的渴望和热爱，喜欢的话就勇敢地去追逐吧，一步一步……</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
  </entry>
  <entry>
    <title>matplotlib绘图基础1：图的组成元素</title>
    <url>/posts/8dfff56a/</url>
    <content><![CDATA[<p>一张好看的学术图表不仅能够更优雅简洁地传递信息，也能给人予美的享受。在撰写学术论文的过程，耗费大量时间的除了做实验，另一个一定是作图了，要通过几张图把信息很好地呈现出来，需要费不少功夫。</p>
<p><strong>绘图技能</strong>是我一直想要拓展和延伸的一个技能。这一方面需要通过大量的输入来学习别人对图表的设计和呈现，学习色彩、布局等等……另一方面还要能够用代码来实现，而需要基于代码的可视化是一个比较繁琐的内容，需要学习和积累。故在此开始记录自己Python可视化的学习过程，当然，也便于代码的复用。</p>
<blockquote>
<p>本系列博客主要参考：<a href>Matplotlib文档</a>, <a href="https://github.com/rougier/scientific-visualization-book">Nicolas P. Rougier老师的书</a></p>
</blockquote>
<p>本文主要涉及内容：**<u>Matplotlib中Figure的组成要素</u>**</p>
<span id="more"></span>

<h2 id="图的组成"><a href="#图的组成" class="headerlink" title="图的组成"></a>图的组成</h2><blockquote>
<p>matplotlib最新版的文档做了较大的改版，提供了更全的<a href="https://matplotlib.org/stable/gallery/index.html">api参考</a></p>
</blockquote>
<p>下图是Matplotlib官方文档中提供的一张介绍图组成元素的图，很整洁，左图为<a href="https://matplotlib.org/3.1.1/gallery/showcase/anatomy.html">旧版anatomy</a>，右图为最新的文档<a href="https://matplotlib.org/stable/gallery/showcase/anatomy.html?highlight=anatomy">anatomy</a>里的图，我稍作改动放到了一起：</p>
<img src="/posts/undefined/anatomy.svg" class alt="anatomy">

<h2 id="图的基本单元"><a href="#图的基本单元" class="headerlink" title="图的基本单元"></a>图的基本单元</h2>]]></content>
      <categories>
        <category>python-matplotlib绘图基础</category>
      </categories>
      <tags>
        <tag>Python Matplotlib</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中的时间格式及转换梳理</title>
    <url>/posts/a0dd2ef9/</url>
    <content><![CDATA[<p>时间格式是一类较特殊也十分普遍的格式，大量数据都含有时间信息，在实际的学习中会经常接触。最近有创建、处理或转换时间序列数据的需求，因此做一个梳理并汇总以便在后续遇到相关处理时可以拿来即用。本文主要涉及内容：</p>
<ol>
<li>Python内置模块<code>time</code> 及 <code>datetime</code>的时间格式及处理</li>
<li><code>Pandas</code>时间格式的表达及常规处理</li>
<li>实际作业中遇到的一些<code>案例</code></li>
</ol>
<span id="more"></span>

<h2 id="主要参考"><a href="#主要参考" class="headerlink" title="主要参考"></a>主要参考</h2><blockquote>
<p>不论是Python的内置模块还是第三方提供的模块，官网的文档都是很好的学习资源，尤其是想要了解地更深的时候或者debug的时候</p>
</blockquote>
<p>Python官方文档</p>
<ul>
<li><a href="https://docs.python.org/3.9/library/index.html">python标准库</a></li>
<li><a href="https://docs.python.org/3.9/library/time.html">time模块文档</a></li>
<li><a href="https://docs.python.org/3.9/library/time.html">datetime模块文档</a></li>
</ul>
<p>NumPy</p>
<ul>
<li><a href="https://numpy.org/doc/stable/reference/arrays.datetime.html">NumPy中的日期和时间</a></li>
<li><a href="https://numpy.org/doc/stable/reference/routines.datetime.html">时间转换函数</a></li>
</ul>
<p>Pandas，pandas主要处理表格型数据，因此实际中数据以时间序列存在</p>
<ul>
<li><a href="https://pandas.pydata.org/docs/user_guide/timeseries.html">时间序列相关处理函数</a></li>
<li><a href="https://pandas.pydata.org/docs/user_guide/timedeltas.html#">时间增量&#x2F;差</a></li>
</ul>
<p>涉及Python模块和类、实例、属性及方法相关相关的概念可查阅此文<a href="https://hscyber.github.io/posts/659ef075/">Python中的类</a></p>
<hr>
<h2 id="内置模块time"><a href="#内置模块time" class="headerlink" title="内置模块time"></a>内置模块time</h2><h3 id="表达格式"><a href="#表达格式" class="headerlink" title="表达格式"></a>表达格式</h3><ol>
<li><strong>数字</strong> &lt;’float’&gt;，Unix时间戳：从epoch(1970年1月1日00:00:00 UTC)经过的秒数&#x2F;偏移量，如631123200000表示”1990-01-01 00:00:00”</li>
<li><strong>时间元组</strong> &lt; ‘time.struct_time’&gt;（实际实现，给计算机看的）包含了一个时间的完整信息</li>
</ol>
<ul>
<li>time.struct_time(tm_year&#x3D;2022, tm_mon&#x3D;5, tm_mday&#x3D;11, tm_hour&#x3D;2, tm_min&#x3D;53, tm_sec&#x3D;2, tm_wday&#x3D;2, tm_yday&#x3D;131, tm_isdst&#x3D;0)</li>
</ul>
<ol start="3">
<li><strong>字符串</strong> &lt;’str’&gt;（可读性强，给人看的）：如”1990-01-01 00:00:00”，”2018-01-01”，”1998&#x2F;01&#x2F;01”等</li>
</ol>
<h3 id="时间获取"><a href="#时间获取" class="headerlink" title="时间获取"></a>时间获取</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># print(&quot;获取计算机当前时间时间：&#123;0&#125;,数据类型：&#123;1&#125;&quot;.format(t, type(t)))</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">t = time.time()</span><br><span class="line"><span class="comment"># 1652701116.7288237,数据类型: &lt;class &#x27;float&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">t = time.ctime()</span><br><span class="line"><span class="comment"># Mon May 16 19:38:36 2022,数据类型：&lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">t = time.gmtime()</span><br><span class="line"><span class="comment"># time.struct_time(tm_year=2022, tm_mon=5, tm_mday=16, tm_hour=11, tm_min=38, tm_sec=36, tm_wday=0, tm_yday=136, tm_isdst=0),数据类型：&lt;class &#x27;time.struct_time&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">t = time.localtime() <span class="comment">#逆操作time.mktime()：可以将数字转换成元组</span></span><br><span class="line"><span class="comment">#同上 time.struct_time(tm..</span></span><br></pre></td></tr></table></figure>

<h3 id="时间转换-strftime-strptime"><a href="#时间转换-strftime-strptime" class="headerlink" title="时间转换(strftime()+strptime())"></a>时间转换(<code>strftime()+strptime()</code>)</h3><p>将时间元组转换为格式化字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t_struct = time.gmtime() <span class="comment">#创建时间元组</span></span><br><span class="line">t_string = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, t_struct)</span><br></pre></td></tr></table></figure>

<p>将字符串转换为时间元组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t_string = <span class="string">&#x27;2022-05-16 13:16:15&#x27;</span></span><br><span class="line">t_struct = time.strptime(t_string,<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>所有格式化参数可以在此页面查找<a href="https://docs.python.org/3/library/time.html#functions">strftime()</a><br>常用的如下（注意区分大小写）：</p>
<ul>
<li><code>%Y %m %d</code>: 2022-05-01, <code>%Y %-m %-d</code>: 2022-5-1,</li>
<li><code>%H %M %S</code>: 05:01:08, <code>%-H %-M %-S</code>: 5:1:8,</li>
<li><code>%x</code>:’05&#x2F;11&#x2F;22’, </li>
<li><code>%X</code>:’’02:49:06’, </li>
<li><code>%c</code>: ‘Wed May 11 02:49:36 2022’</li>
<li><code>%a</code>: Sun, <code>%A</code>: Sunday, <code>%W</code>:0-6,weekday</li>
<li><code>%b</code>: Jan, <code>%B</code>: January,</li>
<li>…</li>
<li><code>%z</code>: UTC offset in the form +HHMM or -HHMM.  “%z %Z”:’+0800 中国标准时间’</li>
<li><code>%j</code>: 001, 002, …, 366, </li>
<li><code>%U</code> <code>%W</code>：周数，一年的第多少周，前者表示周日为第一天</li>
</ul>
<h3 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 脚本运行时间计算</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">start_time = time.time()</span><br><span class="line">main()<span class="comment">#需要计时的代码</span></span><br><span class="line">end_time = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;脚本运行总时长:&#123;:.2f&#125; min&#x27;</span>.<span class="built_in">format</span>((end_time-start_time)/<span class="number">60</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;脚本运行总时长:&#123;:.2f&#125; h&#x27;</span>.<span class="built_in">format</span>((end_time-start_time)/<span class="number">3600</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 代码停顿3秒</span></span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="🔥内置模块datetime"><a href="#🔥内置模块datetime" class="headerlink" title="🔥内置模块datetime"></a>🔥内置模块datetime</h2><blockquote>
<p>time较为底层，一般用的不多，其他实际中主要用datetime<br>datetime是基于time包开发的包，datetime可以拆解为date和time两个部分。可以将这两个分开管理(datetime.date类，datetime.time类)，也可以将两者合在一起(datetime.datetime类)，datetime包还定义了时间间隔对象(timedelta)。</p>
</blockquote>
<h3 id="子类-x2F-对象"><a href="#子类-x2F-对象" class="headerlink" title="子类&#x2F;对象"></a>子类&#x2F;对象</h3><p>类，这些类可以直接通过”属性”进行实例化对象，如datetime.date(2022, 5, 20)</p>
<ul>
<li><code>datetime.time</code>：独立于任何特定日期的理想化时间，包含属性: <u>hour, minute, second</u>, microsecond 和 tzinfo。<ul>
<li>属性的意思表明可以通过 .month .hour获取对象实例的属性值</li>
</ul>
</li>
<li><code>datetime.date</code>: 理想化的简单型日期, 属性: <u>year, month, and day</u>。</li>
<li><code>datetime.datetime</code>: 日期和时间的结合。属性：<u>year, month, day, hour, minute, second</u>, microsecond, and tzinfo.</li>
<li><code>datetime.timedelta</code>：表示两个 date 对象或 time 对象，或者 datetime 对象之间的<u>时间间隔</u>，精确到微秒。<ul>
<li>常用于时间之间的加减等操做</li>
</ul>
</li>
<li><code>datetime.tzinfo</code>：时区信息对象</li>
<li><code>datetime.timezone</code>：表示相对于UTC的偏移量</li>
</ul>
<p>这些类创建实例的<strong>共有属性</strong></p>
<ol>
<li>不可变</li>
<li>可哈希，即可以作为字典的键key</li>
<li>支持通过pickle模块进行高效封存，惯用pickle可以为实际工作带来诸多便利，见<a href>pickle使用-待更新</a></li>
<li>支持加减法，且涉及时间间隔及时间差等可以通过<strong>timedelta</strong>进行运算</li>
</ol>
<h3 id="date常用操作"><a href="#date常用操作" class="headerlink" title="date常用操作"></a>date常用操作</h3><blockquote>
<p>time的操作与之类似</p>
</blockquote>
<ul>
<li>获取&#x2F;创建时间<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> date, timedelta</span><br><span class="line"></span><br><span class="line">today = date.today() <span class="comment">#输出 datetime.date(2022, 5, 16)</span></span><br><span class="line">year, month = today.year, today.month</span><br><span class="line"></span><br><span class="line">my_birthday = date(<span class="number">1998</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">time_to_birthday = <span class="built_in">abs</span>(my_birthday - today) <span class="comment"># datetime.timedelta(days=8901)</span></span><br><span class="line"><span class="comment"># UTC时间转北京时间：time_bj = time_utc+ timedelta(hours=8)</span></span><br></pre></td></tr></table></figure></li>
<li>日期与字符串格式的转换</li>
</ul>
<p>将时间date转换为格式化字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> date</span><br><span class="line">t1 = date(<span class="number">2022</span>, <span class="number">1</span>, <span class="number">1</span>) </span><br><span class="line"><span class="comment">#  ISO 8601 格式 YYYY-MM-DD</span></span><br><span class="line">t_string = date.isoformat(t1) <span class="comment">#&#x27;2022-01-01&#x27;</span></span><br></pre></td></tr></table></figure>
<p>将字符串转换为日期date</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1 = <span class="string">&#x27;2022-01-01&#x27;</span></span><br><span class="line">t_date = date.fromisoformat(t1) <span class="comment">#输出datetime.date(2022, 1, 1)</span></span><br></pre></td></tr></table></figure>
<ul>
<li>其他方法<br>时间替换<code>date.replace</code>(year&#x3D;self.year, month&#x3D;self.month, day&#x3D;self.day)<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = date(<span class="number">2022</span>, <span class="number">12</span>, <span class="number">31</span>)</span><br><span class="line"><span class="comment"># 时间替换</span></span><br><span class="line">d2 = d.replace(day=<span class="number">26</span>)</span><br><span class="line"><span class="comment">#返回一个 time.struct_time</span></span><br><span class="line">d3 = date.timetuple(d) </span><br><span class="line"><span class="comment"># 获取当前时间的字符串格式</span></span><br><span class="line">t = date.today()</span><br><span class="line">t.ctime()<span class="comment"># 等价于`time.ctime(time.mktime(d.timetuple()))`</span></span><br><span class="line"><span class="comment">#输出&#x27;Mon May 16 00:00:00 2022&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="datetime常用操作"><a href="#datetime常用操作" class="headerlink" title="datetime常用操作"></a>datetime常用操作</h3><ul>
<li><p>获取&#x2F;创建时间</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, date, time, timezone</span><br><span class="line">datetime.now()   </span><br><span class="line">datetime.now(timezone.utc)  </span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line"><span class="comment"># datetime.datetime(2022, 5, 16, 21, 10, 32, 304773)</span></span><br><span class="line"><span class="comment"># datetime.datetime(2022, 5, 16, 13, 10, 32, 306332, tzinfo=datetime.timezone.utc)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>时间合并</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, date, time</span><br><span class="line">d = date(<span class="number">2022</span>, <span class="number">5</span>, <span class="number">12</span>)</span><br><span class="line">t = time(<span class="number">1</span>, <span class="number">18</span>)</span><br><span class="line">dt = datetime.combine(d, t)</span><br></pre></td></tr></table></figure></li>
<li><p>时间与字符串的转换，参数与<code>time</code>模块类似</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 字符串转时间</span></span><br><span class="line">dt = datetime.strptime(<span class="string">&quot;21/11/06 16:30&quot;</span>, <span class="string">&quot;%d/%m/%y %H:%M&quot;</span>)</span><br><span class="line"><span class="comment"># 时间转字符串</span></span><br><span class="line">t_str = dt.strftime(<span class="string">&quot;%d/%m/%y %H:%M&quot;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="Pandas中的时间格式"><a href="#Pandas中的时间格式" class="headerlink" title="Pandas中的时间格式"></a>Pandas中的时间格式</h2><blockquote>
<p>pandas为表格，因此处理的一般为时间序列而非单个时间</p>
</blockquote>
<p>pandas中的时间格式主要为以下两类</p>
<ul>
<li>datetime (datetime64[ns])， 类比datetime</li>
<li>String&#x2F;Object</li>
</ul>
<h3 id="创建序列"><a href="#创建序列" class="headerlink" title="创建序列"></a>创建序列</h3><blockquote>
<p>pd.date_range()</p>
</blockquote>
<ul>
<li>pandas.date_range(start&#x3D;None, end&#x3D;None, periods&#x3D;None, freq&#x3D;None, tz&#x3D;None, normalize&#x3D;False, name&#x3D;None, …)<a href="https://pandas.pydata.org/docs/reference/api/pandas.date_range.html">文档</a></li>
<li>参数说明<ul>
<li><code>start end</code>:起始日期</li>
<li><code>periods</code>:日期数量</li>
<li><code>freq</code>: 间隔，默认<code>D</code>,可以设<code>M</code>,<code>8H</code><a href="https://pandas.pydata.org/docs/user_guide/timeseries.html#timeseries-offset-aliases">详见</a></li>
<li><code>inclusive</code>：&#x3D;’both’,’left’,’right’，’neither’指定左右是否闭合，如生成某月份数据但不知道该月多少天，可以指定为left，右边写下月第一天</li>
</ul>
</li>
</ul>
<p>常用代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建序列， 可以直接接收</span></span><br><span class="line"><span class="comment"># 默认都是ISO 8601 格式 YYYY-MM-DD, &#x27;2018-01-01 03:00:00&#x27;</span></span><br><span class="line">df[<span class="string">&#x27;time&#x27;</span>] = pd.date_range(start=<span class="string">&#x27;1/1/2018&#x27;</span>, end=<span class="string">&#x27;1/08/2018&#x27;</span>, freq=<span class="string">&#x27;D&#x27;</span>) <span class="comment">#8天</span></span><br><span class="line">pd.date_range(start=<span class="string">&#x27;1/1/2018&#x27;</span>, end=<span class="string">&#x27;1/08/2018&#x27;</span>) <span class="comment">#8天</span></span><br><span class="line">pd.date_range(start=<span class="string">&#x27;1/1/2018&#x27;</span>, periods=<span class="number">8</span>) <span class="comment">#8天</span></span><br><span class="line">pd.date_range(start=<span class="string">&#x27;1/1/2018&#x27;</span>, periods=<span class="number">8</span>, freq=<span class="string">&#x27;2M&#x27;</span>)  <span class="comment">#8天，两天之间间隔为两个月</span></span><br><span class="line">pd.date_range(start=<span class="string">&#x27;2018-01-01&#x27;</span>, end=<span class="string">&#x27;2018-02-01&#x27;</span>, freq=<span class="string">&#x27;3H&#x27;</span>)</span><br><span class="line">pd.date_range(start=<span class="string">&#x27;2017-01-01&#x27;</span>, end=<span class="string">&#x27;2017-02-01&#x27;</span>, inclusive=<span class="string">&#x27;left&#x27;</span>) <span class="comment">#创建指定月份的日期范围</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="时间序列格式转换"><a href="#时间序列格式转换" class="headerlink" title="时间序列格式转换"></a>时间序列格式转换</h3><p><strong>datetime→string</strong>:<code>astype()+strftime()</code>，输入的列为datetime64[ns]类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># astype()</span></span><br><span class="line">df[<span class="string">&#x27;time_str&#x27;</span>]=df[<span class="string">&#x27;time&#x27;</span>].astype(<span class="built_in">str</span>)</span><br><span class="line"><span class="comment"># strftime()</span></span><br><span class="line">df[<span class="string">&#x27;time_str&#x27;</span>] = df[<span class="string">&#x27;time&#x27;</span>].dt.strftime(<span class="string">&#x27;%m/%d/%Y&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><strong>string→datetime</strong>: <code>to_datetime</code>，输入的列为String或Object类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;time&#x27;</span>]=pd.to_datetime(df[<span class="string">&#x27;time_str&#x27;</span>].astype(<span class="built_in">str</span>), <span class="built_in">format</span>=<span class="string">&#x27;%Y/%m/%d&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="时间合并与拆分"><a href="#时间合并与拆分" class="headerlink" title="时间合并与拆分"></a>时间合并与拆分</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 合并</span></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&#x27;year&#x27;</span>: [<span class="number">2015</span>, <span class="number">2016</span>],<span class="string">&#x27;month&#x27;</span>: [<span class="number">2</span>, <span class="number">3</span>],<span class="string">&#x27;day&#x27;</span>: [<span class="number">4</span>, <span class="number">5</span>],<span class="string">&#x27;hour&#x27;</span>:[<span class="number">10</span>,<span class="number">20</span>]&#125;)</span><br><span class="line">df[<span class="string">&#x27;date&#x27;</span>] = pd.to_datetime(df[[<span class="string">&#x27;year&#x27;</span>,<span class="string">&#x27;month&#x27;</span>,<span class="string">&#x27;day&#x27;</span>]])</span><br><span class="line">df[<span class="string">&#x27;datetime&#x27;</span>] = pd.to_datetime(df.date) + pd.to_timedelta(df.hour, unit=<span class="string">&#x27;h&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#拆分/转换示例</span></span><br><span class="line">df[<span class="string">&#x27;day2&#x27;</span>] = df[<span class="string">&#x27;time&#x27;</span>].dt.strftime(<span class="string">&#x27;%D&#x27;</span>)</span><br><span class="line">df[<span class="string">&#x27;hour2&#x27;</span>] = df[<span class="string">&#x27;time&#x27;</span>].dt.strftime(<span class="string">&#x27;%H&#x27;</span>)</span><br><span class="line">df[<span class="string">&#x27;date2&#x27;</span>] = df[<span class="string">&#x27;time&#x27;</span>].dt.strftime(<span class="string">&#x27;%x&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="基于时间筛选数据"><a href="#基于时间筛选数据" class="headerlink" title="基于时间筛选数据"></a>基于时间筛选数据</h3><blockquote>
<p><code>&amp;</code>与;<code>|</code>或</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># df[&#x27;time&#x27;]为时间格式：</span></span><br><span class="line">df2 = df.loc[(df.time &gt; pd.datetime(<span class="number">2017</span>,<span class="number">8</span>,<span class="number">23</span>,<span class="number">0</span>)) &amp; (df.time &lt; pd.datetime(<span class="number">2017</span>,<span class="number">8</span>,<span class="number">27</span>,<span class="number">0</span>))]</span><br><span class="line">df2 = df.loc[(df.time &lt; pd.datetime(<span class="number">2017</span>,<span class="number">8</span>,<span class="number">23</span>,<span class="number">0</span>)) | (df.time &gt; pd.datetime(<span class="number">2017</span>,<span class="number">8</span>,<span class="number">27</span>,<span class="number">0</span>))]</span><br><span class="line"><span class="comment"># df[&#x27;time&#x27;]为字符串：</span></span><br><span class="line">df2 = df.loc[(df.time &gt; <span class="string">&#x27;2017-08-20 00:00:00&#x27;</span>) &amp; (df.time &lt; <span class="string">&#x27;2017-08-26 00:00:00&#x27;</span>)]</span><br></pre></td></tr></table></figure>
<h3 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h3><blockquote>
<p>待补充<br>……</p>
</blockquote>
<p>有了以上的基础，在实际中可以灵活按需涉及方案排列组合等实现想要的结果……</p>
<hr>
<h2 id="实际案例"><a href="#实际案例" class="headerlink" title="实际案例"></a>实际案例</h2><blockquote>
<p>持续扩充……</p>
</blockquote>
]]></content>
      <categories>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Time</tag>
        <tag>Datetime</tag>
        <tag>pandas</tag>
      </tags>
  </entry>
</search>
