<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>A image test post</title>
    <url>/posts/2852138d/</url>
    <content><![CDATA[<p>typora图片插入格式设置 <code>![](相对文件夹/图片名)</code></p>
<img src="/posts/undefined/test.png" class alt="image">



]]></content>
      <categories>
        <category>image</category>
      </categories>
  </entry>
  <entry>
    <title>class in python</title>
    <url>/posts/659ef075/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/posts/4a17b156/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<span id="more"></span>

<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<h3 id="command"><a href="#command" class="headerlink" title="command"></a>command</h3><figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">hexo clean <span class="variable">&amp;&amp;</span> hexo g <span class="variable">&amp;&amp;</span> hexo deploy</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中的时间格式及转换梳理</title>
    <url>/posts/a0dd2ef9/</url>
    <content><![CDATA[<p>时间格式是一类较特殊也十分普遍的格式，大量数据都含有时间信息，在实际的学习中会经常接触。最近有创建、处理或转换时间序列数据的需求，因此做一个汇总以便在后续遇到相关处理时可以拿来即用。本文主要涉及内容：</p>
<ol>
<li>Python内置模块<code>time</code> 及 <code>datetime</code>的时间格式及处理</li>
<li>Pandas时间格式的表达及常规处理</li>
<li>实际作业中遇到的一些案例</li>
</ol>
<span id="more"></span>

<h2 id="主要参考"><a href="#主要参考" class="headerlink" title="主要参考"></a>主要参考</h2><blockquote>
<p>不论是Python的内置模块还是第三方提供的模块，官网的文档都是很好的学习资源，尤其是想要了解地更深的时候或者debug的时候</p>
</blockquote>
<p>Python官方文档</p>
<ul>
<li><a href="https://docs.python.org/3.9/library/index.html">python标准库</a></li>
<li><a href="https://docs.python.org/3.9/library/time.html">time模块文档</a></li>
<li><a href="https://docs.python.org/3.9/library/time.html">datetime模块文档</a></li>
</ul>
<p>NumPy</p>
<ul>
<li><a href="https://numpy.org/doc/stable/reference/arrays.datetime.html">NumPy中的日期和时间</a></li>
<li><a href="https://numpy.org/doc/stable/reference/routines.datetime.html">时间转换函数</a></li>
</ul>
<p>Pandas，pandas主要处理表格型数据，因此实际中数据以时间序列存在</p>
<ul>
<li><a href="https://pandas.pydata.org/docs/user_guide/timeseries.html">时间序列相关处理函数</a></li>
<li><a href="https://pandas.pydata.org/docs/user_guide/timedeltas.html#">时间增量&#x2F;差</a></li>
</ul>
<p>涉及Python模块和类、实例、属性及方法相关相关的概念可查阅此文<a href="...">Python中的类</a>，简单举例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = datetime.date(<span class="number">2002</span>, <span class="number">12</span>, <span class="number">4</span>)</span><br><span class="line">day = t.day <span class="comment">#12</span></span><br><span class="line">t2 = t.replace(day=<span class="number">26</span>) <span class="comment"># datetime.date(2002, 12, 26)</span></span><br></pre></td></tr></table></figure>
<ul>
<li>datetime为导入的模块，date为其实现的一个子类,t为实例化的date对象</li>
<li>通过<code>.d</code>可以获取其日期的天属性,<code>.replace()</code>为调用其实现的替换方法</li>
</ul>
<h2 id="内置模块time"><a href="#内置模块time" class="headerlink" title="内置模块time"></a>内置模块time</h2><ol>
<li>时间的<strong>表达</strong>格式</li>
</ol>
<ul>
<li>数字 &lt;’float’&gt;：1970年1月1日00:00:00开始按秒计算的偏移量，如631123200000表示”1990-01-01 00:00:00”</li>
<li>时间元组&lt; ‘time.struct_time’&gt;（实际实现）包含了一个时间的完整信息：time.struct_time(tm_year&#x3D;2022, tm_mon&#x3D;5, tm_mday&#x3D;11, tm_hour&#x3D;2, tm_min&#x3D;53, tm_sec&#x3D;2, tm_wday&#x3D;2, tm_yday&#x3D;131, tm_isdst&#x3D;0)：</li>
<li>字符串 &lt;’str’&gt;（可读性强）：如”1990-01-01 00:00:00”，”2018-01-01”，”1998&#x2F;01&#x2F;01”等</li>
</ul>
<ol start="2">
<li>时间的<strong>获取</strong></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># print(&quot;获取计算机当前时间时间：&#123;0&#125;,数据类型：&#123;1&#125;&quot;.format(t, type(t)))</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">t = time.time()</span><br><span class="line"><span class="comment"># 1652701116.7288237,数据类型: &lt;class &#x27;float&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">t = time.ctime()</span><br><span class="line"><span class="comment"># Mon May 16 19:38:36 2022,数据类型：&lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">t = time.gmtime()</span><br><span class="line"><span class="comment"># time.struct_time(tm_year=2022, tm_mon=5, tm_mday=16, tm_hour=11, tm_min=38, tm_sec=36, tm_wday=0, tm_yday=136, tm_isdst=0),数据类型：&lt;class &#x27;time.struct_time&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">t = time.localtime() <span class="comment">#逆操作time.mktime()：可以将数字转换成元组</span></span><br><span class="line"><span class="comment">#同上 time.struct_time(tm..</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>时间的<strong>转换</strong>(<code>strftime()+strptime()</code>)</li>
</ol>
<p>将时间元组转换为格式化字符串</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">t_struct = time.gmtime() <span class="comment">#创建时间元组</span></span><br><span class="line">t_string = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, t)</span><br></pre></td></tr></table></figure>

<p>将字符串转换为时间元组</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">t_struct = time.gmtime() <span class="comment">#创建时间元组</span></span><br><span class="line">t_string = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, t)</span><br></pre></td></tr></table></figure>
<p>所有格式化参数可以在此页面查找<a href="https://docs.python.org/3/library/time.html#functions">strftime()</a><br>常用的如下（注意区分大小写）：</p>
<ul>
<li><code>%Y %m %d</code>: 2022-05-01, <code>%Y %-m %-d</code>: 2022-5-1,</li>
<li><code>%H %M %S</code>: 05:01:08, <code>%-H %-M %-S</code>: 5:1:8,</li>
<li><code>%x</code>:’05&#x2F;11&#x2F;22’, </li>
<li><code>%X</code>:’’02:49:06’, </li>
<li><code>%c</code>: ‘Wed May 11 02:49:36 2022’</li>
<li><code>%a</code>: Sun, <code>%A</code>: Sunday, <code>%W</code>:0-6,weekday</li>
<li><code>%b</code>: Jan, <code>%B</code>: January,</li>
<li>…</li>
<li><code>%z</code>: UTC offset in the form +HHMM or -HHMM.  “%z %Z”:’+0800 中国标准时间’</li>
<li><code>%j</code>: 001, 002, …, 366, </li>
<li><code>%U</code> <code>%W</code>：周数，一年的第多少周，前者表示周日为第一天</li>
</ul>
<ol start="4">
<li>其他常用函数</li>
</ol>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 脚本运行时间计算</span></span><br><span class="line">import <span class="built_in">time</span></span><br><span class="line">start_time = <span class="built_in">time</span>.<span class="built_in">time</span>()</span><br><span class="line"></span><br><span class="line">main()<span class="comment">#需要计时的代码</span></span><br><span class="line"></span><br><span class="line">end_time = <span class="built_in">time</span>.<span class="built_in">time</span>()</span><br><span class="line">print(<span class="string">&#x27;脚本运行总时长:&#123;:.2f&#125; min&#x27;</span>.<span class="built_in">format</span>((end_time-start_time)/<span class="number">60</span>))</span><br><span class="line">print(<span class="string">&#x27;脚本运行总时长:&#123;:.2f&#125; h&#x27;</span>.<span class="built_in">format</span>((end_time-start_time)/<span class="number">3600</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 代码停顿3秒</span></span><br><span class="line"><span class="built_in">time</span>.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="内置模块datetime"><a href="#内置模块datetime" class="headerlink" title="内置模块datetime"></a>内置模块datetime</h2><blockquote>
<p>time较为，一般可以不用，实际中我主要用<code>datetime</code><br><code>datetime</code>是基于time包开发的包，datetime可以拆解为date和time两个部分。可以将这两个分开管理(<code>datetime.date</code>类，<code>datetime.time</code>类)，也可以将两者合在一起(<code>datetime.datetime</code>类)，datetime包还定义了时间间隔对象(<code>timedelta</code>)。</p>
</blockquote>
<h2 id="Pandas中的时间格式"><a href="#Pandas中的时间格式" class="headerlink" title="Pandas中的时间格式"></a>Pandas中的时间格式</h2><h2 id="实际案例"><a href="#实际案例" class="headerlink" title="实际案例"></a>实际案例</h2><blockquote>
<p>持续扩充……</p>
</blockquote>
]]></content>
      <categories>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Time</tag>
        <tag>Datetime</tag>
      </tags>
  </entry>
</search>
