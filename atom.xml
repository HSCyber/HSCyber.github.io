<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Huangs&#39;s Notes</title>
  
  <subtitle>明天的事后天就知道了</subtitle>
  <link href="https://hscyber.github.io/atom.xml" rel="self"/>
  
  <link href="https://hscyber.github.io/"/>
  <updated>2023-10-29T08:00:17.515Z</updated>
  <id>https://hscyber.github.io/</id>
  
  <author>
    <name>huangsh</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于Hexo与Github搭建静态个人博客网站</title>
    <link href="https://hscyber.github.io/posts/1fb16b0c/"/>
    <id>https://hscyber.github.io/posts/1fb16b0c/</id>
    <published>2023-10-29T02:40:02.000Z</published>
    <updated>2023-10-29T08:00:17.515Z</updated>
    
    <content type="html"><![CDATA[<p>如题，抽空记录了一下本网站的构建过程以供查阅。这里我基于Github提供的免费网站，并基于<a href="https://hexo.io/index.html">Hexo框架</a>在本地构建并部署，使用的渲染主题是<a href="https://theme-next.js.org/">Next</a>。</p><span id="more"></span><h2 id="写在开头"><a class="markdownIt-Anchor" href="#写在开头"></a> 写在开头</h2><p>首先需要说明的是，对于博客搭建，这里提供的是一个可选项，但<strong>重要的事把事情做起来而不在于使用什么技术或形式</strong>。有很多开源的框架，如Hugo、Jekyll，也有很多免费或付费的网站搭建平台，比如流行的WordPress，可以一键构建好博客网站，有兴趣可自行探索</p><hr><p>回归正题，为什么会有这个站？——（目前）个人认为博客网站是作为集内容<strong>存档、查阅及分享</strong>为一体的十分便捷的笔记仓库的最佳工具。我主要用来记录什么？</p><ul><li>定期记录和分类整理自己常用的一些<strong>代码</strong>，以便随查随用，因为经历过那种哪里写过但是代码找不到的情况</li><li>阅读和学习笔记，通过<strong>写</strong>的方式来促使自己完成进一步的<strong>思考和总结</strong></li><li>记录和<strong>分享</strong>经验，不论是工具类的还是非工具类的。</li></ul><h2 id="快速了解"><a class="markdownIt-Anchor" href="#快速了解"></a> 快速了解</h2><ol><li>Github是一个免费的云端的代码托管平台（远程服务器），我们可以连接该服务器将本地的代码同步上传到其上。它还提供了Github Pages，可以将托管的<strong>网站源码</strong>自动发布成可以被公众访问的<strong>网站</strong>。</li><li>Hexo是一个基于Node.js的博客框架（类似的还有很多包括Jekyll及Hogo等），可将用 Markdown 文档转换为预设好主题样式的 <strong>html 页面</strong>，并可以一键部署到Github等平台<ul><li>Node.js是一种开源且跨平台的 JavaScript 运行时环境，允许我们在Web 浏览器之外执行 JavaScript 代码（包括前中后端），Node.js默认使用npm——包管理器，拥有超多软件包的库 。</li></ul></li></ol><p>因此，通过二者结合，我们可以将<strong>本地的笔记文档（用markdown格式撰写）即使转换为网页并部署到Github</strong>，也就形成了一个简约的博客网站。静态是指内容依赖于html文件而不是根据数据库等动态生成内容。</p><h2 id="部署过程"><a class="markdownIt-Anchor" href="#部署过程"></a> 部署过程</h2><ol><li>本地安装<a href="https://git-scm.com/">Git</a>，一个代码/项目管理软件，此处用于本地与Github“沟通”，同步传输文件</li><li>下载<a href="https://nodejs.org/en">Node.js</a>，<a href="https://www.npmjs.com/">npm</a>是Node.js 的默认程序包管理器，<a href="https://www.freecodecamp.org/chinese/news/what-is-npm-a-node-package-manager-tutorial-for-beginners/">More</a></li><li>使用npm安装<a href="https://hexo.io/docs/index.html">Hexo</a>，初始化文件夹并预览本地网页，我将文件夹放置于<strong>Onedriver</strong>目录下定期同步</li><li>切换Hexo的主题并根据个人喜好修改样式，完成本地初步设置（推荐主题：Next, Maupassant, 3hexo）</li><li>创建Github账号及存储库Repository，库名{username}.github.io即为初始Page地址（一个账号通常只有一个page网页），此处设置需同名。</li><li>创建密匙以自由访问github,连接到Github，本地撰写笔记，即时上传至云端即可</li><li>【可选】创建私有库自动同步备份文件</li></ol><h2 id="步骤参考"><a class="markdownIt-Anchor" href="#步骤参考"></a> 步骤参考</h2><blockquote><p><a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p><p><a href="https://hexo.io/zh-cn/docs/github-pages.html">https://hexo.io/zh-cn/docs/github-pages.html</a></p></blockquote><h3 id="安装hexo并连接github"><a class="markdownIt-Anchor" href="#安装hexo并连接github"></a> 安装hexo并连接github</h3><p>安装hexo，安装完hexo后即可本地预览初始化网页<a href="http://localhost:4000/">http://localhost:4000/</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog   #再当前目录下创建博客根文件夹</span><br><span class="line">cd blog   # 进入目录</span><br><span class="line">hexo server   # http://localhost:4000/</span><br></pre></td></tr></table></figure><p>安装完成后，目录下有如下文件夹，<a href="https://hexo.io/zh-cn/docs/setup">详见</a>：</p><ol><li>_config.yml：Hexo配置文件，设置关于网站的各种信息</li><li>package.json：已安装包的信息</li><li>source：存放推文及草稿等信息，博客文档均位于./source/_posts，这里可以看到初始网页</li><li>scaffolds：关于网页及默认草稿模板的文件，当新建文章时，Hexo 会根据 scaffold 来创建文件.</li><li>themes：主题文件夹，Hexo 会根据主题来生成静态页面，可自行切换修改,下文详细介绍</li></ol><p>配置github</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">git config --global user.name &quot;GitHub用户名&quot;</span><br><span class="line">git config --global user.email &quot;GitHub注册邮箱&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建公钥用于建立和github的连接</span></span><br><span class="line">cat ~/.ssh/id_rsa.pub</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装依赖部署hexo</span></span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure><p>创建同名存储库</p><img src="/posts/1fb16b0c/image-20231029155216880.png" class alt="image-20231029155216880"><img src="/posts/1fb16b0c/image-20231029155709062.png" class alt="image-20231029155709062"><p>在设置中（注意是账户设置不是仓库设置）添加ssh key用于连接</p><img src="/posts/1fb16b0c/image-20231029155525664.png" class alt="image-20231029155525664"><p>最后在_config文件中修改为仓库链接</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _config.yml 文件最底部</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">https://github.com/hhsgis/hhsgis.github.io</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><h3 id="主题详细设置"><a class="markdownIt-Anchor" href="#主题详细设置"></a> 主题详细设置</h3><blockquote><p>以最流行的Next为例，主页：<a href="https://theme-next.js.org/">https://theme-next.js.org/</a></p><p>文档: <a href="https://theme-next.js.org/docs/getting-started/">https://theme-next.js.org/docs/getting-started/</a></p><p>选择流行的主题可以减少很多不必要的麻烦，维护更新快。</p></blockquote><p>Next安装，也可手动到对应的github下载文件夹放置在blog根目录下的theme目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/next-theme/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>在themes主题下可以找到主题文件，通常包含以下文件/文件夹：</p><ul><li><strong>_config.yml</strong>：主题的配置文件，设置主题的样式等等</li><li>languages：语言设置</li><li>layout：主题的布局模板文件</li><li>scripts：脚本文件夹。在启动时，Hexo 会加载此文件夹内的 JavaScript 文件</li><li><strong>source</strong>：主题的资源、样式渲染等的文件存放，包括js css等</li></ul><p>实际上，主要通过_config.yml及source对主题进行进一步的自定义调整。</p><ul><li>关于大部分的设置，都可以借助如下文档的说明以及_config.yml的修改实现，如果一九不满意，则可以借助外部插件并自行编写修改。<ul><li>比如，通过设置<code>scheme: Gemini</code>就可以修改布局为多列的布局</li><li>更多的可以自行探索和尝试，以上</li></ul></li></ul><img src="/posts/1fb16b0c/image-20231025004228891.png" class alt="image-20231025004228891"><h3 id="撰写及发布"><a class="markdownIt-Anchor" href="#撰写及发布"></a> 撰写及发布</h3><p>完成上述步骤之后，就可以进入到对应的文件夹目录，使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;mypost&quot;</span><br></pre></td></tr></table></figure><p>创建一个新的md文件，并在/source/_posts/路径下找到对应的,md文件撰写自己的笔记了，撰写完成后，在命令行执行生成并发布，即完成了上传，但是通常延迟才能看到效果，也可以直接使用<code>hexo s</code>并打开本地站点预览结果并调试，默认<a href="http://localhost:4000/%E3%80%82">http://localhost:4000/。</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>关闭预览使用以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctrl c</span><br></pre></td></tr></table></figure><p>后续内容预告：md文件中的图片上传显示问题的解决，以及本地typora编辑器的联动</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;如题，抽空记录了一下本网站的构建过程以供查阅。这里我基于Github提供的免费网站，并基于&lt;a href=&quot;https://hexo.io/index.html&quot;&gt;Hexo框架&lt;/a&gt;在本地构建并部署，使用的渲染主题是&lt;a href=&quot;https://theme-next.js.org/&quot;&gt;Next&lt;/a&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="Hexo建博客" scheme="https://hscyber.github.io/categories/Hexo%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="Hexo" scheme="https://hscyber.github.io/tags/Hexo/"/>
    
    <category term="GitPage" scheme="https://hscyber.github.io/tags/GitPage/"/>
    
    <category term="Github" scheme="https://hscyber.github.io/tags/Github/"/>
    
    <category term="博客" scheme="https://hscyber.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Pandas(杂)：将多列变量值堆叠为一列以便于matplotlib及seaborn制图</title>
    <link href="https://hscyber.github.io/posts/837ccaeb/"/>
    <id>https://hscyber.github.io/posts/837ccaeb/</id>
    <published>2023-09-06T04:21:05.000Z</published>
    <updated>2023-09-06T06:55:12.827Z</updated>
    
    <content type="html"><![CDATA[<p>在绘图时有时需要将本地的表格转换为目标接口要求的格式 -&gt; reshape。以seaborn绘制多变量箱线图为例，其默认数据接口需要的是<strong>一列数值加一列类型，但是本地通常是多列</strong>，因此需要转换，此外如果涉及到<strong>排序</strong>也需要自行调整，以下为案例代码记录以供复用：</p><span id="more"></span><h2 id="dataframe格式转换"><a class="markdownIt-Anchor" href="#dataframe格式转换"></a> DataFrame格式转换</h2><p>比如我的表格为如下的，n行6列的表格，其中5列代表五个不同的变量，需要将其转换为三列:UID, Typename, Value</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;UID&quot;</span>: <span class="built_in">range</span>(<span class="number">12</span>),</span><br><span class="line">        <span class="string">&quot;x1&quot;</span>: np.random.randn(<span class="number">12</span>),</span><br><span class="line">        <span class="string">&quot;x2&quot;</span>: np.random.randn(<span class="number">12</span>),</span><br><span class="line">        <span class="string">&quot;x3&quot;</span>: np.random.randn(<span class="number">12</span>),</span><br><span class="line">        <span class="string">&quot;x4&quot;</span>: np.random.randn(<span class="number">12</span>),</span><br><span class="line">        <span class="string">&quot;x5&quot;</span>: np.random.randn(<span class="number">12</span>),</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><img src="/posts/837ccaeb/image-20230906144957498.png" class alt="image-20230906144957498"><p>使用<a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.stack.html">pd.stack()</a>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df2 = df.set_index(<span class="string">&quot;UID&quot;</span>)</span><br><span class="line">df2 = df2.stack().reset_index()</span><br><span class="line">df2.columns = [<span class="string">&quot;UID&quot;</span>,<span class="string">&quot;typaneme&quot;</span>,<span class="string">&quot;y&quot;</span>]</span><br><span class="line">df2</span><br></pre></td></tr></table></figure><p>不使用函数自行定义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">stack_data</span>(<span class="params">datatable, typenames, col_id</span>):</span><br><span class="line">    uids = []</span><br><span class="line">    names = []</span><br><span class="line">    values = []</span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> typenames:</span><br><span class="line">        value = <span class="built_in">list</span>(datatable[col])</span><br><span class="line">        names.extend([col]*<span class="built_in">len</span>(value))</span><br><span class="line">        values.extend(value)</span><br><span class="line">        uids.extend(datatable[col_id])</span><br><span class="line">    df_temp = pd.DataFrame(&#123;col_id:uids,<span class="string">&quot;typename&quot;</span>:names, <span class="string">&quot;y&quot;</span>:values&#125;)</span><br><span class="line">    <span class="keyword">return</span> df_temp</span><br><span class="line"><span class="comment"># 选定要堆叠的变量</span></span><br><span class="line">cols = <span class="built_in">list</span>(df.columns[<span class="number">1</span>:])</span><br><span class="line">typenames = cols</span><br><span class="line"><span class="comment"># [&#x27;x1&#x27;, &#x27;x2&#x27;, &#x27;x3&#x27;, &#x27;x4&#x27;, &#x27;x5&#x27;]</span></span><br><span class="line">df_temp = stack_data(df,typenames,<span class="string">&quot;UID&quot;</span>)</span><br><span class="line">df_temp</span><br></pre></td></tr></table></figure><p>如果不需要UID列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">stack_data</span>(<span class="params">datatable, typenames</span>):</span><br><span class="line">    names = []</span><br><span class="line">    values = []</span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> typenames:</span><br><span class="line">        value = <span class="built_in">list</span>(datatable[col])</span><br><span class="line">        names.extend([col]*<span class="built_in">len</span>(value))</span><br><span class="line">        values.extend(value)</span><br><span class="line">    df_temp = pd.DataFrame(&#123;<span class="string">&quot;typename&quot;</span>:names, <span class="string">&quot;y&quot;</span>:values&#125;)</span><br><span class="line">    <span class="keyword">return</span> df_temp</span><br><span class="line"><span class="comment"># 选定要堆叠的变量</span></span><br><span class="line">cols = <span class="built_in">list</span>(df.columns[<span class="number">1</span>:])</span><br><span class="line">typenames = cols</span><br><span class="line"></span><br><span class="line">df_temp = stack_data(df,typenames)</span><br><span class="line">df_temp</span><br></pre></td></tr></table></figure><h2 id="按照统计值排序"><a class="markdownIt-Anchor" href="#按照统计值排序"></a> 按照统计值排序</h2><blockquote><p>如果是直接排序，直接对得到的表格进行排序即可，df.sort_values(by=[“y”], scending=False,ignore_index=False)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#直接对堆叠后的值排序如下， 也可多列进行排序，也可以结合set_index();sort_index()函数操作</span></span><br><span class="line">df_temp.sort_values(by=[<span class="string">&quot;y&quot;</span>], ascending=[<span class="literal">False</span>],ignore_index=<span class="literal">False</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>有时候需要先<strong>对列进行排序</strong>再进行堆叠，比如按照中位数或者均值排列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">df3 = df[df.columns[<span class="number">1</span>:]]</span><br><span class="line">meds = df3.median()</span><br><span class="line">meds = meds.sort_values(ascending=<span class="literal">False</span>)</span><br><span class="line">cols_sort = <span class="built_in">list</span>(meds.index)</span><br><span class="line"><span class="comment"># cols_sort即为按照列的中位数调整顺序后的列名[&#x27;x2&#x27;, &#x27;x5&#x27;, &#x27;x1&#x27;, &#x27;x4&#x27;, &#x27;x3&#x27;]</span></span><br><span class="line">cols_sort.insert(<span class="number">0</span>,<span class="string">&quot;UID&quot;</span>)</span><br><span class="line">df3 = df[cols_sort]</span><br><span class="line"></span><br><span class="line">....</span><br><span class="line"><span class="comment"># 再进行堆叠即可得到新的按照变量的中值进行排序的结果</span></span><br></pre></td></tr></table></figure><h2 id="seaborn绘图示意"><a class="markdownIt-Anchor" href="#seaborn绘图示意"></a> Seaborn绘图示意</h2><blockquote><p>seaborn.boxplot(data=None, *, x=None, y=None, hue=None, order=None, hue_order=None, orient=None, color=None, palette=None, saturation=0.75, width=0.8, dodge=True, fliersize=5, linewidth=None, whis=1.5, ax=None, **kwargs)</p></blockquote><p>实际上我们可以对该图进行定制，包括颜色，文字，线和箱等等，后续单独记一下boxplot的调参</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">sns.set_theme(style=<span class="string">&quot;ticks&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialize the figure with a logarithmic x axis</span></span><br><span class="line">f, ax = plt.subplots(figsize=(<span class="number">7</span>, <span class="number">6</span>))</span><br><span class="line">ax.set_xscale(<span class="string">&quot;log&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load the example planets dataset</span></span><br><span class="line">planets = sns.load_dataset(<span class="string">&quot;planets&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot the orbital period with horizontal boxes</span></span><br><span class="line">sns.boxplot(x=<span class="string">&quot;distance&quot;</span>, y=<span class="string">&quot;method&quot;</span>, data=planets,</span><br><span class="line">            whis=[<span class="number">0</span>, <span class="number">100</span>], width=<span class="number">.6</span>, palette=<span class="string">&quot;vlag&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add in points to show each observation</span></span><br><span class="line">sns.stripplot(x=<span class="string">&quot;distance&quot;</span>, y=<span class="string">&quot;method&quot;</span>, data=planets,</span><br><span class="line">              size=<span class="number">4</span>, color=<span class="string">&quot;.3&quot;</span>, linewidth=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Tweak the visual presentation</span></span><br><span class="line">ax.xaxis.grid(<span class="literal">True</span>)</span><br><span class="line">ax.<span class="built_in">set</span>(ylabel=<span class="string">&quot;&quot;</span>)</span><br><span class="line">sns.despine(trim=<span class="literal">True</span>, left=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><img src="/posts/837ccaeb/box.jpeg" class alt="image"><h2 id><a class="markdownIt-Anchor" href="#"></a> </h2><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><ul><li><a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/reshaping.html#reshaping-stacking">pandas-reshape</a></li><li><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.sort_values.html">pandas.DataFrame.sort_values</a></li><li><a href="https://seaborn.pydata.org/generated/seaborn.boxplot.html#seaborn.boxplot">seaborn boxplot</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;在绘图时有时需要将本地的表格转换为目标接口要求的格式 -&amp;gt; reshape。以seaborn绘制多变量箱线图为例，其默认数据接口需要的是&lt;strong&gt;一列数值加一列类型，但是本地通常是多列&lt;/strong&gt;，因此需要转换，此外如果涉及到&lt;strong&gt;排序&lt;/strong&gt;也需要自行调整，以下为案例代码记录以供复用：&lt;/p&gt;</summary>
    
    
    
    <category term="Pandas数据处理分析" scheme="https://hscyber.github.io/categories/Pandas%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Pandas" scheme="https://hscyber.github.io/tags/Pandas/"/>
    
  </entry>
  
  <entry>
    <title>重装或者新装windows系统</title>
    <link href="https://hscyber.github.io/posts/aee76f8e/"/>
    <id>https://hscyber.github.io/posts/aee76f8e/</id>
    <published>2023-08-14T05:12:41.000Z</published>
    <updated>2023-08-14T06:56:18.505Z</updated>
    
    <content type="html"><![CDATA[<p>近期准备把旧电脑给弟用，游戏本，之前装的ubuntu系统，现在重装回windows10，现在装系统之类的事情都十分便捷，此处简单记录一下步骤</p><span id="more"></span><h2 id="u盘安装win"><a class="markdownIt-Anchor" href="#u盘安装win"></a> U盘安装win</h2><blockquote><p>如果是在原本就是window系统电脑上升级或者重装，直接安装即可</p></blockquote><p>准备一个U盘（大于8G），步骤（制作驱动–重启进入启动项–安装）如下：</p><ol><li>下载window官方安装工具<a href="https://www.microsoft.com/zh-cn/software-download/windows10">地址</a>，一路next</li><li>安装方式选择选择安装iso镜像</li><li>创建完之后会选择路径下载一个iso文件</li><li>等待下载完成，下载工具进行USB驱动器创建，我用的是<a href="https://rufus.ie/en/">Rufus</a></li><li>添加镜像并完成驱动器创建</li><li>在目标电脑上安装即可：<ol><li>重启/关机，打开启动项，惠普是F9，联想默认F9，工作中好像是F12</li><li>切换启动项，选择从U盘启动（即刚刚插入的U盘）</li><li>然后安装系统即可，必要时删除原分区或者格式化</li><li>安装过程需要选择登录微软账户，如果有则直接登录即可，也可以注册再登，用QQ邮箱即可</li></ol></li></ol><img src="/posts/aee76f8e/image-20230814131816766.png" class alt="image-20230814131816766"><img src="/posts/aee76f8e/image-20230814131947964.png" class alt="image-20230814131947964"><img src="/posts/aee76f8e/image-20230814132421537.png" class alt="image-20230814132421537"><h2 id="系统选择和激活"><a class="markdownIt-Anchor" href="#系统选择和激活"></a> 系统选择和激活</h2><p>选择的时候可以选择家庭版或者专业版，我选的是专业版，权限回多一点</p><ol><li>激活的时候可以直接t宝或者拼dd买一个激活码激活windows，10块钱</li><li>然后如果需要office，再几十块钱买一个office绑定微软账户即可</li><li>官网下载并完成office安装</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;近期准备把旧电脑给弟用，游戏本，之前装的ubuntu系统，现在重装回windows10，现在装系统之类的事情都十分便捷，此处简单记录一下步骤&lt;/p&gt;</summary>
    
    
    
    <category term="Tools" scheme="https://hscyber.github.io/categories/Tools/"/>
    
    
    <category term="重装系统" scheme="https://hscyber.github.io/tags/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="windows" scheme="https://hscyber.github.io/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>R语言可视化基础(1)：初识ggplot2</title>
    <link href="https://hscyber.github.io/posts/f16647ba/"/>
    <id>https://hscyber.github.io/posts/f16647ba/</id>
    <published>2023-05-11T13:07:53.000Z</published>
    <updated>2023-05-12T01:41:01.159Z</updated>
    
    <content type="html"><![CDATA[<p>初始R语言ggplot2绘图包，了解其绘图逻辑</p><span id="more"></span><h2 id="ggplot2的一些术语"><a class="markdownIt-Anchor" href="#ggplot2的一些术语"></a> ggplot2的一些术语</h2><blockquote><p>绘图是一种数据属性到视觉属性的“映射”(mapping)，或者说对应</p></blockquote><p>Plot(图)= data(数据集)+ Aesthetics(美学映射)+ Geometry(几何对象)。</p><ol><li>数据(data): 用于可视化的对象，包含变量(variables)，变量存储在数据库(dataframe)的每一列。<font color="#dd0000">ggplot2要求数据必须存储在数据框中，且每个属性变量必须独立集中存储在一列。</font></li><li>变量类型：类别型变量称为离散型变量，数值型则称为连续型变量</li><li>几何对象 (geom)：用于呈现数据的几何图形，如点、线、多边形等，如geom_point，geom_bar，geom_line，geom_histogram，geom_boxplot，geom_density等用来绘制散点图、柱状图、折线图等等</li><li>图形属性 (aesthetic)：几何对象的视觉属性，如x yzuobiao ,线的颜色</li><li>映射函数（aes）：数据中的变量值与图形的映射，如 aes(x =变量1 , y = 变量2,col=变量3）</li><li>标度 (scale)：从值到图形的转换关系，一般使用三个单词用_连接，如scale_fill_gradient和cale_x_continuous第一个都是scale，第二个是color fill x y linetype shape size等可更改的参数，第三个是具体的类型</li><li>统计变换（Statistics）：如 stat_summary(fun.y = mean, geom = “line”)计算均值并添加线，stat_smooth添加拟合曲线。</li><li>分面 (facet)：将数据拆开，进行分层画图</li><li>主题 (theme)：主题设定，与数据无关的很多属性可以通过这个函数实现。如边距等，ggplot默认有两个主题theme_grey()和theme_bw(), 设置当前主题的函数是theme_set()<ol><li>根据需求对图的外观、属性等进行精细调节，详细<a href="https://r-graphics.org/recipe-appearance-theme-modify">参考</a></li></ol></li><li>引导元素 (guide)：向看图者将视觉属性<strong>映射回</strong>数据空间，常用的引导元素包括刻度线、标签等</li><li>注释 (annotate): 在图上增增加的注释，文字、线、框等</li></ol><p>ggplot2采用了<strong>图层</strong>的概念进行画图，先画好基础图，然后再往上一层一层叠加图层，所以在进行ggplot2画图的时候，代码中会有大量的“+”，这就是对于图层的叠加。</p><h2 id="绘图步骤"><a class="markdownIt-Anchor" href="#绘图步骤"></a> 绘图步骤</h2><p><a href="https://zhuanlan.zhihu.com/p/581073260">参考</a>，导入包及数据，然后设置数据集映射指标，然后进行各种图层的叠加和属性的修改，最后导出图片,</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">library<span class="punctuation">(</span>ggplot2<span class="punctuation">)</span></span><br><span class="line">data<span class="punctuation">(</span><span class="string">&quot;diamonds&quot;</span><span class="punctuation">)</span></span><br><span class="line">set.seed<span class="punctuation">(</span><span class="number">300</span><span class="punctuation">)</span> <span class="comment">#设置种子，保证可重复</span></span><br><span class="line">diamonds<span class="operator">=</span>sample_n<span class="punctuation">(</span>diamonds<span class="punctuation">,</span>size <span class="operator">=</span> <span class="number">300</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># 开始绘图</span></span><br><span class="line">dev.new<span class="punctuation">(</span><span class="punctuation">)</span><span class="comment"># 新建独立窗口</span></span><br><span class="line">p <span class="operator">=</span> ggplot<span class="punctuation">(</span>data<span class="operator">=</span>diamonds<span class="punctuation">,</span>aes<span class="punctuation">(</span>x<span class="operator">=</span>carat<span class="punctuation">,</span>y<span class="operator">=</span>price<span class="punctuation">)</span><span class="punctuation">)</span><span class="operator">+</span></span><br><span class="line">  geom_point<span class="punctuation">(</span>size<span class="operator">=</span><span class="number">3</span><span class="punctuation">,</span>shape<span class="operator">=</span><span class="number">23</span><span class="punctuation">,</span>aes<span class="punctuation">(</span>fill<span class="operator">=</span>cut<span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">p <span class="operator">=</span> p<span class="operator">+</span> geom_smooth<span class="punctuation">(</span>method <span class="operator">=</span> <span class="string">&quot;lm&quot;</span><span class="punctuation">)</span><span class="operator">+</span></span><br><span class="line">  labs<span class="punctuation">(</span>y<span class="operator">=</span><span class="string">&quot;price&quot;</span><span class="punctuation">,</span>x<span class="operator">=</span><span class="string">&quot;carct&quot;</span><span class="punctuation">)</span><span class="operator">+</span></span><br><span class="line">  annotate<span class="punctuation">(</span><span class="string">&quot;text&quot;</span><span class="punctuation">,</span>x<span class="operator">=</span><span class="number">2</span><span class="punctuation">,</span>y<span class="operator">=</span><span class="number">20000</span><span class="punctuation">,</span>size<span class="operator">=</span><span class="number">5</span><span class="punctuation">,</span>label<span class="operator">=</span><span class="built_in">expression</span><span class="punctuation">(</span>paste<span class="punctuation">(</span>italic<span class="punctuation">(</span><span class="string">&quot;p_value&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span><span class="string">&quot;=0.005&quot;</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">p <span class="operator">=</span> p<span class="operator">+</span>scale_y_continuous<span class="punctuation">(</span>expand <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">0</span><span class="punctuation">,</span><span class="number">0</span><span class="punctuation">)</span><span class="punctuation">,</span>limits <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">0</span><span class="punctuation">,</span><span class="number">20000</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="operator">+</span> </span><br><span class="line">  scale_x_continuous<span class="punctuation">(</span>expand <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">0</span><span class="punctuation">,</span><span class="number">0</span><span class="punctuation">)</span><span class="punctuation">,</span>limits <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">0</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="operator">+</span> <span class="comment">#设置值的范围，同时让点与x，y轴没有间隙</span></span><br><span class="line">  scale_fill_manual<span class="punctuation">(</span>values <span class="operator">=</span><span class="built_in">c</span><span class="punctuation">(</span><span class="string">&#x27;#B4B4B4&#x27;</span><span class="punctuation">,</span><span class="string">&#x27;#F7BC08&#x27;</span><span class="punctuation">,</span><span class="string">&quot;#E94335&quot;</span><span class="punctuation">,</span><span class="string">&quot;#1194C2&quot;</span><span class="punctuation">,</span><span class="string">&quot;#954B98&quot;</span><span class="punctuation">)</span> <span class="punctuation">)</span><span class="comment">#设置点的颜色范围</span></span><br><span class="line"></span><br><span class="line">p <span class="operator">=</span> p<span class="operator">+</span>theme_classic<span class="punctuation">(</span><span class="punctuation">)</span><span class="operator">+</span></span><br><span class="line">  theme<span class="punctuation">(</span>axis.title<span class="operator">=</span> element_text<span class="punctuation">(</span>size<span class="operator">=</span><span class="number">20</span><span class="punctuation">,</span>color<span class="operator">=</span><span class="string">&quot;black&quot;</span><span class="punctuation">,</span>face<span class="operator">=</span><span class="string">&quot;bold&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">        axis.text <span class="operator">=</span> element_text<span class="punctuation">(</span>size<span class="operator">=</span><span class="number">15</span><span class="punctuation">,</span>color<span class="operator">=</span><span class="string">&quot;black&quot;</span><span class="punctuation">,</span>face<span class="operator">=</span><span class="string">&quot;bold&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">        axis.line <span class="operator">=</span> element_line <span class="punctuation">(</span>color <span class="operator">=</span> <span class="string">&quot;black&quot;</span><span class="punctuation">,</span>size <span class="operator">=</span> <span class="number">1</span><span class="punctuation">,</span> linetype <span class="operator">=</span> <span class="string">&quot;solid&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span> <span class="comment">#线的类型粗细和颜色，这里的线只有两个轴</span></span><br><span class="line">        axis.ticks <span class="operator">=</span> element_line<span class="punctuation">(</span>color <span class="operator">=</span> <span class="string">&quot;black&quot;</span><span class="punctuation">,</span>size <span class="operator">=</span> <span class="number">1</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">        axis.ticks.length <span class="operator">=</span> unit<span class="punctuation">(</span><span class="number">5</span><span class="punctuation">,</span> <span class="string">&quot;pt&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">        legend.position <span class="operator">=</span> <span class="string">&quot;top&quot;</span><span class="punctuation">,</span>  <span class="comment">#图例的位置</span></span><br><span class="line">        legend.text <span class="operator">=</span> element_text<span class="punctuation">(</span>size<span class="operator">=</span><span class="number">15</span><span class="punctuation">,</span>color<span class="operator">=</span><span class="string">&quot;black&quot;</span><span class="punctuation">,</span>face<span class="operator">=</span><span class="string">&quot;bold&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">        legend.title <span class="operator">=</span> element_blank<span class="punctuation">(</span><span class="punctuation">)</span></span><br><span class="line">  <span class="punctuation">)</span></span><br><span class="line">p</span><br></pre></td></tr></table></figure><p>了解初步思路之后视情况进行对应图形的调整即可</p><h2 id="输出文件-ggsave"><a class="markdownIt-Anchor" href="#输出文件-ggsave"></a> 输出文件-ggsave</h2><h3 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> pdf</h3><p>参考-<a href="https://r-graphics.org/recipe-output-vector">https://r-graphics.org/recipe-output-vector</a></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 快捷使用。</span></span><br><span class="line"><span class="comment"># 生成图形</span></span><br><span class="line">plot1 <span class="operator">&lt;-</span> ggplot<span class="punctuation">(</span>mtcars<span class="punctuation">,</span> aes<span class="punctuation">(</span>x <span class="operator">=</span> wt<span class="punctuation">,</span> y <span class="operator">=</span> mpg<span class="punctuation">)</span><span class="punctuation">)</span> <span class="operator">+</span></span><br><span class="line">  geom_point<span class="punctuation">(</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># Default is inches, but you can specify unit</span></span><br><span class="line">ggsave<span class="punctuation">(</span><span class="string">&quot;myplot.pdf&quot;</span><span class="punctuation">,</span> plot1<span class="punctuation">,</span> width <span class="operator">=</span> <span class="number">8</span><span class="punctuation">,</span> height <span class="operator">=</span> <span class="number">8</span><span class="punctuation">,</span> units <span class="operator">=</span> <span class="string">&quot;cm&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下方式可以可以多页绘图</span></span><br><span class="line"><span class="comment"># width and height are in inches. 创建并打开一个文件</span></span><br><span class="line">pdf<span class="punctuation">(</span><span class="string">&quot;myplot.pdf&quot;</span><span class="punctuation">,</span> width <span class="operator">=</span> <span class="number">4</span><span class="punctuation">,</span> height <span class="operator">=</span> <span class="number">4</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># 如果按尺寸转换，8x8 cm，这里和Python中是一样的</span></span><br><span class="line">pdf<span class="punctuation">(</span><span class="string">&quot;myplot.pdf&quot;</span><span class="punctuation">,</span> width <span class="operator">=</span> <span class="number">8</span><span class="operator">/</span><span class="number">2.54</span><span class="punctuation">,</span> height <span class="operator">=</span> <span class="number">8</span><span class="operator">/</span><span class="number">2.54</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># 绘图</span></span><br><span class="line">plot<span class="punctuation">(</span>mtcars<span class="operator">$</span>wt<span class="punctuation">,</span> mtcars<span class="operator">$</span>mpg<span class="punctuation">)</span></span><br><span class="line">print<span class="punctuation">(</span>ggplot<span class="punctuation">(</span>mtcars<span class="punctuation">,</span> aes<span class="punctuation">(</span>x <span class="operator">=</span> wt<span class="punctuation">,</span> y <span class="operator">=</span> mpg<span class="punctuation">)</span><span class="punctuation">)</span> <span class="operator">+</span> geom_point<span class="punctuation">(</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># 结束绘图并写出</span></span><br><span class="line">dev.off<span class="punctuation">(</span><span class="punctuation">)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="svg"><a class="markdownIt-Anchor" href="#svg"></a> svg</h3><p>参考-<a href="https://r-graphics.org/recipe-output-vector-svg">https://r-graphics.org/recipe-output-vector-svg</a></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">library<span class="punctuation">(</span>svglite<span class="punctuation">)</span></span><br><span class="line">svglite<span class="punctuation">(</span><span class="string">&quot;myplot.svg&quot;</span><span class="punctuation">,</span> width <span class="operator">=</span> <span class="number">4</span><span class="punctuation">,</span> height <span class="operator">=</span> <span class="number">4</span><span class="punctuation">)</span></span><br><span class="line">plot<span class="punctuation">(</span>...<span class="punctuation">)</span></span><br><span class="line">dev.off<span class="punctuation">(</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># With ggsave()</span></span><br><span class="line">ggsave<span class="punctuation">(</span><span class="string">&quot;myplot.svg&quot;</span><span class="punctuation">,</span> width <span class="operator">=</span> <span class="number">8</span><span class="punctuation">,</span> height <span class="operator">=</span> <span class="number">8</span><span class="punctuation">,</span> units <span class="operator">=</span> <span class="string">&quot;cm&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h3 id="png"><a class="markdownIt-Anchor" href="#png"></a> png</h3><p>参考-<a href="https://r-graphics.org/recipe-output-bitmap">https://r-graphics.org/recipe-output-bitmap</a></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ggplot<span class="punctuation">(</span>mtcars<span class="punctuation">,</span> aes<span class="punctuation">(</span>x <span class="operator">=</span> wt<span class="punctuation">,</span> y <span class="operator">=</span> mpg<span class="punctuation">)</span><span class="punctuation">)</span> <span class="operator">+</span> geom_point<span class="punctuation">(</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># Default dimensions are in inches, but you can specify the unit</span></span><br><span class="line">ggsave<span class="punctuation">(</span><span class="string">&quot;myplot.png&quot;</span><span class="punctuation">,</span> width <span class="operator">=</span> <span class="number">8</span><span class="punctuation">,</span> height <span class="operator">=</span> <span class="number">8</span><span class="punctuation">,</span> unit <span class="operator">=</span> <span class="string">&quot;cm&quot;</span><span class="punctuation">,</span> dpi <span class="operator">=</span> <span class="number">300</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><ul><li><p>ggplot2|详解八大基本绘图要素：<a href="https://zhuanlan.zhihu.com/p/77875382">https://zhuanlan.zhihu.com/p/77875382</a></p></li><li><p>R数据可视化手册：<a href="https://r-graphics.org/index.html">https://r-graphics.org/index.html</a></p></li><li><p>ggplot2的绘图逻辑：<a href="https://zhuanlan.zhihu.com/p/581073260">其他1</a>，<a href="https://www.sohu.com/a/397306897_120233365">其他2</a></p></li><li><p>如何在论文中画出漂亮的插图？<a href="https://www.zhihu.com/question/21664179/answer/2747278312">https://www.zhihu.com/question/21664179/answer/2747278312</a></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;初始R语言ggplot2绘图包，了解其绘图逻辑&lt;/p&gt;</summary>
    
    
    
    
    <category term="R语言" scheme="https://hscyber.github.io/tags/R%E8%AF%AD%E8%A8%80/"/>
    
    <category term="ggplot" scheme="https://hscyber.github.io/tags/ggplot/"/>
    
  </entry>
  
  <entry>
    <title>R语言基础(2)：Python与R</title>
    <link href="https://hscyber.github.io/posts/366e33e8/"/>
    <id>https://hscyber.github.io/posts/366e33e8/</id>
    <published>2023-05-11T12:38:05.000Z</published>
    <updated>2023-05-11T15:12:57.421Z</updated>
    
    <content type="html"><![CDATA[<p>上一次用R语言已经是去年的事情了，最近想用R进行制图（在涉及统计和统计图表方面还得是R），R的图表和配色也都很好看，便开始再来学一学R。</p><span id="more"></span><h2 id="r-python-conversion-guide"><a class="markdownIt-Anchor" href="#r-python-conversion-guide"></a> R-Python conversion guide</h2><p>直接跳转到这位前辈的博客：</p><p><a href="https://www.mit.edu/~amidi/teaching/data-science-tools/">Data Science Tools</a></p><p><a href="https://www.mit.edu/~amidi/teaching/data-science-tools/conversion-guide/r-python-data-manipulation/">Data manipulation R-Python conversion guide</a></p><p><a href="https://www.mit.edu/~amidi/teaching/data-science-tools/conversion-guide/r-python-data-visualization/">Data visualization</a></p><h2 id="r的便捷与缺点"><a class="markdownIt-Anchor" href="#r的便捷与缺点"></a> R的便捷与缺点</h2><blockquote><p>从Python到R会觉得R的格式不规范</p></blockquote><p>接触过一点时间会发现R语言在某种程度上用起来比R方便，功能的实现只需要找到一个响应的函数，传入参数，得到相应的输出，也就是<font color="#dd0000">封装地更“好”</font>，用起来更简单(傻瓜)了，但是对我来说，便捷之处我感觉就是引出了它的一些缺点：</p><ol><li>包与函数之间缺乏<mark>逻辑</mark>，不便于查文档和学习包。距离来说，Python中处理文件目录路径相关的操作，都在os中就可以完成，只需要import os，然后通过os.path.split(), os.listdir()等调用即可，<mark>Python的包查看文档和接口说明十分方便</mark>，R语言则不是，<font color="#dd0000">看到一个R的函数，我都不知道它是否是内置函数，也不知道它属于哪个包，给我的感觉很不好</font>，这可能需要更多的时间来熟悉和查询</li><li>文档不友好。包带来的问题是文档的杂乱，平时我一般通过API文档来查看函数细节，但是R的网页版不方便，而且还存在重名函数等问题，看的很不习惯</li><li>不方便查看和debug，首先是代码不好看（这个还能忍），可读性不佳，另一个是不好改和参考别人的代码，函数和包给人的感觉总是比较乱，想用前辈的代码比较痛苦，相较于Python。</li><li>此外，用的时候发现R不支持中文字符串；</li></ol><p>所以还是不便于用它进行数据处理而仅作为统计分析建模以及可视化工具</p><ul><li>最近开始专门学习一下R的<mark>ggplot2</mark>制图</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;上一次用R语言已经是去年的事情了，最近想用R进行制图（在涉及统计和统计图表方面还得是R），R的图表和配色也都很好看，便开始再来学一学R。&lt;/p&gt;</summary>
    
    
    
    <category term="R语言" scheme="https://hscyber.github.io/categories/R%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="R语言" scheme="https://hscyber.github.io/tags/R%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>GIS基础(杂)：自相关/热点/异常分析，Moran&#39;s I和Gets-Ord Gi对比</title>
    <link href="https://hscyber.github.io/posts/51a1b003/"/>
    <id>https://hscyber.github.io/posts/51a1b003/</id>
    <published>2023-03-23T03:07:51.000Z</published>
    <updated>2023-03-23T13:34:39.887Z</updated>
    
    <content type="html"><![CDATA[<p><strong>空间自相关强度计算、热点分析与异常值分析</strong>是空间分析中的常用工具，在此简单辨析一下空间自相关等相关工具的差异和用法。主要对比的是全局和局部的<mark>Moran‘s I</mark>以及<mark>Getis-Ord General G</mark>。</p><span id="more"></span><h2 id="实际使用指南"><a class="markdownIt-Anchor" href="#实际使用指南"></a> 实际使用指南</h2><ol><li>方法的使用有前提假设，具体可以查看-<a href="https://pro.arcgis.com/en/pro-app/latest/tool-reference/spatial-statistics/what-is-a-z-score-what-is-a-p-value.htm">参考</a></li><li>使用方法前，一定要明确分析的目标以及对应冷点热点或者聚集区的<mark>物理含义及解释</mark></li><li>需要使用投影坐标系，单位为m或km</li><li>全局的Moran指数和Gets G都只能从整体上推断数据特征的<strong>空间分布</strong>，前者是判断随机还是分散还是聚集，当然，值的大小也可以指示强度；后者是给出高值或低值是否聚集，聚集程度。</li><li>对于距离阈值的判断可以采用遍历的方式寻找阈值，ArcGIS/Pro提供了工具<a href="https://pro.arcgis.com/en/pro-app/latest/tool-reference/spatial-statistics/incremental-spatial-autocorrelation.htm">增量空间自相关分析——寻找距离阈值</a>，或者也可以使用R语言实现/Spatial Correlograms，此处的阈值也即是观测的尺度。</li><li>采用的是常用的Z-score进行统计显著性检验，因为只涉及单个数值的检验。</li></ol><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">尺度</th><th style="text-align:center">用途</th><th style="text-align:center">取值</th></tr></thead><tbody><tr><td style="text-align:center">Moran’s I</td><td style="text-align:center">Global</td><td style="text-align:center">整体上是聚集还是发散，也可以给出程度</td><td style="text-align:center">-1，0，1</td></tr><tr><td style="text-align:center">Getis-Ord Gi</td><td style="text-align:center">Global</td><td style="text-align:center">高低值聚集程度</td><td style="text-align:center">&gt;0</td></tr><tr><td style="text-align:center">Local Moran’s I</td><td style="text-align:center">Local/逐对象</td><td style="text-align:center">高/低值聚类探测，异常值分析</td><td style="text-align:center">HH;LL;HJ;LH;不显著区（5类）</td></tr><tr><td style="text-align:center">Getis-Ord Gi*</td><td style="text-align:center">Local/逐对象</td><td style="text-align:center">高/低值聚集区（热点区域）探测</td><td style="text-align:center">±90 95 99%显著;不显著区（7类）</td></tr></tbody></table><h2 id="global尺度"><a class="markdownIt-Anchor" href="#global尺度"></a> Global尺度</h2><blockquote><p>全局Moran’s I 是在假定均质的情况下给出变量总体自相关程度的统计量</p></blockquote><p>空间自相关(Spatial autocorrelation)，空间自相关用来刻画一个对象与其临近对象的<strong>相似</strong>程度。<font color="#dd0000">Moran’s I是用于推断变量“整体”的聚集程度，是倾向于聚集分布还是随机分布，而General G是判断变量中的“高值或低值”的聚集程度。</font></p><img src="/posts/51a1b003/image-20230323113652065.png" class alt="image-20230323113652065"><h3 id="morans-i"><a class="markdownIt-Anchor" href="#morans-i"></a> Moran’s I</h3><p>Moran’s I衡量区域 (Global)尺度上某空间随机变量整体自相关的程度，这里比较的对象为<mark>整体的均值</mark></p><ul><li>通俗理解：协方差矩阵为正，代表“同方向变化”，为负则说明领域周围有的大于<strong>整体均值</strong>，有的比均值小。</li><li>Moran’s I 取值范围：[-1, 0, +1]，对应表明：负自相关-随机分布-正自相关，结果<strong>解释</strong>：<ul><li>显著的<mark>正</mark>Z(+1.65, 单侧0.05)表明变量空间分布比期望的随机分布更加<mark>聚集</mark>(正相关)</li><li>显著的<mark>负</mark>Z( -1.65, 单侧0.05)表明变量空间分布比期望的随机分布更加<mark>分散</mark>(负相关)</li></ul></li></ul><img src="/posts/51a1b003/image-20230323112814561.png" class alt="image-20230323112814561"><h3 id="getis-ord-general-g"><a class="markdownIt-Anchor" href="#getis-ord-general-g"></a> Getis-Ord General G</h3><p>Getis-Ord General G 是衡量区域(Global)尺度上某空间随机变量高值/低值的聚集程度的统计量, a measure of High/Low clustering。General G为正值&gt;0，但对于一个二值(0/1)的wij来说，G取值[0, +1]</p><ul><li>显著的<mark>正</mark>Z(+1.65, 单侧0.05)表明<mark>高值</mark>变量空间分布比期望的随机分布更加聚集</li><li>显著的<mark>负</mark>Z( -1.65, 单侧0.05)表明<mark>低值</mark>变量空间分布比期望的随机分布更加聚集</li></ul><h2 id="local尺度聚类及异常分析"><a class="markdownIt-Anchor" href="#local尺度聚类及异常分析"></a> Local尺度——聚类及异常分析</h2><p>以下两种方式的差异，<a href="https://www.mattpeeples.net/modules/LISA.html">具体可参考</a>。简单来说，局部莫兰指数除了可以进行高低值聚类分析，还可以用于异常值分析，而Getis-Ord Gi* 则主要用于高高值或低低值的聚团发现，如下图我选一个区域，同时在30km的范围内计算二者的值，结果：</p><img src="/posts/51a1b003/%E6%96%B9%E6%B3%95%E5%AF%B9%E6%AF%94.png" class alt="方法对比"><h3 id="local-morans-i"><a class="markdownIt-Anchor" href="#local-morans-i"></a> Local Moran’s I</h3><p>实际上Moran’s I可以拆成n个Moran’s <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>I</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">I_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的相乘，个体单元尺度上的空间自相关程度Local indicators of spatial association (LISA)。即使不存在显著的全局自相关/聚集，局部尺度也可能存在。<strong>对于每个对象</strong>，我们都计算它与周边对象的相似程度（周围的也都是高值还是都是低值，还是有高有低），注意，此处的高低是相对于全局均值而言。</p><p><strong>解释</strong>：</p><ul><li>显著的正Zi(+1.65, 单侧0.05)表明i单元与邻居有相似的值(高-高/低-低)-即聚集(Clusters)</li><li>显著的负Zi( -1.65, 单侧0.05)表明i单元与邻居有相异的值(高-低/低-高)-即异常(Outliers)</li><li>由此可以识别高-高(HH)和低-低(LL)聚集，以及高-低(HL)和低-高(LH)异常</li></ul><h3 id="getis-ord-gi"><a class="markdownIt-Anchor" href="#getis-ord-gi"></a> Getis-Ord Gi*</h3><p>高值对象很重要，但可能不是具有统计意义的热点。要成为统计上显着的热点，一个对象将具高值并且被其他高值对象包围。一个对象及其邻居的<strong>局部总和</strong>与所有对象的<strong>总和</strong>成比例地进行比较；当局部总和与预期的局部总和有很大差异时，并且当该差异太大以至于不是随机机会的结果时，会产生具有统计显着性的z 分数。</p><ul><li>显著正 z 分数，z 分数越大，高值（热点）的聚类就越强烈</li><li>显著负 z 分数，z 分数越小，低值（冷点）的聚类就越强烈。</li></ul><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><ul><li>空间统计分析 R 语言 / 马廷编著. ——北京：科学出版社，2022.10</li><li><a href="https://pro.arcgis.com/en/pro-app/latest/tool-reference/spatial-statistics/h-how-spatial-autocorrelation-moran-s-i-spatial-st.htm">全局Moran指数计算及其原理</a></li><li><a href="https://pro.arcgis.com/en/pro-app/latest/tool-reference/spatial-statistics/cluster-and-outlier-analysis-anselin-local-moran-s.htm">局部Moran指数计算及其原理</a></li><li><a href="https://pro.arcgis.com/en/pro-app/latest/tool-reference/spatial-statistics/incremental-spatial-autocorrelation.htm">增量空间自相关分析——寻找距离阈值</a></li><li><a href="https://pro.arcgis.com/en/pro-app/latest/tool-reference/spatial-statistics/hot-spot-analysis.htm">Gets-G热点分析</a>，<a href="https://pro.arcgis.com/en/pro-app/latest/tool-reference/spatial-statistics/h-how-hot-spot-analysis-getis-ord-gi-spatial-stati.htm">原理</a></li><li><a href="https://pro.arcgis.com/en/pro-app/latest/tool-reference/spatial-statistics/optimized-hot-spot-analysis.htm">优化-自适应的热点分析</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;空间自相关强度计算、热点分析与异常值分析&lt;/strong&gt;是空间分析中的常用工具，在此简单辨析一下空间自相关等相关工具的差异和用法。主要对比的是全局和局部的&lt;mark&gt;Moran‘s I&lt;/mark&gt;以及&lt;mark&gt;Getis-Ord General G&lt;/mark&gt;。&lt;/p&gt;</summary>
    
    
    
    
    <category term="空间自相关" scheme="https://hscyber.github.io/tags/%E7%A9%BA%E9%97%B4%E8%87%AA%E7%9B%B8%E5%85%B3/"/>
    
    <category term="空间热点分析" scheme="https://hscyber.github.io/tags/%E7%A9%BA%E9%97%B4%E7%83%AD%E7%82%B9%E5%88%86%E6%9E%90/"/>
    
    <category term="聚类" scheme="https://hscyber.github.io/tags/%E8%81%9A%E7%B1%BB/"/>
    
    <category term="异常值" scheme="https://hscyber.github.io/tags/%E5%BC%82%E5%B8%B8%E5%80%BC/"/>
    
    <category term="Moran&#39;s I" scheme="https://hscyber.github.io/tags/Moran-s-I/"/>
    
    <category term="Getis-Ord Gi" scheme="https://hscyber.github.io/tags/Getis-Ord-Gi/"/>
    
  </entry>
  
  <entry>
    <title>栅格处理(杂)：计算多边形内的点数/线长度/面面积</title>
    <link href="https://hscyber.github.io/posts/e57ebaa5/"/>
    <id>https://hscyber.github.io/posts/e57ebaa5/</id>
    <published>2023-03-15T08:37:20.000Z</published>
    <updated>2023-03-15T08:53:30.692Z</updated>
    
    <content type="html"><![CDATA[<p>在进行指标计算时，尤其是格网数据的数值汇总，经常需要<font color="#dd0000">统计汇总面内（区域/研究单元）的点的个数、道路的长度、面的面积</font>，对于点数的统计可以直接spatial join或者count，后者则需要多几步操作。</p><span id="more"></span><h2 id="实际操作案例"><a class="markdownIt-Anchor" href="#实际操作案例"></a> 实际操作案例</h2><h3 id="计算各区域内路网的长度"><a class="markdownIt-Anchor" href="#计算各区域内路网的长度"></a> 计算各区域内路网的长度</h3><blockquote><p>计算各区域内/格网/缓冲区内湖泊的面积等，类似</p></blockquote><p>ArcGIS Pro提供了一个很好用的工具<a href="https://pro.arcgis.com/en/pro-app/latest/tool-reference/geoanalytics-desktop/summarize-within.htm">Summarize Within (GeoAnalytics Desktop)</a>，使用按照参数传入即可，计算完再基于ID将结果表格连接一下。</p><img src="/posts/e57ebaa5/image-20230315165154558.png" class alt="image-20230315165154558"><img src="/posts/e57ebaa5/image-20230315165006403.png" class alt="image-20230315165006403"><p>如果是使用ArcGIS，步骤如下,<a href="https://gis.stackexchange.com/questions/98518/calculate-line-distances-inside-of-polygons-using-arcgis-for-desktop">参考</a>：</p><ol><li><p>使用<a href="https://desktop.arcgis.com/en/arcmap/latest/tools/coverage-toolbox/identity.htm">Identity</a>，用面打断路网</p></li><li><p>使用<a href="https://desktop.arcgis.com/en/arcmap/latest/tools/analysis-toolbox/summary-statistics.htm">Summary Statistics</a>基于面FID或其他唯一字段统计长度</p></li><li><p>连接表格</p></li></ol><img src="/posts/e57ebaa5/image-20230315165245144.png" class alt="image-20230315165245144">]]></content>
    
    
    <summary type="html">&lt;p&gt;在进行指标计算时，尤其是格网数据的数值汇总，经常需要&lt;font color=&quot;#dd0000&quot;&gt;统计汇总面内（区域/研究单元）的点的个数、道路的长度、面的面积&lt;/font&gt;，对于点数的统计可以直接spatial join或者count，后者则需要多几步操作。&lt;/p&gt;</summary>
    
    
    
    <category term="时空数据处理分析" scheme="https://hscyber.github.io/categories/%E6%97%B6%E7%A9%BA%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%88%86%E6%9E%90/"/>
    
    
  </entry>
  
  <entry>
    <title>栅格处理(杂)：添加空间索引显著加快矢量定位及运算</title>
    <link href="https://hscyber.github.io/posts/6f6e706b/"/>
    <id>https://hscyber.github.io/posts/6f6e706b/</id>
    <published>2023-03-15T07:36:37.000Z</published>
    <updated>2023-03-15T07:58:59.361Z</updated>
    
    <content type="html"><![CDATA[<p>这几天在处理格网内点统计（面上的点），缓冲区内统计等，会遇到特别慢的情况，这时候对点图层添加<mark>空间索引</mark>（几秒完成）之后，再进行处理，从几十分钟的操作降至十几秒。</p><span id="more"></span><p><a href="https://gistbok.ucgis.org/bok-topics/spatial-indexing">空间索引</a>是一种允许有效访问空间对象的数据结构。这是空间数据库常用的技术。如果没有索引，任何对特征的搜索都需要对数据库中的每条记录进行“顺序扫描”，从而导致处理时间更长。在空间索引构建过程中，最小外接矩形作为对象的近似。跨商业和开源数据库的各种类型的空间索引产生可衡量的性能差异。空间索引技术在时间关键型应用程序和空间<strong>大数据</strong>处理中发挥着核心作用。</p><p>小数据影响不大，主要是量大些的数据</p><ol><li>如果是使用<mark>ArcGIS或Pro</mark>，使用Add Spatial Index工具完成快速定位和汇总统计。<a href="https://desktop.arcgis.com/en/arcmap/latest/tools/data-management-toolbox/add-spatial-index.htm">描述</a>：Adds a spatial index to a <strong>shapefile, file geodatabase, or enterprise geodatabase feature class</strong>. Use this tool to either add a spatial index to a shapefile or feature class that does not already have one or to re-create an existing spatial index。ArcGIS uses spatial indexes to <font color="#dd0000">quickly locate features</font> in feature classes. <strong>Identifying</strong> a feature, <strong>selecting</strong> features by pointing or <strong>dragging</strong> a box, and <strong>panning and zooming</strong> all require ArcMap to use the spatial index to locate features.</li><li>如果是使用<mark>QGIS</mark>，工具名称是<strong>创建空间索引(Create Spatial Index)</strong></li><li>如果使用<mark>Geopandas</mark>，它也提供了基于树结构的索引，构建索引的时间基本上为0ns，在使用空间连接的时候会用到，但通常geopandas在执行空间连接时，会自动构建所需的索引。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>df = gpd.read_file(<span class="string">&quot;..shp&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.has_sindex</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rst.sindex</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rst.has_sindex</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>更多比较，可以查看<a href="https://aetperf.github.io/2021/09/10/Spatial-Join-with-GeoPandas-and-GEOS.html">ref</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这几天在处理格网内点统计（面上的点），缓冲区内统计等，会遇到特别慢的情况，这时候对点图层添加&lt;mark&gt;空间索引&lt;/mark&gt;（几秒完成）之后，再进行处理，从几十分钟的操作降至十几秒。&lt;/p&gt;</summary>
    
    
    
    <category term="时空数据处理分析" scheme="https://hscyber.github.io/categories/%E6%97%B6%E7%A9%BA%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%88%86%E6%9E%90/"/>
    
    
    <category term="ArcGIS" scheme="https://hscyber.github.io/tags/ArcGIS/"/>
    
    <category term="空间索引" scheme="https://hscyber.github.io/tags/%E7%A9%BA%E9%97%B4%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>关于ChatGPT热潮的一点思考</title>
    <link href="https://hscyber.github.io/posts/3dfd2cc1/"/>
    <id>https://hscyber.github.io/posts/3dfd2cc1/</id>
    <published>2023-03-15T03:27:08.000Z</published>
    <updated>2023-03-21T11:13:34.981Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个之前就想写一写的话题，昨晚奥特曼发布了GPT-4，继而又引发了一大波转发。其实，从它最开始到现在，我只在测试的时候用过，所以并未在我个人的工作中体会到它的声势所应有的价值，但我对于它是持一个积极的态度，或者说我对GPT模型的应用有一些<mark>期待</mark>。</p><span id="more"></span><blockquote><p>关于注册，1. 上梯；2. <a href="https://chat.openai.com/auth/login">网站sign up</a>，建议谷歌邮箱；3. <a href="https://sms-activate.org/">此处</a>注册充值1美元，搜索openai，购买虚拟号码（记住选择的国家）； 4. 按流程发送验证码完成注册</p></blockquote><p>这样一个身处热潮中心的“大家伙”，能否同时兼具深度（专业性）和广度，能否切实在一些行业产生持久且颠覆性的改变，不好去预料，尤其是像我这样的很多还在学校看热闹的<strong>外行</strong>。但从我研究生的角度，我希望它能够给我提供一些<strong>切实的辅助工具</strong>，<font color="#dd0000">比如能让它帮忙查找、帮忙整合、帮忙筛帮忙看、帮忙翻译、帮忙找错帮忙写……我就够满意了</font>【大的改变是不敢奢求也不敢用的，科学研究这种需要严谨，涉及小、专、深、反复的思考是不易代劳的】。</p><h3 id="搜索引擎"><a class="markdownIt-Anchor" href="#搜索引擎"></a> 搜索引擎</h3><p><mark>搜索</mark>本身即是十分重要的技能：一个搜索框和回车键的诞生算是一种<mark>理念</mark>上的革新，而从庞杂的互联网搜索出一系列的结果供人查看 -&gt; 到直接搜索并<mark>给出</mark><strong>一些最佳</strong>的可供参考的答案，我觉得也是一个大的飞跃和进步。</p><ul><li><p><mark>优化搜索效率和结果</mark>，这是很容易想到的点，显然，微软也正在推进这样的事（new bing）。时间的推移和技术的进步，互联网上互联网下都积累了大量的<font color="#dd0000">“知识”和“经验”</font>，各行各业，包括针对科研领域，<strong>入行和入门</strong>需要学习的知识技能只会越来越多，重复的工作和问题也很多，把这些更好更高效地利用起来服务使用者，是很有价值的事情。迄今为止我的学习和进步很多也得益于互联网的资源[Google]。</p></li><li><p>尤其是技术相关的问题，比如写<mark>代码</mark>跑数据，期待进一步优化（Ctrl+C +V的效率）。以前有人说，我平时遇到的99%（绝大部分）的问题，前人可能都已经遇到过且有了解决的方案和经验，但实际中找起答案来不尽人意，以至于消磨了额外的时间甚至是重复“造轮子”，尽管自己折腾的过程也挺有营养，但是能少还是可以少。</p></li></ul><h3 id="文本翻译"><a class="markdownIt-Anchor" href="#文本翻译"></a> 文本翻译</h3><p>不否认学习外语的必要性及其诸多好处，但是还是有很多想要偷懒读写英文论文或材料的时候，所以期待相关翻译工具能够早日达到——差不多改改能够直接出版的专业润色水平。最好是免费的，当然，如果收费便宜点也能接受。</p><ul><li>尚未讨论图像绘画音频相关的东西，但这些方面肯定也是随着文本一同进步的领域。</li></ul><h3 id="错误发现与校正"><a class="markdownIt-Anchor" href="#错误发现与校正"></a> 错误发现与校正</h3><p>期待能够辅助我从大篇幅的文档中、数据中，按照我的要求准确地进行错误提示并给出校正建议，不限于翻译和文体格式调整。小到错别字和标点，大到格式样式调整和各种纠错，很多能想到的平时涉及重复性劳作又容易疏忽的东西，期待逐渐有更好的解决方案。</p><ul><li>此外，关于一条“知识”的正确与否、可信度，包括谣言判别，也需要更好的辅助手段。</li></ul><h3 id="数据知识抽取和整合"><a class="markdownIt-Anchor" href="#数据知识抽取和整合"></a> 数据/知识抽取和整合</h3><p>这有点像知识图谱的构建过程了，网页搜索等很多技术领域背后本身就依托了一个巨大的知识图谱。基于大量的文本（如扫描的书籍、电子书、论文等）来针对一些特定的<mark>主题</mark>或者内容完成知识的抽取、整合及呈现，这也能为一些繁杂的事情节省一点力气。</p><h3 id="让子弹飞一会"><a class="markdownIt-Anchor" href="#让子弹飞一会"></a> 让子弹飞一会</h3><p>……</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这是一个之前就想写一写的话题，昨晚奥特曼发布了GPT-4，继而又引发了一大波转发。其实，从它最开始到现在，我只在测试的时候用过，所以并未在我个人的工作中体会到它的声势所应有的价值，但我对于它是持一个积极的态度，或者说我对GPT模型的应用有一些&lt;mark&gt;期待&lt;/mark&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="机器学习与深度学习" scheme="https://hscyber.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="chatgpt" scheme="https://hscyber.github.io/tags/chatgpt/"/>
    
  </entry>
  
  <entry>
    <title>计算机软硬件(杂)：硬盘文件系统（NTFS/FAT32/exFAT）</title>
    <link href="https://hscyber.github.io/posts/d360117d/"/>
    <id>https://hscyber.github.io/posts/d360117d/</id>
    <published>2023-03-12T13:07:47.000Z</published>
    <updated>2023-03-12T13:43:17.673Z</updated>
    
    <content type="html"><![CDATA[<p>计算机系统的外部存储器有内置的硬盘、移动硬盘和U盘等，经常会注意到不同的硬盘文件类型不一样，做一些简单了解。以及，为什么有时候数据的实际大小和占据的内存不一致？</p><span id="more"></span><h2 id="类型及区别"><a class="markdownIt-Anchor" href="#类型及区别"></a> 类型及区别</h2><blockquote><p><a href="https://www.easeus.com/diskmanager/file-system.html">参考</a></p></blockquote><p><mark>文件系统</mark>是操作系统管理和操作存储器内的数据和文件的方式/数据结构。通常来说：</p><ul><li>window装系统完成后磁盘类型都是默认NTFS，大型移动硬盘或者移动固态硬盘通常为exFAT。</li><li>选择的区别主要在于<strong>文件的大小</strong>，如传输的单个最大文件大于4G，或磁盘总空间大于16T，则需要选择exFAT<ul><li>还有一个额外的点可以注意一下，计算机<strong>磁盘分区表</strong>有MBr和GPT(GUID)，如果硬盘大于<strong>2T</strong>，需要格式化为GPT，这一点在之前我用<strong>服务器</strong>的时候踩过坑，如果一开始选择了MBR，但是想扩容到2T以上，就可能需要格式化才行（磁盘的分区表类型在电脑管理-&gt;磁盘管理可以看到）。</li></ul></li></ul><img src="/posts/d360117d/image-20230312212452652.png" class alt="image-20230312212452652"><h2 id="实际空间"><a class="markdownIt-Anchor" href="#实际空间"></a> 实际空间</h2><blockquote><p><a href="https://support.microsoft.com/en-us/topic/default-cluster-size-for-ntfs-fat-and-exfat-9772e6f1-e31a-00d7-e18f-73169155af95">NTFS、FAT 和 exFAT 的默认簇大小</a></p></blockquote><p>比如有时候会发现这种情况，这是我一个移动硬盘内的一个文件，因为有<mark>大量只有1kb的文件</mark>，导致空间浪费，其原因是不同文件系统的默认最小单元造成的。如exFAT 默认簇大小是 128 KB，1 B ~ 128 KB 大小的文件占用空间都是 128 KB，128 KB + 1 B ~ 256 KB 大小的文件占用空间都是 256 KB,<a href="https://www.zhihu.com/question/446551421">ref</a>。</p><ul><li>此时可以进行数据清理或者移动到其他格式的硬盘</li></ul><img src="/posts/d360117d/image-20230312212759049.png" class alt="image-20230312212759049">]]></content>
    
    
    <summary type="html">&lt;p&gt;计算机系统的外部存储器有内置的硬盘、移动硬盘和U盘等，经常会注意到不同的硬盘文件类型不一样，做一些简单了解。以及，为什么有时候数据的实际大小和占据的内存不一致？&lt;/p&gt;</summary>
    
    
    
    <category term="计算机软硬件知识" scheme="https://hscyber.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%BD%AF%E7%A1%AC%E4%BB%B6%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="硬盘" scheme="https://hscyber.github.io/tags/%E7%A1%AC%E7%9B%98/"/>
    
    <category term="U盘" scheme="https://hscyber.github.io/tags/U%E7%9B%98/"/>
    
    <category term="文件系统" scheme="https://hscyber.github.io/tags/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>需要克制</title>
    <link href="https://hscyber.github.io/posts/23ea2b62/"/>
    <id>https://hscyber.github.io/posts/23ea2b62/</id>
    <published>2023-03-01T14:21:42.000Z</published>
    <updated>2023-04-14T09:47:22.508Z</updated>
    
    <content type="html"><![CDATA[<p>2023-04-13，不去做一些事情，有时候比去做一件事情还难。</p><span id="more"></span><p>毫不怀疑我有足够的能力和精力去做很多很多的事情，也毫无意外我常常因此落入快乐的陷阱。</p><p>人的欲望有时候是收不住的。饭后刷手机，看小红书的时候，系统开始给我推乒乓的视频，看来是前天京东下单买乒乓球的信息又被它知道了，看的饶有兴致，因为确实最近打球激起了多年的胜负欲，竟然又有些开始想练练球的心思。再猛然发现，最近想的，在进行的东西已经有点多了。</p><p>工作之外，想继续好好地看书，好好健身好好跑步，想拍照想旅游想登山，想看展想听音乐会，想打好羽毛球打好乒乓，想提升一下游泳，想提升一下写作，提升一下Coding，想抽时间整理笔记清单，想经营公号，想写读书笔记，想练英语……诸如此类。当然，我相信，如果真的想，在当下这个状态，很多事情都可以做到，毫不怀疑，每件事都能找到圈子，都能轻松愉快地地开始，不说别的，光是音乐会或者livehouse疫情后每周都有数不清的场子hh，可多少有些不务正业亦或是捉襟见肘了。所以，我想我该收收一些该死的虚荣心和胜负欲，而逐渐收缩到简单纯粹的工作、学习、运动、休憩中，聚焦好注意力，收收欲望，也分配好时间。</p><p>我特别敬佩一些人，那些可以专心致志心无旁骛做着简单的几件事情的人，尤其是在当下这个眼花缭乱的、浮躁的、处处充满“刺激”和诱惑的时代。就像一些专心做音乐写小说的人（每每这种时候我第一眼浮现的都是那些小说家和艺术创作者），我觉得它们应该有着对抗无聊和无意义的绝佳方式。这样的人想必是不少的，有的人搞研究做技术，有的人创业或做工作，有的人搞运动搞竞技等等，不管是因为纯粹的热爱、兴趣，还是因为无奈（但不能是讨厌）。</p><p>生活需要希望，需要劳动，需要放松，也需要时时的<font color="#dd0000">克制</font>。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;2023-04-13，不去做一些事情，有时候比去做一件事情还难。&lt;/p&gt;</summary>
    
    
    
    <category term="生活漫步" scheme="https://hscyber.github.io/categories/%E7%94%9F%E6%B4%BB%E6%BC%AB%E6%AD%A5/"/>
    
    
  </entry>
  
  <entry>
    <title>这周又是一个新的节点</title>
    <link href="https://hscyber.github.io/posts/df93ef6f/"/>
    <id>https://hscyber.github.io/posts/df93ef6f/</id>
    <published>2023-03-01T13:12:58.000Z</published>
    <updated>2023-04-14T09:46:24.237Z</updated>
    
    <content type="html"><![CDATA[<p>2023-03-17，从1月29返京，到2月3组会+元宵节和老师一起庆祝开工，再到2月9日北京下雪，再到2月16号开学注册，再到今天的组会+课题组聚餐，一个多月的时间过得匆忙但也丰富，当然，也得益于似乎远去的疫情。</p><span id="more"></span><p>到这周忙完了项目申请和一些杂七杂八的活，开始捡起之前的工作继续推进，长舒一口气的同时，生活学习仿佛也跟着舒展开来。就像北京雾霾被春天的清风吹散，在公园大吸一口新鲜空气，也想起有时带着满身疲惫下班，看到惹人留步的西山上耀眼的落日，或是深蓝夜空中西边最亮的那个星，些许治愈。</p><p>研究生第三年的下半年，按照硕士的时间算，今年是毕业的年级。所以我的同级的很多朋友们，包括组里今年毕业的师姐，这段时间也都在忙着盲审稿的准备，截止时间也是这周，我的忙里偷闲摸鱼和他们的忙碌有些格格不入。师兄终于在等待签证出国交流，也看到朋友圈不少朋友顺利收到了所里或者国外的博士offer，由衷地表示祝贺。春天，是个很美好的季节，是播种的季节，也是“收获”的季节，还有免费的阳光，空气和迎面来的风，除了雾霾和扬沙。</p><p>平时聊的最多的，还是本科时候的同学们。熟悉的几个小伙伴们，他们倒是都找好了去处，有留北京的，也有在京外公司的，都还不赖。昨天本科导师北京开会，特地来所里找他的同学吃饭，也特地来看了看我和同级的两个在所里的同学，感觉和陈老师已经好几年没见面了，一起聊了得有半个多小时，很亲切，很怀念。也感慨时间流逝，当时的班上很多同学如今也都是天各一方，有的读研有的工作，有的准备继续读博，有的也还在看，最后都汇成一句话，“都挺好的，哈哈”，生活没那么如意，但也没多糟糕。和陈老师一起来北京的，还有更是“多年”未见的本科室友，只是不知道明天有没有时间和健健完成这历史性的会面。</p><p>还有很多故事想讲，手机里也还留下了很多值得纪念的时刻。和老同学老朋友的短剧闲聊，课题组的聚餐，办公室10多号人的初次聚餐，和实验室学生会同志们的首次饭桌会面，和所里的一众小伙伴们、摄友们的一起听的八卦，讲的笑话……都是以后美好的燃料。</p><p>倘若这寥寥几句就作为一个多月的总结好像过于短了，可一天的会下来-我的眼皮已经在打架了，到了该下班期待明天的时候了，也就到此歇菜了，没说完的话就留在梦里了。</p><p>2023/3/17 22:20</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;2023-03-17，从1月29返京，到2月3组会+元宵节和老师一起庆祝开工，再到2月9日北京下雪，再到2月16号开学注册，再到今天的组会+课题组聚餐，一个多月的时间过得匆忙但也丰富，当然，也得益于似乎远去的疫情。&lt;/p&gt;</summary>
    
    
    
    <category term="生活漫步" scheme="https://hscyber.github.io/categories/%E7%94%9F%E6%B4%BB%E6%BC%AB%E6%AD%A5/"/>
    
    
  </entry>
  
  <entry>
    <title>Pandas(杂)：拼接多张表为一张表concat</title>
    <link href="https://hscyber.github.io/posts/2178bf2d/"/>
    <id>https://hscyber.github.io/posts/2178bf2d/</id>
    <published>2023-02-27T14:22:37.000Z</published>
    <updated>2023-02-27T14:30:56.541Z</updated>
    
    <content type="html"><![CDATA[<p>将文件夹下的所有相同格式的文本文件csv/txt/xlsx等，<mark>合并或者拼接</mark>为一张表的代码，代码很简单，因为经常用到所以放在这里以便用的时候直接粘贴复用：</p><span id="more"></span><p>函数具体说明可以查看文档 <a href="https://pandas.pydata.org/docs/reference/api/pandas.concat.html">pd.concat</a>，<a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.drop_duplicates.html">df.drop_duplicates</a>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> glob <span class="keyword">import</span> glob</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入参数</span></span><br><span class="line">indir = <span class="string">r&quot;&quot;</span></span><br><span class="line">outfile = <span class="string">&quot;....csv&quot;</span></span><br><span class="line">filetype = <span class="string">&quot;csv&quot;</span></span><br><span class="line"><span class="comment"># pandas文件遍历及合并</span></span><br><span class="line">files = glob(indir+<span class="string">&quot;\\*.&quot;</span>+filetype)</span><br><span class="line">tables = [] <span class="comment"># 确保文件总大小不会溢出内存，否则需分组处理</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">    df = pd.read_csv(file)</span><br><span class="line">    tables.append(df)</span><br><span class="line"><span class="comment"># 表格拼接及写出,axis=0表示按行拼接</span></span><br><span class="line">result = pd.concat(tables,axis=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># result.drop_duplicates(subset=[&quot;fid&quot;], keep=&#x27;first&#x27;, inplace=True) #去重复列</span></span><br><span class="line">result.to_csv(outfile,encoding = <span class="string">&#x27;utf-8&#x27;</span>,index=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 导出可以用excel打开的文件</span></span><br><span class="line">result.to_csv(outfile,encoding = <span class="string">&#x27;utf-8-sig&#x27;</span>,index=<span class="literal">False</span>)</span><br><span class="line">result.to_excel(outfile,encoding = <span class="string">&#x27;utf-8&#x27;</span>,index=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 其他导出选项</span></span><br><span class="line">result.to_csv(outfile,encoding = <span class="string">&#x27;utf-8&#x27;</span>,index=<span class="literal">False</span>, sep=<span class="string">&quot;\t&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;将文件夹下的所有相同格式的文本文件csv/txt/xlsx等，&lt;mark&gt;合并或者拼接&lt;/mark&gt;为一张表的代码，代码很简单，因为经常用到所以放在这里以便用的时候直接粘贴复用：&lt;/p&gt;</summary>
    
    
    
    <category term="Pandas数据处理分析" scheme="https://hscyber.github.io/categories/Pandas%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Pandas" scheme="https://hscyber.github.io/tags/Pandas/"/>
    
    <category term="condat" scheme="https://hscyber.github.io/tags/condat/"/>
    
  </entry>
  
  <entry>
    <title>python性能(3)：multiprocessing多个参数怎么用</title>
    <link href="https://hscyber.github.io/posts/e4ebeda1/"/>
    <id>https://hscyber.github.io/posts/e4ebeda1/</id>
    <published>2023-02-26T13:38:19.000Z</published>
    <updated>2023-03-07T02:24:31.813Z</updated>
    
    <content type="html"><![CDATA[<p>使用多进程经常会遇到多个参数的问题，此时pool.map()略显麻烦，可以使用<mark>pool.starmap</mark></p><span id="more"></span><h2 id="starmap用法"><a class="markdownIt-Anchor" href="#starmap用法"></a> starmap用法</h2><p>用法与<a href="https://hscyber.github.io/posts/4b434785/">之前类似</a>，只不过提供了一个更加方便的参数打包和完成自动解析的步骤</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing.pool <span class="keyword">import</span> Pool</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myfunction</span>(<span class="params">outpath,x,y,z</span>):</span><br><span class="line">     <span class="comment"># 此处是处理操作</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">outpath =  <span class="string">&quot;C:\Users\huangs\Desktop&quot;</span>   </span><br><span class="line">outpaths = [outpath]*<span class="number">4</span></span><br><span class="line">X = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">Y = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">Z = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="comment"># X,Y,Z为参数集合，也可以用元组包装，如X = (1,2,3,4)</span></span><br><span class="line">paras = [outpaths,X, Y, Z]</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> Pool(<span class="number">8</span>) <span class="keyword">as</span> pool:</span><br><span class="line">    pool.starmap(myfunction, paras)</span><br></pre></td></tr></table></figure><p>这样实际上就会多进程执行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">myfunction(outpaths[<span class="number">0</span>],X[<span class="number">0</span>],Y[<span class="number">0</span>],Z[<span class="number">0</span>])</span><br><span class="line">myfunction(outpaths[<span class="number">1</span>],X[<span class="number">1</span>],Y[<span class="number">1</span>],Z[<span class="number">1</span>])</span><br><span class="line">......</span><br><span class="line">myfunction(outpaths[i],X[i],Y[i],Z[i])</span><br></pre></td></tr></table></figure><h2 id="pandas多行并行"><a class="markdownIt-Anchor" href="#pandas多行并行"></a> pandas多行并行</h2><p>如果能够直接构造一个函数使用pandas apply函数即可，有时候pandas的多行提取得到一些结果，不方便直接apply，可以<mark>将表拆分成多个表完成并行操作</mark>，记录一下刚刚完成的实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">tids, track_ids, user_ids, cities</span>):</span><br><span class="line">    <span class="comment"># 此处是操作</span></span><br><span class="line">    newrows = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tids)):</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:    </span><br><span class="line">    <span class="comment"># 原始轨迹数据表</span></span><br><span class="line">    tf = pd.read_csv(trackinfo, header=<span class="number">0</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    paras = []</span><br><span class="line">    <span class="comment"># 按照城市拆分成367个表格，每组数据作为paras的一个元素</span></span><br><span class="line">    <span class="keyword">for</span> city,table <span class="keyword">in</span> tf.groupby(<span class="string">&#x27;city&#x27;</span>):</span><br><span class="line">        tids = <span class="built_in">list</span>(table[<span class="string">&#x27;tid&#x27;</span>])</span><br><span class="line">        track_ids = <span class="built_in">list</span>(table[<span class="string">&#x27;track_id&#x27;</span>])</span><br><span class="line">        user_ids = <span class="built_in">list</span>(table[<span class="string">&#x27;user_id&#x27;</span>])</span><br><span class="line">        cities = <span class="built_in">list</span>(table[<span class="string">&#x27;city&#x27;</span>])</span><br><span class="line">        paras.append((tids,track_ids,user_ids,cities))</span><br><span class="line">    <span class="comment"># 此时paras是一个包含367个元组的列表，每个元素是一组输入</span></span><br><span class="line">    <span class="comment"># 遍历处理，函数内设循环</span></span><br><span class="line">    <span class="keyword">with</span> Pool(<span class="number">8</span>) <span class="keyword">as</span> pool:</span><br><span class="line">        pool.starmap(main, paras)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用多进程经常会遇到多个参数的问题，此时pool.map()略显麻烦，可以使用&lt;mark&gt;pool.starmap&lt;/mark&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Python性能" scheme="https://hscyber.github.io/categories/Python%E6%80%A7%E8%83%BD/"/>
    
    
    <category term="Python" scheme="https://hscyber.github.io/tags/Python/"/>
    
    <category term="multiprocessing" scheme="https://hscyber.github.io/tags/multiprocessing/"/>
    
  </entry>
  
  <entry>
    <title>Numpy基础：ndarray的理解及其常用操作</title>
    <link href="https://hscyber.github.io/posts/8cb7c931/"/>
    <id>https://hscyber.github.io/posts/8cb7c931/</id>
    <published>2023-02-13T13:13:15.000Z</published>
    <updated>2023-02-13T14:04:53.931Z</updated>
    
    <content type="html"><![CDATA[<p>本笔记记录一下Numpy的一些基础，包括：（1）ndarray的数据结构及数值类型；（2）常见操作（Creation/Indexing/Reshaping/Broadcasting）的Quick References。学习<a href="https://www.labri.fr/perso/nrougier/from-python-to-numpy/">资料</a></p><span id="more"></span><h2 id="ndarray介绍"><a class="markdownIt-Anchor" href="#ndarray介绍"></a> ndarray介绍</h2><blockquote><p>Numpy或Torch都是默认<strong>行优先</strong>的表达，详细可参考<a href="https://hscyber.github.io/posts/e64e8e1e/">列或者行优先顺序存储</a></p></blockquote><p>多维数组，由一段<font color="#dd0000">连续的内存块</font>(contiguous block)+一个<font color="#dd0000">索引方案</font>(indexing scheme)构成，也即实际底层的存储是<font color="#dd0000">一维结构</font>，通过一定的方式索引映射为多维数组。</p><p><mark>视图和副本</mark>（Views and copies）是Numpy中较为重要的概念，一些知识点：</p><ol><li>View：修改视图<font color="#dd0000">会同步修改原始数组</font>，通过范围切片返回的是视图，如：<strong>a[2:10]返回a的一个视图</strong></li><li>Copy：修改副本<font color="#dd0000">不会</font>导致源数据发生变化，如：<strong>a[1, 2, 3]，取值得到a的一个副本</strong><ul><li>判断副本的方式**.base is None**：<code>y = x[[1,2,3],:]; y.base is None</code>y is a copy</li></ul></li><li>注意**np.reshape()**操作：当数据区域连续时，返回一个视图，否则返回一个副本</li><li>通过<strong>减少临时副本</strong>来节约内存，如下使用案例，通过<strong>out</strong>来避免中间数据的生成：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>X = np.ones(<span class="number">10</span>, dtype=np.<span class="built_in">int</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Y = np.ones(<span class="number">10</span>, dtype=np.<span class="built_in">int</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A = <span class="number">2</span>*X + <span class="number">2</span>*Y</span><br><span class="line"><span class="comment"># 修改为</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.multiply(X, <span class="number">2</span>, out=X)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.multiply(Y, <span class="number">2</span>, out=Y)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.add(X, Y, out=X)</span><br></pre></td></tr></table></figure><ol start="4"><li>数据的偏移量<mark>offsets</mark>，步幅<mark>strides</mark>可用基于实际数组元素占用的字节数等来计算元素的位置，具体可以查阅相关的文档。</li></ol><h3 id="再谈视图"><a class="markdownIt-Anchor" href="#再谈视图"></a> 再谈视图</h3><blockquote><p>实际物理内存块的大小固定，但类型却==“可变”==，单个元素数据类型占用空间增大则元素个数变少-同理</p></blockquote><p>有了上面的认识，我们就可以发现，ndarray中的数据类型不是固定的，<strong>取决于我们如何看待这片数据的内存区域</strong>，如，使用<mark>ndarray.view()</mark>，可以通过对内存区域不同的切割方式，来<mark>完成数据类型的转换</mark>，而无须对数据进行额外的copy，从而达到节约内存空间的目的。具体来说：y=x.view(np.byte): 将原本10×4Byte的空间(x是int型)，按照1Byte来解析，即40*1Byte，y与x数据共享同一内存区域，数据是相同的，只是解析数据的方式不同而已。</p><p>图像处理实例<a href="https://blog.csdn.net/Jfuck/article/details/9464959">参考</a>：当需要对输入图像<strong>三个通道进行相同的处理</strong>时，使用cv2.split和cv2.merge是相当浪费资源的，因为任何一个通道的数据对处理来说都是一样的，我们可以用view来将其转换为一维矩阵后再做处理，这要不需要额外的内存开销和时间开销。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">createFlatView</span>(<span class="params">array</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a 1D view of an array of any dimensionality.&quot;&quot;&quot;</span></span><br><span class="line">    flatView = array.view()</span><br><span class="line">    flatView.shape = array.size</span><br><span class="line">    <span class="keyword">return</span> flatView</span><br></pre></td></tr></table></figure><h2 id="python代码向量化"><a class="markdownIt-Anchor" href="#python代码向量化"></a> Python代码向量化</h2><blockquote><p>思想：将原始的纯Python代码使用numpy的函数和思想来达到目的，并起到加快运算的目的。</p></blockquote><p>如，通过Numpy的函数<code>np.add()</code>可用显著加快运算速度：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[z1+z2 <span class="keyword">for</span> (z1,z2) <span class="keyword">in</span> <span class="built_in">zip</span>(Z1,Z2)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.add(Z1,Z2) <span class="comment"># more faster</span></span><br></pre></td></tr></table></figure><p>通过Numpy还能方便地得到常规运算不容易得到的结果，如使用<code>np.add()</code>计算<strong>嵌套列表的加法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add_python</span>(<span class="params">Z1,Z2</span>):</span><br><span class="line">    <span class="keyword">return</span> [z1+z2 <span class="keyword">for</span> (z1,z2) <span class="keyword">in</span> <span class="built_in">zip</span>(Z1,Z2)]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_numpy</span>(<span class="params">Z1,Z2</span>):</span><br><span class="line">    <span class="keyword">return</span> np.add(Z1,Z2)</span><br><span class="line"><span class="comment"># 原始的数据维度均为2*2</span></span><br><span class="line">Z1 = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line">Z2 = [[<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Z1 + Z2</span><br><span class="line">[[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>]] <span class="comment">#4*2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add_python(Z1, Z2)</span><br><span class="line">[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">8</span>]] <span class="comment"># 2*4</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add_numpy(Z1, Z2) <span class="comment">#2*2</span></span><br><span class="line">[[ <span class="number">6</span>  <span class="number">8</span>]</span><br><span class="line"> [<span class="number">10</span> <span class="number">12</span>]]</span><br></pre></td></tr></table></figure><p>但需要注意的是:</p><ul><li>如果要保留这本书中的一条信息，那就是<font color="#dd0000">“过早的优化是万恶之源&quot;</font>。我们已经看到代码矢量化可以极大地改进您的计算，在某些情况下可以提高几个数量级。不过，问题向量化通常要强大得多。如果您在设计过程中过早编写代码矢量化，您将无法开箱即用，并且您肯定会错过一些真正强大的替代方案，因为您将无法正确识别您的问题我们已经在问题向量化章节中看到了。这需要一些经验，你必须要有耐心:经验不是一朝一夕的过程。</li><li>Numpy 是一个非常通用的库，但这<strong>并不意味着您必须在所有情况下都使用它</strong>。有的时候还有很多其他的可以使用的库。</li></ul><h2 id="速查手册"><a class="markdownIt-Anchor" href="#速查手册"></a> <a href="https://www.labri.fr/perso/nrougier/from-python-to-numpy/#quick-references">速查手册</a></h2><h3 id="数据类型datatype"><a class="markdownIt-Anchor" href="#数据类型datatype"></a> 数据类型DataType</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.dtype</span><br><span class="line">dtype(<span class="string">&#x27;int32&#x27;</span>)</span><br></pre></td></tr></table></figure><p>第一列为类型，第二列为简称，第三列为字节数、第四列为可以表达的数值范围</p><img src="/posts/8cb7c931/image-20230213214902234.png" class alt="image-20230213214902234"><h3 id="创建多维数组creation"><a class="markdownIt-Anchor" href="#创建多维数组creation"></a> 创建多维数组Creation</h3><p>常见函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Z = np.zeros(<span class="number">9</span>) <span class="comment"># [0,0,0,0,0,0,0,0,0]</span></span><br><span class="line">Z = np.ones(<span class="number">9</span>)</span><br><span class="line">Z = np.array([<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">Z = <span class="number">2</span>*np.ones(<span class="number">9</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">Z = np.arange(<span class="number">9</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,...,<span class="number">8</span>]</span><br><span class="line"><span class="comment"># 转成3行三列</span></span><br><span class="line">Z = np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定间隔生成</span></span><br><span class="line">Z = np.linspace(<span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">0.00</span>, <span class="number">0.25</span>, <span class="number">0.50</span>, <span class="number">0.75</span>, <span class="number">1.00</span>]</span><br><span class="line"><span class="comment"># 创建格网</span></span><br><span class="line">np.grid[<span class="number">0</span>:<span class="number">3</span>,<span class="number">0</span>:<span class="number">3</span>]</span><br></pre></td></tr></table></figure><h3 id="切片索引indexing"><a class="markdownIt-Anchor" href="#切片索引indexing"></a> 切片索引Indexing</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">Z = np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">Z[<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">┏━━━┓───┬───┐   ┏━━━┓</span><br><span class="line">┃ <span class="number">0</span> ┃ <span class="number">1</span> │ <span class="number">2</span> │ → ┃ <span class="number">0</span> ┃ (scalar)</span><br><span class="line">┗━━━┛───┼───┤   ┗━━━┛</span><br><span class="line">│ <span class="number">3</span> │ <span class="number">4</span> │ <span class="number">5</span> │</span><br><span class="line">├───┼───┼───┤</span><br><span class="line">│ <span class="number">6</span> │ <span class="number">7</span> │ <span class="number">8</span> │</span><br><span class="line">└───┴───┴───┘</span><br><span class="line">Z = np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">Z[-<span class="number">1</span>,-<span class="number">1</span>]</span><br><span class="line">┌───┬───┬───┐</span><br><span class="line">│ <span class="number">0</span> │ <span class="number">1</span> │ <span class="number">2</span> │</span><br><span class="line">├───┼───┼───┤</span><br><span class="line">│ <span class="number">3</span> │ <span class="number">4</span> │ <span class="number">5</span> │</span><br><span class="line">├───┼───┏━━━┓   ┏━━━┓</span><br><span class="line">│ <span class="number">6</span> │ <span class="number">7</span> ┃ <span class="number">8</span> ┃ → ┃ <span class="number">8</span> ┃ (scalar)</span><br><span class="line">└───┴───┗━━━┛   ┗━━━┛</span><br><span class="line">Z = np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">Z[<span class="number">1</span>]</span><br><span class="line">┌───┬───┬───┐</span><br><span class="line">│ <span class="number">0</span> │ <span class="number">1</span> │ <span class="number">2</span> │</span><br><span class="line">┏━━━┳━━━┳━━━┓   ┏━━━┳━━━┳━━━┓</span><br><span class="line">┃ <span class="number">3</span> ┃ <span class="number">4</span> ┃ <span class="number">5</span> ┃ → ┃ <span class="number">3</span> ┃ <span class="number">4</span> ┃ <span class="number">5</span> ┃</span><br><span class="line">┗━━━┻━━━┻━━━┛   ┗━━━┻━━━┻━━━┛</span><br><span class="line">│ <span class="number">6</span> │ <span class="number">7</span> │ <span class="number">8</span> │      (view)</span><br><span class="line">└───┴───┴───┘</span><br><span class="line">Z = np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">Z[:,<span class="number">2</span>]</span><br><span class="line">┌───┬───┏━━━┓   ┏━━━┓</span><br><span class="line">│ <span class="number">0</span> │ <span class="number">1</span> ┃ <span class="number">2</span> ┃   ┃ <span class="number">2</span> ┃</span><br><span class="line">├───┼───┣━━━┫   ┣━━━┫</span><br><span class="line">│ <span class="number">3</span> │ <span class="number">4</span> ┃ <span class="number">5</span> ┃ → ┃ <span class="number">5</span> ┃ (view)</span><br><span class="line">├───┼───┣━━━┫   ┣━━━┫</span><br><span class="line">│ <span class="number">6</span> │ <span class="number">7</span> ┃ <span class="number">8</span> ┃   ┃ <span class="number">8</span> ┃</span><br><span class="line">└───┴───┗━━━┛   ┗━━━┛</span><br><span class="line">Z = np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">Z[<span class="number">1</span>:,<span class="number">1</span>:]</span><br><span class="line">┌───┬───┬───┐</span><br><span class="line">│ <span class="number">0</span> │ <span class="number">1</span> │ <span class="number">2</span> │    (view)</span><br><span class="line">├───┏━━━┳━━━┓   ┏━━━┳━━━┓</span><br><span class="line">│ <span class="number">3</span> ┃ <span class="number">4</span> ┃ <span class="number">5</span> ┃   ┃ <span class="number">4</span> ┃ <span class="number">5</span> ┃</span><br><span class="line">├───┣━━━╋━━━┫ → ┣━━━╋━━━┫</span><br><span class="line">│ <span class="number">6</span> ┃ <span class="number">7</span> ┃ <span class="number">8</span> ┃   ┃ <span class="number">7</span> ┃ <span class="number">8</span> ┃</span><br><span class="line">└───┗━━━┻━━━┛   ┗━━━┻━━━┛</span><br><span class="line">Z = np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">Z[::<span class="number">2</span>,::<span class="number">2</span>]</span><br><span class="line">┏━━━┓───┏━━━┓   ┏━━━┳━━━┓</span><br><span class="line">┃ <span class="number">0</span> ┃ <span class="number">1</span> ┃ <span class="number">2</span> ┃   ┃ <span class="number">0</span> ┃ <span class="number">2</span> ┃</span><br><span class="line">┗━━━┛───┗━━━┛ → ┣━━━╋━━━┫</span><br><span class="line">│ <span class="number">3</span> │ <span class="number">4</span> │ <span class="number">5</span> │   ┃ <span class="number">6</span> ┃ <span class="number">8</span> ┃</span><br><span class="line">┏━━━┓───┏━━━┓   ┗━━━┻━━━┛</span><br><span class="line">┃ <span class="number">6</span> ┃ <span class="number">7</span> ┃ <span class="number">8</span> ┃    (view)</span><br><span class="line">┗━━━┛───┗━━━┛</span><br><span class="line">Z = np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">Z[[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">2</span>]]</span><br><span class="line">┏━━━┓───┬───┐</span><br><span class="line">┃ <span class="number">0</span> ┃ <span class="number">1</span> │ <span class="number">2</span> │</span><br><span class="line">┗━━━┛───┏━━━┓   ┏━━━┳━━━┓</span><br><span class="line">│ <span class="number">3</span> │ <span class="number">4</span> ┃ <span class="number">5</span> ┃ → ┃ <span class="number">0</span> ┃ <span class="number">5</span> ┃</span><br><span class="line">├───┼───┗━━━┛   ┗━━━┻━━━┛</span><br><span class="line">│ <span class="number">6</span> │ <span class="number">7</span> │ <span class="number">8</span> │    (copy)</span><br><span class="line">└───┴───┴───┘</span><br></pre></td></tr></table></figure><h3 id="reshaping"><a class="markdownIt-Anchor" href="#reshaping"></a> Reshaping</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">Z = np.array([<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>])</span><br><span class="line">┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┏━━━┓───┐</span><br><span class="line">│ <span class="number">0</span> │ <span class="number">0</span> │ <span class="number">0</span> │ <span class="number">0</span> │ <span class="number">0</span> │ <span class="number">0</span> │ <span class="number">0</span> │ <span class="number">0</span> │ <span class="number">0</span> │ <span class="number">0</span> ┃ <span class="number">1</span> ┃ <span class="number">0</span> │</span><br><span class="line">└───┴───┴───┴───┴───┴───┴───┴───┴───┴───┗━━━┛───┘</span><br><span class="line">Z = np.array([<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>]).reshape(<span class="number">12</span>,<span class="number">1</span>)</span><br><span class="line">┌───┐</span><br><span class="line">│ <span class="number">0</span> │</span><br><span class="line">├───┤</span><br><span class="line">│ <span class="number">0</span> │</span><br><span class="line">├───┤</span><br><span class="line">│ <span class="number">0</span> │</span><br><span class="line">├───┤</span><br><span class="line">│ <span class="number">0</span> │</span><br><span class="line">├───┤</span><br><span class="line">│ <span class="number">0</span> │</span><br><span class="line">├───┤</span><br><span class="line">│ <span class="number">0</span> │</span><br><span class="line">├───┤</span><br><span class="line">│ <span class="number">0</span> │</span><br><span class="line">├───┤</span><br><span class="line">│ <span class="number">0</span> │</span><br><span class="line">├───┤</span><br><span class="line">│ <span class="number">0</span> │</span><br><span class="line">├───┤</span><br><span class="line">│ <span class="number">0</span> │</span><br><span class="line">┏━━━┓</span><br><span class="line">┃ <span class="number">1</span> ┃</span><br><span class="line">┗━━━┛</span><br><span class="line">│ <span class="number">0</span> │</span><br><span class="line">└───┘</span><br><span class="line">Z = np.array([<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>]).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">┌───┬───┬───┬───┐</span><br><span class="line">│ <span class="number">0</span> │ <span class="number">0</span> │ <span class="number">0</span> │ <span class="number">0</span> │</span><br><span class="line">├───┼───┼───┼───┤</span><br><span class="line">│ <span class="number">0</span> │ <span class="number">0</span> │ <span class="number">0</span> │ <span class="number">0</span> │</span><br><span class="line">├───┼───┏━━━┓───┤</span><br><span class="line">│ <span class="number">0</span> │ <span class="number">0</span> ┃ <span class="number">1</span> ┃ <span class="number">0</span> │</span><br><span class="line">└───┴───┗━━━┛───┘</span><br><span class="line">Z = np.array([<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>]).reshape(<span class="number">4</span>,<span class="number">3</span>)</span><br><span class="line">┌───┬───┬───┐</span><br><span class="line">│ <span class="number">0</span> │ <span class="number">0</span> │ <span class="number">0</span> │</span><br><span class="line">├───┼───┼───┤</span><br><span class="line">│ <span class="number">0</span> │ <span class="number">0</span> │ <span class="number">0</span> │</span><br><span class="line">├───┼───┼───┤</span><br><span class="line">│ <span class="number">0</span> │ <span class="number">0</span> │ <span class="number">0</span> │</span><br><span class="line">├───┏━━━┓───┤</span><br><span class="line">│ <span class="number">0</span> ┃ <span class="number">1</span> ┃ <span class="number">0</span> │</span><br><span class="line">└───┗━━━┛───┘</span><br><span class="line">Z = np.array([<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>]).reshape(<span class="number">6</span>,<span class="number">2</span>)</span><br><span class="line">┌───┬───┐</span><br><span class="line">│ <span class="number">0</span> │ <span class="number">0</span> │</span><br><span class="line">├───┼───┤</span><br><span class="line">│ <span class="number">0</span> │ <span class="number">0</span> │</span><br><span class="line">├───┼───┤</span><br><span class="line">│ <span class="number">0</span> │ <span class="number">0</span> │</span><br><span class="line">├───┼───┤</span><br><span class="line">│ <span class="number">0</span> │ <span class="number">0</span> │</span><br><span class="line">├───┼───┤</span><br><span class="line">│ <span class="number">0</span> │ <span class="number">0</span> │</span><br><span class="line">┏━━━┓───┤</span><br><span class="line">┃ <span class="number">1</span> ┃ <span class="number">0</span> │</span><br><span class="line">┗━━━┛───┘</span><br><span class="line">Z = np.array([<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>]).reshape(<span class="number">2</span>,<span class="number">6</span>)</span><br><span class="line">┌───┬───┬───┬───┬───┬───┐</span><br><span class="line">│ <span class="number">0</span> │ <span class="number">0</span> │ <span class="number">0</span> │ <span class="number">0</span> │ <span class="number">0</span> │ <span class="number">0</span> │</span><br><span class="line">├───┼───┼───┼───┏━━━┓───┤</span><br><span class="line">│ <span class="number">0</span> │ <span class="number">0</span> │ <span class="number">0</span> │ <span class="number">0</span> ┃ <span class="number">1</span> ┃ <span class="number">0</span> │</span><br><span class="line">└───┴───┴───┴───┗━━━┛───┘</span><br></pre></td></tr></table></figure><h3 id="广播broadcasting"><a class="markdownIt-Anchor" href="#广播broadcasting"></a> 广播Broadcasting</h3><blockquote><p>转变/扩充为相同纬度的ndarray再进行运算</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">Z1 = np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">Z2 = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Z1 + Z2</span><br><span class="line">┌───┬───┬───┐   ┌───┐   ┌───┬───┬───┐   ┏━━━┓───┬───┐   ┌───┬───┬───┐</span><br><span class="line">│ <span class="number">0</span> │ <span class="number">1</span> │ <span class="number">2</span> │ + │ <span class="number">1</span> │ = │ <span class="number">0</span> │ <span class="number">1</span> │ <span class="number">2</span> │ + ┃ <span class="number">1</span> ┃ <span class="number">1</span> │ <span class="number">1</span> │ = │ <span class="number">1</span> │ <span class="number">2</span> │ <span class="number">3</span> │</span><br><span class="line">├───┼───┼───┤   └───┘   ├───┼───┼───┤   ┗━━━┛───┼───┤   ├───┼───┼───┤</span><br><span class="line">│ <span class="number">3</span> │ <span class="number">4</span> │ <span class="number">5</span> │           │ <span class="number">3</span> │ <span class="number">4</span> │ <span class="number">5</span> │   │ <span class="number">1</span> │ <span class="number">1</span> │ <span class="number">1</span> │   │ <span class="number">4</span> │ <span class="number">5</span> │ <span class="number">6</span> │</span><br><span class="line">├───┼───┼───┤           ├───┼───┼───┤   ├───┼───┼───┤   ├───┼───┼───┤</span><br><span class="line">│ <span class="number">6</span> │ <span class="number">7</span> │ <span class="number">8</span> │           │ <span class="number">6</span> │ <span class="number">7</span> │ <span class="number">8</span> │   │ <span class="number">1</span> │ <span class="number">1</span> │ <span class="number">1</span> │   │ <span class="number">7</span> │ <span class="number">8</span> │ <span class="number">9</span> │</span><br><span class="line">└───┴───┴───┘           └───┴───┴───┘   └───┴───┴───┘   └───┴───┴───┘</span><br><span class="line">Z1 = np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">Z2 = np.arange(<span class="number">3</span>)[::-<span class="number">1</span>].reshape(<span class="number">3</span>,<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Z1 + Z2</span><br><span class="line">┌───┬───┬───┐   ┌───┐   ┌───┬───┬───┐   ┏━━━┓───┬───┐   ┌───┬───┬───┐</span><br><span class="line">│ <span class="number">0</span> │ <span class="number">1</span> │ <span class="number">2</span> │ + │ <span class="number">2</span> │ = │ <span class="number">0</span> │ <span class="number">1</span> │ <span class="number">2</span> │ + ┃ <span class="number">2</span> ┃ <span class="number">2</span> │ <span class="number">2</span> │ = │ <span class="number">2</span> │ <span class="number">3</span> │ <span class="number">4</span> │</span><br><span class="line">├───┼───┼───┤   ├───┤   ├───┼───┼───┤   ┣━━━┫───┼───┤   ├───┼───┼───┤</span><br><span class="line">│ <span class="number">3</span> │ <span class="number">4</span> │ <span class="number">5</span> │   │ <span class="number">1</span> │   │ <span class="number">3</span> │ <span class="number">4</span> │ <span class="number">5</span> │   ┃ <span class="number">1</span> ┃ <span class="number">1</span> │ <span class="number">1</span> │   │ <span class="number">4</span> │ <span class="number">5</span> │ <span class="number">6</span> │</span><br><span class="line">├───┼───┼───┤   ├───┤   ├───┼───┼───┤   ┣━━━┫───┼───┤   ├───┼───┼───┤</span><br><span class="line">│ <span class="number">6</span> │ <span class="number">7</span> │ <span class="number">8</span> │   │ <span class="number">0</span> │   │ <span class="number">6</span> │ <span class="number">7</span> │ <span class="number">8</span> │   ┃ <span class="number">0</span> ┃ <span class="number">0</span> │ <span class="number">0</span> │   │ <span class="number">6</span> │ <span class="number">7</span> │ <span class="number">8</span> │</span><br><span class="line">└───┴───┴───┘   └───┘   └───┴───┴───┘   ┗━━━┛───┴───┘   └───┴───┴───┘</span><br><span class="line">Z1 = np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">Z2 = np.arange(<span class="number">3</span>)[::-<span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Z1 + Z2</span><br><span class="line">┌───┬───┬───┐   ┌───┬───┬───┐   ┌───┬───┬───┐   ┏━━━┳━━━┳━━━┓   ┌───┬───┬───┐</span><br><span class="line">│ <span class="number">0</span> │ <span class="number">1</span> │ <span class="number">2</span> │ + │ <span class="number">2</span> │ <span class="number">1</span> │ <span class="number">0</span> │ = │ <span class="number">0</span> │ <span class="number">1</span> │ <span class="number">2</span> │ + ┃ <span class="number">2</span> ┃ <span class="number">1</span> ┃ <span class="number">0</span> ┃ = │ <span class="number">2</span> │ <span class="number">2</span> │ <span class="number">2</span> │</span><br><span class="line">├───┼───┼───┤   └───┴───┴───┘   ├───┼───┼───┤   ┗━━━┻━━━┻━━━┛   ├───┼───┼───┤</span><br><span class="line">│ <span class="number">3</span> │ <span class="number">4</span> │ <span class="number">5</span> │                   │ <span class="number">3</span> │ <span class="number">4</span> │ <span class="number">5</span> │   │ <span class="number">2</span> │ <span class="number">1</span> │ <span class="number">0</span> │   │ <span class="number">5</span> │ <span class="number">5</span> │ <span class="number">5</span> │</span><br><span class="line">├───┼───┼───┤                   ├───┼───┼───┤   ├───┼───┼───┤   ├───┼───┼───┤</span><br><span class="line">│ <span class="number">6</span> │ <span class="number">7</span> │ <span class="number">8</span> │                   │ <span class="number">6</span> │ <span class="number">7</span> │ <span class="number">8</span> │   │ <span class="number">2</span> │ <span class="number">1</span> │ <span class="number">0</span> │   │ <span class="number">8</span> │ <span class="number">8</span> │ <span class="number">8</span> │</span><br><span class="line">└───┴───┴───┘                   └───┴───┴───┘   └───┴───┴───┘   └───┴───┴───┘</span><br><span class="line">Z1 = np.arange(<span class="number">3</span>).reshape(<span class="number">3</span>,<span class="number">1</span>)</span><br><span class="line">Z2 = np.arange(<span class="number">3</span>).reshape(<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Z1 + Z2</span><br><span class="line">┌───┐   ┌───┬───┬───┐   ┏━━━┓───┬───┐   ┏━━━┳━━━┳━━━┓   ┌───┬───┬───┐</span><br><span class="line">│ <span class="number">0</span> │ + │ <span class="number">0</span> │ <span class="number">1</span> │ <span class="number">2</span> │ = ┃ <span class="number">0</span> ┃ <span class="number">0</span> │ <span class="number">0</span> │ + ┃ <span class="number">0</span> ┃ <span class="number">1</span> ┃ <span class="number">2</span> ┃ = │ <span class="number">0</span> │ <span class="number">1</span> │ <span class="number">2</span> │</span><br><span class="line">├───┤   └───┴───┴───┘   ┣━━━┫───┼───┤   ┗━━━┻━━━┻━━━┛   ├───┼───┼───┤</span><br><span class="line">│ <span class="number">1</span> │                   ┃ <span class="number">1</span> ┃ <span class="number">1</span> │ <span class="number">1</span> │   │ <span class="number">0</span> │ <span class="number">1</span> │ <span class="number">2</span> │   │ <span class="number">1</span> │ <span class="number">2</span> │ <span class="number">3</span> │</span><br><span class="line">├───┤                   ┣━━━┫───┼───┤   ├───┼───┼───┤   ├───┼───┼───┤</span><br><span class="line">│ <span class="number">2</span> │                   ┃ <span class="number">2</span> ┃ <span class="number">2</span> │ <span class="number">2</span> │   │ <span class="number">0</span> │ <span class="number">1</span> │ <span class="number">2</span> │   │ <span class="number">2</span> │ <span class="number">3</span> │ <span class="number">4</span> │</span><br><span class="line">└───┘                   ┗━━━┛───┴───┘   └───┴───┴───┘   └───┴───┴───┘</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本笔记记录一下Numpy的一些基础，包括：（1）ndarray的数据结构及数值类型；（2）常见操作（Creation/Indexing/Reshaping/Broadcasting）的Quick References。学习&lt;a href=&quot;https://www.labri.fr/perso/nrougier/from-python-to-numpy/&quot;&gt;资料&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="机器学习与深度学习" scheme="https://hscyber.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Numpy" scheme="https://hscyber.github.io/tags/Numpy/"/>
    
    <category term="ndarray" scheme="https://hscyber.github.io/tags/ndarray/"/>
    
  </entry>
  
  <entry>
    <title>Matplotlib基础(杂)：中文及英文字体设置</title>
    <link href="https://hscyber.github.io/posts/7c8b9f60/"/>
    <id>https://hscyber.github.io/posts/7c8b9f60/</id>
    <published>2023-02-12T08:45:36.000Z</published>
    <updated>2023-02-13T09:01:09.928Z</updated>
    
    <content type="html"><![CDATA[<p>记一下在Matplotlib绘图中默认字体的调整，以及中文字体绘图时会涉及的乱码问题，本文主要<a href="https://matplotlib.org/devdocs/tutorials/text/index.html">参考</a>。</p><span id="more"></span><p>包引入，需要注意的是，此处默认绘图要么统一中文要么统一英文，<font color="#dd0000">不考虑中英文混杂的情况</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">matplotlib.rcParams[<span class="string">&#x27;figure.dpi&#x27;</span>] = <span class="number">150</span></span><br><span class="line"><span class="comment"># 解决中文乱码问题</span></span><br><span class="line">plt.rcParams[<span class="string">&quot;font.family&quot;</span>] = <span class="string">&quot;serif&quot;</span></span><br><span class="line">plt.rcParams[<span class="string">&quot;font.serif&quot;</span>] = [<span class="string">&quot;Microsoft YaHei&quot;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&quot;axes.unicode_minus&quot;</span>]=<span class="literal">False</span> <span class="comment">#该语句解决图像中的“-”负号的乱码问题</span></span><br></pre></td></tr></table></figure><h2 id="内置及本地字体查看"><a class="markdownIt-Anchor" href="#内置及本地字体查看"></a> 内置及本地字体查看</h2><p>配置文件<a href="https://matplotlib.org/stable/tutorials/introductory/customizing.html">matplotlibrc</a>，查看字体列表位置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">matplotlib.get_cachedir()</span><br><span class="line"><span class="comment"># fontlist = &quot;C:/Users/huangs/.matplotlib/fontlist-v330.json&quot;</span></span><br><span class="line">matplotlib.matplotlib_fname()<span class="comment"># 当前工作路径的默认字体属性文件</span></span><br></pre></td></tr></table></figure><p>查看具体及本地全部中英文字体的别名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[f.name <span class="keyword">for</span> f <span class="keyword">in</span> matplotlib.font_manager.fontManager.afmlist]</span><br><span class="line">[f.name <span class="keyword">for</span> f <span class="keyword">in</span> matplotlib.font_manager.fontManager.ttflist]</span><br></pre></td></tr></table></figure><p>当前的默认字体</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(plt.rcParams[<span class="string">&quot;font.serif&quot;</span>][<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(plt.rcParams[<span class="string">&quot;font.sans-serif&quot;</span>][<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(plt.rcParams[<span class="string">&quot;font.monospace&quot;</span>][<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h2 id="字体类别及设置"><a class="markdownIt-Anchor" href="#字体类别及设置"></a> 字体类别及设置</h2><blockquote><p><a href="https://hscyber.github.io/posts/44ded5de/">了解一下中英文字体和分类</a>，此处对字体进行初步了解</p></blockquote><h3 id="英文"><a class="markdownIt-Anchor" href="#英文"></a> 英文</h3><p>Matplotlib中字体大类<mark>Family</mark>有{‘cursive’, ‘fantasy’, ‘monospace’, ‘sans’, ‘sans-serif’, ‘serif’}，常用的就<font color="#dd0000"> ‘sans serif’, ‘serif’</font>。选择字体时先选择大类再设置对应的具体字体，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选择无衬线字体并将其指定为“Helvetica”</span></span><br><span class="line">plt.rcParams[<span class="string">&quot;font.family&quot;</span>] = <span class="string">&quot;sans-serif&quot;</span></span><br><span class="line">plt.rcParams[<span class="string">&quot;font.sans-serif&quot;</span>] = [<span class="string">&quot;Helvetica&quot;</span>]</span><br><span class="line"><span class="comment"># 选择无衬线字体并将其指定为“Times New Roman”</span></span><br><span class="line">plt.rcParams[<span class="string">&quot;font.family&quot;</span>] = <span class="string">&quot;serif&quot;</span></span><br><span class="line">plt.rcParams[<span class="string">&quot;font.serif&quot;</span>] = [<span class="string">&quot;Times New Roman&quot;</span>]</span><br><span class="line"><span class="comment"># 选择等宽字体并将其指定为“FreeMono”</span></span><br><span class="line">plt.rcParams[<span class="string">&quot;font.family&quot;</span>] = <span class="string">&quot;monospace&quot;</span></span><br><span class="line">plt.rcParams[<span class="string">&quot;font.monospace&quot;</span>] = [<span class="string">&quot;FreeMono&quot;</span>]</span><br></pre></td></tr></table></figure><p>常用字体：</p><ul><li>Sans Serif：无衬线体，如Arial(等线)，Calibri，Helvetica，Consolas，Noto Sans SC</li><li>Serif：衬线体，笔画的末尾有“衬线”，棱角分明一些，似乎对印刷更为友好：Times New Roman，Courier，Noto Serif SC，Georgia, Droid Serif, Cambria</li></ul><h3 id="中文"><a class="markdownIt-Anchor" href="#中文"></a> 中文</h3><p>中文常用的字体别称如下，具体名称可以在第一节除查看：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.rcParams[<span class="string">&quot;font.family&quot;</span>] = <span class="string">&quot;serif&quot;</span></span><br><span class="line">plt.rcParams[<span class="string">&quot;font.serif&quot;</span>] = [<span class="string">&quot;Microsoft YaHei&quot;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&quot;axes.unicode_minus&quot;</span>]=<span class="literal">False</span> <span class="comment">#该语句解决图像中的“-”负号的乱码问题</span></span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">字体名称</th><th style="text-align:center">别名</th></tr></thead><tbody><tr><td style="text-align:center">宋体</td><td style="text-align:center">SimSun</td></tr><tr><td style="text-align:center">黑体</td><td style="text-align:center">Simhei</td></tr><tr><td style="text-align:center">楷体</td><td style="text-align:center">KaiTi</td></tr><tr><td style="text-align:center">等线</td><td style="text-align:center">DengXian</td></tr><tr><td style="text-align:center">仿宋</td><td style="text-align:center">FangSong</td></tr><tr><td style="text-align:center">微软雅黑</td><td style="text-align:center">Microsoft YaHei</td></tr><tr><td style="text-align:center">华文宋体</td><td style="text-align:center">STSong</td></tr><tr><td style="text-align:center">华文中宋</td><td style="text-align:center">STZhongsong</td></tr><tr><td style="text-align:center">华文楷体</td><td style="text-align:center">STKaiti</td></tr><tr><td style="text-align:center">方正舒体</td><td style="text-align:center">FZShuTi</td></tr><tr><td style="text-align:center">华文新魏</td><td style="text-align:center">STXinwei</td></tr><tr><td style="text-align:center">方正姚体</td><td style="text-align:center">FZYaoTi</td></tr></tbody></table><p><a href="https://matplotlib.org/devdocs/tutorials/text/text_intro.html">绘图参考</a>，比如此处我设置华文新魏字体</p><img src="/posts/7c8b9f60/font.png" class alt="font"><h2 id="字体属性"><a class="markdownIt-Anchor" href="#字体属性"></a> 字体属性</h2><p><a href="https://matplotlib.org/devdocs/tutorials/text/text_props.html">字体属性</a>在涉及文本的属性设置如text或者labels，都可以添加属性字典调节：</p><p>包括：颜色、字体风格、是否加粗、倾斜、大小、透明度、背景颜色、对齐方式、背景框bbox等等</p><ul><li>如果单独设置则：fontsize, fontstyle,fontweight…，详细参考<a href="https://matplotlib.org/devdocs/tutorials/text/text_props.html">字体属性</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">fontdict = &#123;</span><br><span class="line">    <span class="string">&#x27;family&#x27;</span>: <span class="string">&#x27;serif&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;alpla&#x27;</span>:<span class="number">0.5</span>,</span><br><span class="line">    <span class="string">&#x27;style&#x27;</span>: <span class="string">&#x27;italic&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;color&#x27;</span>:  <span class="string">&#x27;darkred&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;weight&#x27;</span>: <span class="string">&#x27;bold&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;size&#x27;</span>: <span class="number">16</span>,</span><br><span class="line">    <span class="string">&#x27;va&#x27;</span>: <span class="string">&#x27;center&#x27;</span>,<span class="comment"># 对齐方式verticalalignment</span></span><br><span class="line">    <span class="string">&#x27;rotation&#x27;</span>:<span class="number">40</span>,<span class="comment">#&#x27;vertical&#x27;</span></span><br><span class="line">    bbox=&#123;<span class="string">&#x27;facecolor&#x27;</span>: <span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;alpha&#x27;</span>: <span class="number">0.5</span>, <span class="string">&#x27;pad&#x27;</span>: <span class="number">10</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">ax.text(<span class="number">2</span>, <span class="number">6</span>, <span class="string">&#x27;注释&#x27;</span>, fontdict=fontdict)</span><br></pre></td></tr></table></figure><img src="/posts/7c8b9f60/font2.png" class alt="font2">]]></content>
    
    
    <summary type="html">&lt;p&gt;记一下在Matplotlib绘图中默认字体的调整，以及中文字体绘图时会涉及的乱码问题，本文主要&lt;a href=&quot;https://matplotlib.org/devdocs/tutorials/text/index.html&quot;&gt;参考&lt;/a&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="Python可视化" scheme="https://hscyber.github.io/categories/Python%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
    <category term="Python" scheme="https://hscyber.github.io/tags/Python/"/>
    
    <category term="Matplotlib" scheme="https://hscyber.github.io/tags/Matplotlib/"/>
    
    <category term="Font" scheme="https://hscyber.github.io/tags/Font/"/>
    
    <category term="绘图中文乱码" scheme="https://hscyber.github.io/tags/%E7%BB%98%E5%9B%BE%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>了解一下中英文字体和分类</title>
    <link href="https://hscyber.github.io/posts/44ded5de/"/>
    <id>https://hscyber.github.io/posts/44ded5de/</id>
    <published>2023-02-05T08:31:37.000Z</published>
    <updated>2023-02-10T09:15:08.046Z</updated>
    
    <content type="html"><![CDATA[<p>字体<a href="https://en.wikipedia.org/wiki/Typeface">Typeface</a>，在撰写文稿、PPT以及制图等等都会有一个字体选择的问题，因此了解一下相关知识。此外，不同语言字体的设计是非常繁琐的过程，尤其是面向中文，有的字体对一些字会有所遗漏。为了使用方便，多数情况下我会选择最常用的那些经典字体即可，如Arial, Calibri, Helvetica, Times New Roman等，本网站用的是Noto Serif SC。</p><span id="more"></span><h2 id="中文字体"><a class="markdownIt-Anchor" href="#中文字体"></a> 中文字体</h2><p>中文没有查到相关的比较好的分类，主要是<strong>宋体、黑体、楷体</strong>及他们的变体。个人常用的字体：<u>宋体、仿宋、华文中宋、微软雅黑、方正字体家族</u></p><ul><li>如果是<strong>印刷</strong>则推荐宋体家族</li><li><strong>屏幕</strong>展示微软雅黑等等</li></ul><h2 id="英文字体"><a class="markdownIt-Anchor" href="#英文字体"></a> 英文字体</h2><blockquote><p>Matplotlib中的<strong>Serif, Sans Serif, Monospace</strong>都是指大类字体，设置具体的字体需要多设置一步指明具体字体</p></blockquote><p>字体大类，每类都包含很多种可选字体，可分为三类：<strong>衬线、非衬线和其他</strong>：</p><ol><li><a href="https://en.wikipedia.org/wiki/Serif">Serif</a>：衬线体，笔画的末尾有“衬线”，棱角分明一些，似乎对<font color="#dd0000">印刷</font>更为友好，见下图，常用的如<ol><li>Adobe Garamond字体，是衬线字体的典范。</li><li>Times New Roman，最初基于Plantin 字体设计的新的更适合报纸排版的字体</li><li>Courier：过去打字机打出来的字体样式</li><li>适合长文阅读的文字：Georgia, Droid Serif, Cambria</li><li>Noto Serif SC：Noto Serif Simplified Chinese简体中文</li></ol></li><li><a href="https://en.wikipedia.org/wiki/Sans-serif">Sans Serif</a>：无衬线体，如<ol><li>Arial(等线体)：设计的目的是在电脑屏幕上不同分辨率下的可读性，万能字体，window当前的默认字体</li><li>Calibri：2007年开始取代Times New Roman成为了Microsoft 很多软件的默认字体，当前为Arial</li><li>Helvetica：无衬线字体经典之作！！是世界排名第一的字体，被无数的企业使用作为标准字，也是苹果电脑的御用字体。</li><li>Consolas：代码阅读</li><li>Noto Sans SC：Noto Sans Simplified Chinese简体中文</li><li>适合长文阅读的文字：Lucida Grande、Roboto、Open Sans</li></ol></li><li><a href="https://en.wikipedia.org/wiki/Monospaced_font">Monospace</a>：等宽字体</li><li>其他：Handwriting, Fantasy, <a href="https://en.wikipedia.org/wiki/Cursive">Cursive草书</a></li></ol><img src="/posts/44ded5de/image-20230205164158301.png" class alt="sans"><img src="/posts/44ded5de/image-20230205164521485.png" class alt="monospace"><h2 id="更多可以参考"><a class="markdownIt-Anchor" href="#更多可以参考"></a> 更多可以参考</h2><ul><li><a href="https://fonts.google.com/">https://fonts.google.com/</a></li><li><a href="https://www.zhihu.com/question/23210530">https://www.zhihu.com/question/23210530</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;字体&lt;a href=&quot;https://en.wikipedia.org/wiki/Typeface&quot;&gt;Typeface&lt;/a&gt;，在撰写文稿、PPT以及制图等等都会有一个字体选择的问题，因此了解一下相关知识。此外，不同语言字体的设计是非常繁琐的过程，尤其是面向中文，有的字体对一些字会有所遗漏。为了使用方便，多数情况下我会选择最常用的那些经典字体即可，如Arial, Calibri, Helvetica, Times New Roman等，本网站用的是Noto Serif SC。&lt;/p&gt;</summary>
    
    
    
    <category term="暂未分类" scheme="https://hscyber.github.io/categories/%E6%9A%82%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
    <category term="字体" scheme="https://hscyber.github.io/tags/%E5%AD%97%E4%BD%93/"/>
    
  </entry>
  
  <entry>
    <title>是动物</title>
    <link href="https://hscyber.github.io/posts/3e450d8f/"/>
    <id>https://hscyber.github.io/posts/3e450d8f/</id>
    <published>2023-01-29T10:43:49.000Z</published>
    <updated>2023-02-13T03:18:59.927Z</updated>
    
    <content type="html"><![CDATA[<p>2月11日，也就是昨天，我在北京动物园转了一圈，约莫着有两个小时，其间多次想结束行程，但一股一探究竟的“好奇心”趋势我看完了大部分展馆，结束后心情复杂，加上天气阴冷，疲惫不堪，饱餐一顿回宿舍后沉沉入睡，第二天起来还是有念想，我想我不得不写点，好将这些情绪暂存在别处。【发布日期改为初八以免遮挡正经推文hh】</p><span id="more"></span><p>这是我第一次去被称作动物园的地方。没去之前，想象中就是很多关在大笼子里的各种各样的动物，实际也确实是如此，但亲眼看的时候却很自然地会感到难受，因为在它们身上我已经感受不到那种生命力了。相比于我在纪录片中看的，在野外看到的大大小小的动物们，笼子里的动物过于安静了，硬邦邦的地面也过度荒凉，除了住着国宝的熊猫馆里有的竹叶，找不到几点绿，当然，这应该和北方季节脱不了干系。</p><p>转一圈下来，这里成了少数让我觉得它的存在只是为了让我觉得它不应该存在的的景点，这或许就是它的初衷。这是北京物种多样性很“丰富”的地块，我能看到在笼子角落里安静的狮子、一动不动躺着或站着的犀牛河马和大象、爬树干的熊、不知所措的孤狼、一个劲吃竹子的大熊猫、背对着游客的猞猁、睡大觉的大猫头鹰……甚至还有在鸟笼顶部的金雕，每个动物的介绍都会写他们的生活地带海拔高度和繁殖等等。此外，有不少令我印象深刻的牌子，比如：</p><ul><li>在野外、象一般活到60岁到70岁、在动物园里，可以活到80岁</li><li>北京动物园新熊山改造项目自2013年启动设计，于2014年5月开工，9月底竣工，改造面积总计1.65万平方米。项目以“增加景观生态元素，提高动物福利”的“生态式”动物展出为理念，采用国际先进的沉浸式展出模式，努力再现动物自然栖息地的自然与人文。游客参观如同进入“野外”。移步易景，透过不同形式的展窗观察、窥视黑熊、棕熊在郁郁葱葱的生态环境中的起居生活，从而提升公众对动物和自然的关注，达到动物园开展动物和自然生态保护的公众教育目的。</li><li>……</li></ul><p>想起之前封校的时候，我们还能够在校区里娱乐，即便是一个人封在宿舍，我们也能够通过手机和外面的世界建立一些联系，这样都已经很难受了，它们呢？不得而知，但我能够感受到的就是它们的”孤寂、悲伤、哭泣、无助、空洞、畏惧、无所适从“，明知道走不出的笼子里是不会有生机的。院子里的雕像比真的更加霸气和好看，周边商城的动物玩偶也比笼子里的真“玩偶”可爱，家里的小猫小狗、村里牛棚里的耕地牛比他们自由，我想起在西藏明信片看到的猞猁，桌面上的冰墩墩、高原上偶遇的老鹰和野驴，纪录片里的大象长颈鹿老虎狮子鬣狗野狼……</p><p>昨天因为是星期六，有很多家长带着小孩参观，但是家长向孩子介绍光线昏暗的狭小空间里各种动物时，感受和我应该类似，失望，他们应该还附带了一些小小的尴尬和无奈。          所幸路过溪流的时候看到水里有很多鸭子，他们看来倒还十分欢乐，加上叽叽喳喳飞来飞去的鸟，他们一起呈现了园子里的不多的生机。当然，再得算上日复一日络绎不绝的参观人群的话，就不得不说是生机勃勃了。</p><p>变与不变。来参观的人每天都在变，会第二次参观动物园的人毕竟是少部分人，行人和园子的流水每天都在更新，但动物的生活或许在回归大地前都是一成不变。噢，今天还看到关于北京动物园:正办理旅美大熊猫“丫丫”回国手续的新闻……</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;2月11日，也就是昨天，我在北京动物园转了一圈，约莫着有两个小时，其间多次想结束行程，但一股一探究竟的“好奇心”趋势我看完了大部分展馆，结束后心情复杂，加上天气阴冷，疲惫不堪，饱餐一顿回宿舍后沉沉入睡，第二天起来还是有念想，我想我不得不写点，好将这些情绪暂存在别处。【发布日期改为初八以免遮挡正经推文hh】&lt;/p&gt;</summary>
    
    
    
    <category term="生活漫步" scheme="https://hscyber.github.io/categories/%E7%94%9F%E6%B4%BB%E6%BC%AB%E6%AD%A5/"/>
    
    
  </entry>
  
  <entry>
    <title>2022年度总结</title>
    <link href="https://hscyber.github.io/posts/622a5765/"/>
    <id>https://hscyber.github.io/posts/622a5765/</id>
    <published>2023-01-20T03:20:56.000Z</published>
    <updated>2023-03-15T05:37:56.968Z</updated>
    
    <content type="html"><![CDATA[<p>临近正式开学，想起从过年前开始写的总结断断续续愣是现在也没写完（返校后直接抛之脑后了属于是），便抽空来此填填坑。<font color="#dd0000">回顾过去一年时间精力的花销很重要，洞察过去才能更好的走好当下和之后的路</font>。</p><span id="more"></span><h2 id="序"><a class="markdownIt-Anchor" href="#序"></a> 序</h2><blockquote><p>思绪和情感每天都在发生着变化，我对于周遭人和事的看法有时也转瞬即变，或因为心情或因为思考或是其他。几天前洋洋洒洒记下的感想，过几天看可能又觉得不明所以，但不论如何，他们也都是真实的自我，值得留下印记。</p></blockquote><p>总结是回家之后百无聊赖的情况下开始动笔写的，断断续续写到了初三初四，随后就在走亲访友游山玩水中忘记了这回事。直到年后2.3日，大概初十，开组会，导师带头定下了新年目标，并让大家都即兴放松地讲讲自己的新年规划。我自然是不惧场的，我也喜欢谈感想，找到年前写的总结和规划提炼了一下，因此作为第一个讲的学生，我也算开了个好头，那一上午就在这样的活动中度过了。</p><p>席间听了老师师兄师姐们的“故事”又有了很多的感想和体会，想着定要把没写完的总结写完。世事难料，一转眼就拖到了现在，现在是2023年2月13日。          于是就赶紧把之前写的再捡起来丢出去hh……</p><h2 id="2022年度总结"><a class="markdownIt-Anchor" href="#2022年度总结"></a> 2022年度总结</h2><blockquote><p>回到老家的第二天，已经开始无聊并预感到了接下来的像往年一样的重复，想来想去，决定趁这个时间写一写年度总结[2023/01/20]。</p></blockquote><p>日子真的很值得记录，我常常都会有想要写下点什么的冲动。从疫情开始以来发生的许多事情，遇到的人，去过的地方，看过的读过的经历过的，很多都还记得很清楚有哭有笑，有失有得，这几年的疫情是未曾也无法预料的，往后的生活亦是，新冠已经成为了我们的烙印，n年之后，兴许也会成为一代人挂在嘴边的老故事。</p><p>平淡的生活与事物也是值得记录的，时间的流逝和年岁的辗转，也会带走很多东西，就像被乡村巴士带走的王孩儿和神仙。不说别的，从县城到进村子，一路上的风景每年都是一个大变。县城里多了数不清的不知名的新店，和一些以前没有现在多出来的招牌，回镇上的路越来越通畅，新修的联通各个村镇的大路我都找不着北。到了村口，总会想起以前上学路上走到这里能闻到的猪*的味道，和旁边贴的猪饲料广告；再往前走一段，会想起金黄的一片油菜花；走到第一个小山头，会想起这块地是从小到大给我理发平头的驼背老爷爷的地，不知道他还在不在；再走到大拐弯，看到右边一排板栗树，会想起以前大清早来这里捡脱落下来的板栗，这种在树脚下躺了一晚上的板栗又脆又带点软还很甜，实乃佳品；看到那颗村子的标志性七八百年的倒栽古柏，会想起从小在这树下玩的各种游戏，和童年的小伙伴；快到家，家家户户门那排茂密的各种各样的能吃的不能吃的树，也已经被统一的稀稀拉拉几颗一模一样的人工树取代……回忆起自己以前经历过的事情，很多人或许都能讲个几天几夜，那都是独属于我们的故事。</p><p>回到2022，这被疫情拆成一段一段的一年，如梦如幻的一年，好哭又好笑的一年。总结，常是从生活学习工作等等几个方面写，好像有些略显空空，便先循着手机相册先列一列今年的一些事，附在了末尾[2023/01/20]。</p><blockquote><p>第四天，大年初一，接着把总结收个尾。[2023/01/22]</p></blockquote><p>研究生，就先回顾一下学习吧</p><ul><li>2022下已是我研究生的第三个年头，学习或者说工作上不尽人意，多少还是懈怠了。逯哥多哥等都已经忙着毕业就业的事情，我倒还在不慌不忙的学习和干活，还经常顶着疫情出去玩耍，所以一年下来研究推进的较慢，直到年尾都没把初稿写出来，尽管结果是基本是跑完了。当然，由于组里今年很多之前的项目结题，参与了不少项目的申请工作。</li><li>开始感觉到了紧迫。组里学生已经9个，22年师兄申请到了国外的交流资助，23年师兄若走，师姐一毕业，我竟即将扭头成为组里老二，在带师弟的过程中还是感觉自己捉襟见肘，也缺乏实践，很多时候想法还比较偏执；生活中也是如此，很多方面都有待进步，希望自己可以成长地快一些。</li><li>一个“好”的学科和方向以及具体的选题，在我看来是十分重要的，当然，有时候也是运气使然。对专业方向和自己做的东西还是时不时会有迷茫或者低价值感，不管是大还是小，包括在大小期刊上看很多的工作，都不能够让我产生那种敬意或是热情。老师之前说这不是我应该考虑的问题，确实，我也知道，还有人说是我看的不够多，层次还不够。都有道理，但是我还是觉得懂得都懂。当然，话虽如此，我依旧是会充满热情和好奇去学习，并在过程中创造一些属于自己的东西，科研问题的过程还是挺锻炼人的。</li><li>重视研究的数据，获取到什么样的数据才能开展什么样的研究，而不是真的所谓科学问题第一，对数据的认识和理解和问题的提出是一个并进的过程。</li><li>还一个可能就是这个博客和公众号了。学习、记录，包括科研过程中一些技术问题的学习，都是一个打基础，输入的过程，加上自己对解决问题和新鲜事务有着不错的好奇心，收货颇丰，新的一年希望能够更加自如地应用计算机技术辅助和加快自己的研究。</li><li>科研的时间实际上也是不太够的，因为22年在生活、情绪、兴趣方面倾注了更多的注意力。</li></ul><p>至于生活和兴趣，以前我常一周都坐在办公室里摸鱼（美其名曰是个能坐的住的人），去年则给自己加了一些生活和工作的边界感，在周末和假期去做一些自己喜欢和感兴趣的事情，包括和朋友们一起玩耍聚餐，每周运动，包括学习一些无关工作的技能：</p><ul><li>认识了很多的新朋友。一是所内的，算是拥抱了一个小团体了，轩轩老朱老蔡还有琳琳邓敏小辛等，在雁栖湖的时候大家都是在一个班，但是因为不在一个宿舍、不同专业等原因接触的不多，加上学业繁忙，不太熟。通过所里这段时间的各种聚餐游玩活动和“共患难”，都很熟络了，每个人都是非常直爽和真诚，愿友谊长存。</li><li>二是通过“摄影”认识了一些摄友。在上半年的时候和家乐师兄聊天，我说我觉得自己的生活过得很沉重很单调，师兄建议我多找同学朋友玩耍聊天，也可以整点爱好，音乐啊什么的，摄影也行，我这相机放在这你可以用，我看你平时就还蛮喜欢拍照的。我一想也是，仔细想了一下，就买了个微单作为记录光影和生活的新工具，当然，它也确实带给了我不少的充实。最开始在知乎加了聪哥一个人，再和韩大哥建了三人的摄友群，从三个人第一次国庆见面到现在群里已经30人了，我也见过了其中10多个朋友，大家相处起来很轻松，看看风景拍拍照片，偶尔给自己拍几张喜欢的照片，非常地愉快。每个人都有闪闪发光的一面啊。</li><li>三是阅读，我不是一个多喜欢阅读的人，算是再次强迫自己重拾了读书的习惯，主要是非技术类的。今年买了很多书，看了不少书，有些是重温，大学时候看书好像都没看懂，寒假准备把家里一些书再带过去。即便是光看一些旧的经典书籍，也都是无止境的，所以很多书我都是有兴趣更确切的说是好奇心驱使，或是一些特别的场景或机缘下看到一个书的介绍，触动了我，便买来看看。读书最大的感触是有时会觉得小说什么的也是一个艺术品的创造的过程，美，本身就可以带来一种愉悦。很难说阅读会带给我什么帮助，但是脑子里多了一些故事，多了一些感慨，偶尔也会多一些认识和反思。</li><li>最后想聊聊“艺术”，每次听到好的音乐，会让我心潮澎湃备受鼓舞，觉得这个世界是有意义的，是需要去努力创造和表达的。好的艺术作品，音乐、小说、诗歌、绘画、电影、故事亦或是独特的令人振动的作品，时时能能激起我内心深处的感动，能让我深切地感受到作为生命，生活的意义所在，在于去热爱、去创造、去爱、去充分地表达自我，展现自己独一无二的生命力。或许每个人天生就是有艺术性的，浪漫的，就像王小波写的每个人应该做自己的诗人，就像有画家说真正想绘画是拦不住的……这种表达或许无关外界，也不需要理会外界，就像欧文斯通笔下的梵高与伦勃朗，毛姆笔下的斯特里克兰，苦难与艺术，向往和毫无保留。死亡诗社里有一段话我很喜欢，我们我们读诗写诗，并不是因为它好玩，我们读诗写诗是因为我们是人类的一分子，而人类是充满激情的。没错，医学，法律，商业，工程，这些都是崇高的追求，足以支撑人的一生。但诗歌、美丽、浪漫、爱，这些才是我们生活的意义。</li><li>当然，这或许是有些理想了，囿于世俗和日渐紧密的社会，很多时候还是要接地气才行，需要去做一些有价值的事情。但你若要问及我梦想，我暂且还不清晰，能想到的就是它一定是一些无关名或利的东西。</li><li>然后就是博客和个人私有公众号了，博客到目前为止还是按照自己喜欢且习惯的方式记录着，公号倒是时不时才会写一点，情绪需要控制hh。但有一点我逐渐明确了，我喜欢写，些许享受着将脑中的飘忽不定形成文字。</li><li>最后可能就是运动了。健身/力量训练的学习，算是一个不错的新体验，在朋友们的带领下，队伍逐渐壮大，半年多还重了3/4kg，对于我七八年每变的体重，属实不易；慢跑，5km/周跑持续了两个来月，冬天在园区跑了几次，来年继续坚持吧，过程尽管挺枯燥，但是能够感觉到别样的充实，当然，配速的变化和稳定也是一个鼓励。</li></ul><h2 id="23新年flags"><a class="markdownIt-Anchor" href="#23新年flags"></a> 23新年flags</h2><blockquote><p>完不完成是一回事，立肯定还是要立的hh</p></blockquote><p>首先是必须要的：</p><ul><li>手边工作的投递和新工作的推进1+1</li><li>年底的博士大论文开题预备</li><li>熟练机器学习深度学习应用技能</li><li>坚持慢跑和锻炼</li><li>坚持阅读</li><li>旅行与出游</li><li>宿舍厨房技能学习</li><li>驾考科234</li></ul><p>其实是不要</p><ul><li>不要熬夜，从大年初一开始算！非必要不超过12.</li><li>睡前不要打游戏，不要刷视频</li><li>不要在工作日玩游戏或刷剧</li><li>不要陷入细小而无关紧要的技术/其他问题</li><li>不要自怜自艾</li></ul><p>其他不可控或非必须：</p><ul><li>青海西藏的出差</li><li>与老同学的旅行，尤其是今年毕业的老同学</li><li>组队自驾游，包括上方，意向城市（京郊、长沙、重庆、青岛、南京、广州、深圳……）</li><li>去广州看表姐表弟以及姐的好玩的小冰</li><li>技术公众号创建</li><li>英语学习</li><li></li></ul><h2 id="2022年大小事纪"><a class="markdownIt-Anchor" href="#2022年大小事纪"></a> 2022年大小事纪</h2><blockquote><p>一年300多天，没想到有这么多人和事和心绪值得留念，留在了我的相册，生活还是挺可爱的吧hh</p></blockquote><p>2022年，</p><ol><li>1月24日，我坐上回家的复兴号动车，25号到了县城的小屋子</li><li>1月26日，接了一通视频电话，挂断后，无声，难眠</li><li>1月27日，受邀与高中老师同学聚餐，小酌，席罢小简喝断片，姑且算是小事故</li><li>1月28日，回到老家，准备过年</li><li>2月2日，大年初二下雨天，外婆家，两辆车先后不同的位置掉沟里</li><li>2月8日，乘高铁抵京，路上认识了旁边坐的老乡，下车看到了冰墩墩和雪容融</li><li>2月12日，随室友天宇初次到访健身房，新的尝试</li><li>2月13日，北京大雪，据称30年难得一见，与花和锌火锅聚餐，谈天说地排忧解难</li><li>2月15日，杜老师邀请课题组共同聚餐，欢度元宵，迎接新年工作</li><li>2月27日，与锌逛奥森及新奥游玩</li><li>2月28日，与家乐师兄一起送材料后餐馆聚餐，记得店里有假山和鱼缸</li><li>3月2日，第一篇文章被接收，虽工作尚不尽人意，但也舒了口气，不用再拖泥带水</li><li>3月4日，课题组除老师外的师兄师姐一起新年聚餐，东北铁锅炖</li><li>3月11日，与高中老同学振宇国家大剧院同看《春天的歌声》，最爱-这世界有那么多人</li><li>3月18日，北京又大雪</li><li>3月27日，与好朋友聚餐，28日，逛玉渊潭周边</li><li>4月2日，独自在假期前一天登八达岭长城，人少，舒适出游</li><li>4月3日，与好朋友一起逛奥森公园，很开心，小遗憾未找到北园的花海，晚饭新奥聚餐，逛街，买了一顶喜欢的帽子</li><li>4月10日，顺利完成直博生博士资格答辩，晚上，吃了一喜日料，happy day</li><li>4月16日，同锌 花 参加了其课题组奥森公园野餐，正值奥森花期，遍地紫罗兰？</li><li>4月19日，初次解锁打卡奥森羽毛球馆</li><li>4月23日，与逯哥，青松以及另外三位大学同学聚餐，欢迎&amp;欢送刚来且即将离京的zs，受到了zs所在单位的特产</li><li>4月24日，与好朋友吃北京烤鸭，味道很赞</li><li>5月3日，与老朱同往东升八郊公园野餐</li><li>5月4日，疫情突发，搬主机回宿舍，奥运村长达一个月的封校即将开启</li><li>5月5日，参观zs学校，交谈过往</li><li>5月11日，正式全面封校</li><li>……</li><li>6月6日，解封回所</li><li>6月7日，收到会蒙师姐给组里老师同学们寄过来的几箱樱桃特产</li><li>6月10日，与轩轩等海底捞聚餐</li><li>6月23日，和马上毕业的嗡嗡师姐、宏涛师兄，志峰师兄拍了合照</li><li>7月8日，与轩轩等海底捞聚餐</li><li>7月11日，天津无人机基地参观并参加无人机培训</li><li>7月13日，观战，信息室在地理所篮球赛决赛中蝉联冠军</li><li>7月19日，晚至凌晨，与家乐师兄赛丽麦小酌共谈</li><li>7月20日，与锌新奥小聚并前往北园看向日葵园</li><li>7月30日，京东购买的相机经过10多天终于到手</li><li>8月1日晚，课题组全体师生在小悦父亲公司里聚餐，大酌一圈</li><li>8月9日，与锌奥森云海肴小聚</li><li>8月14日，收到朋友赠书，含卡尔维诺的佳作</li><li>8月16日，组里师兄师姐师弟师妹黄门老灶聚餐</li><li>8月21日，单车夜骑长安街，一人，下雨天</li><li>8月22日，收到黄师傅给组里寄来的特产芒果，晚上与锌在胜利坊吃老北京火锅</li><li>8月29日，提交新学期岗位任务书</li><li>8月30日，与老蔡等初次体验滑冰，未学会，晚上聚餐，泰国菜</li><li>8月31日，疫情突发，连夜核酸，在所里住了一晚</li><li>9月1日，在所里等车转运，9月2日凌晨抵达七彩家园集中隔离点，开始坐牢</li><li>9月7日，出狱</li><li>9月9日，共同给老师送教师节鲜花及礼物</li><li>9月10日，与花锌等日料店聚餐，大吃一顿欢庆出狱</li><li>9月16日，海底捞聚餐，共同庆祝轩轩生日</li><li>9月24日，与老班长、逯哥初次聚餐</li><li>9月26日，前往海淀驾校通过科目一考试，险过，报名是5月初报的</li><li>10月1日，与锌及其课题组师兄姐戒台寺登山</li><li>10月3日，与摄友韩大哥聪哥初次会面扫街，3人群成立。在首钢工业园，国家大剧院等地拍照</li><li>10月6日，与在京大学同学聚餐，少了zs，多了wxt，聊找工作的事情多</li><li>10月11日，与好朋友看百年无极名画历史展览，有梵高的园丁</li><li>10月13日，与悬等共同给老朱过生日，坚守两点一线，所内KFC</li><li>10月15日，与锌奥森并新奥川菜馆小聚</li><li>10月16日，一人往奥森北园拍花海银杏，人比花多</li><li>10月22日，北锣鼓巷等地扫街，认识了几位新朋友</li><li>10月23日，与琳威奥森银杏拍照，直至天黑</li><li>10月25日，所内与轩等一众同志们再度聚餐</li><li>11月1日，上午，二伯走了，童年往事浮现，眼泪无声</li><li>11月1日，下午，与轩等共爬香山，与其好友小康初次见面并与晚上聚餐</li><li>11月2日，幸运评了一等所长奖学金，算是抵掉了买相机和镜头的钱</li><li>11月4日，与周师兄奥森溜达，遇到了拍星轨的大爷</li><li>11月5日，与韩大哥辗转钓鱼台、玉渊潭、三里屯等地扫街，听故事</li><li>11月9日，疫情突发，混检有羊，宿舍楼封了半天，虚惊一场</li><li>11月13日，骑行白塔寺、故宫角楼、北海公园扫街，落日</li><li>11月19日，小郭生日，与老朱轩轩等宿舍活动室聚餐</li><li>11月21日，北京疫情突发，搬主机，此后封校，看世界杯，园区不记得何时开始有阳</li><li>……</li><li>12月10日，解封，疫情放开，身边大量同学阳或返家，此可往所里办公，期间三个室友阳</li><li>12月13日，原来人是会被大风吹倒的，而且不止一次</li><li>12月19日，北海公园景山公园等多地与聪打卡，与郭大初次会面，拍落日，扫街闲聊直至深夜</li><li>12月22日，应该是阳了，嗓子疼，24日，两条杠</li><li>12月31日，珍珠湖短程登山徒步，跨年活动，初次接触资深户外驴友</li><li>1月1日，与导师、刘张师兄及其妻新年聚餐，晚自己浅浅过25岁生日，此前还收到了朋友的惊喜礼物</li><li>1月4日，实验室年会，作为工作人员参与，并蹭盒饭</li><li>1月5日，全天组会，会后与杜老师及在京师兄姐等绿院餐厅年前最后聚餐</li><li>1月8日，临时起意将主机搬回所里，次日正式恢复正常办公</li><li>1月9日，与天宇，黄师兄办公室三人赛丽麦聚餐</li><li>1月11日，涂师姐开题，是答辩秘书</li><li>1月12日，三人共往韩大哥家葬猫，撸猫</li><li>1月17日，坐上回家的高铁，车子与旁边家人的5岁小女孩嬉笑一路，挥手告别</li><li>1月18日，再度回到老家，准备过春节</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;临近正式开学，想起从过年前开始写的总结断断续续愣是现在也没写完（返校后直接抛之脑后了属于是），便抽空来此填填坑。&lt;font color=&quot;#dd0000&quot;&gt;回顾过去一年时间精力的花销很重要，洞察过去才能更好的走好当下和之后的路&lt;/font&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="生活漫步" scheme="https://hscyber.github.io/categories/%E7%94%9F%E6%B4%BB%E6%BC%AB%E6%AD%A5/"/>
    
    
  </entry>
  
  <entry>
    <title>Pandas(杂)：read_csv报错&quot; EOF inside string starting&quot;</title>
    <link href="https://hscyber.github.io/posts/a682ffbd/"/>
    <id>https://hscyber.github.io/posts/a682ffbd/</id>
    <published>2023-01-15T09:20:55.000Z</published>
    <updated>2023-02-10T09:07:13.250Z</updated>
    
    <content type="html"><![CDATA[<p>在读取csv文件时（尤其是对于大文件），若一些行有bug，比如文本中出行有多余的分隔号、某一行有错误字符导致READ CSV报错，记录一下解决方案。</p><span id="more"></span><p>最常规的读取大文件并跳过错行（For Pandas &lt; 1.3.0 try error_bad_lines=False）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(file, encoding=<span class="string">&quot;utf-8&quot;</span>, header=<span class="number">0</span>, </span><br><span class="line">                 on_bad_lines=<span class="string">&#x27;skip&#x27;</span>,</span><br><span class="line">                 low_memory=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>如果还是报错，使用Python解析引擎，但是此时速度会下降，low_memory则默认为C引擎：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pd.read_csv(file, encoding=<span class="string">&quot;utf-8&quot;</span>, header=<span class="number">0</span>, </span><br><span class="line">            on_bad_lines=<span class="string">&#x27;skip&#x27;</span>,</span><br><span class="line">            engine=<span class="string">&#x27;python&#x27;</span>)</span><br></pre></td></tr></table></figure><p>参考:</p><ul><li><a href="https://www.shanelynn.ie/pandas-csv-error-error-tokenizing-data-c-error-eof-inside-string-starting-at-line/">EOF inside string starting at line</a>;</li><li><a href="https://stackoverflow.com/questions/18039057/python-pandas-error-tokenizing-data">Pandas Error tokenizing data</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;在读取csv文件时（尤其是对于大文件），若一些行有bug，比如文本中出行有多余的分隔号、某一行有错误字符导致READ CSV报错，记录一下解决方案。&lt;/p&gt;</summary>
    
    
    
    <category term="Pandas数据处理分析" scheme="https://hscyber.github.io/categories/Pandas%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Pandas" scheme="https://hscyber.github.io/tags/Pandas/"/>
    
    <category term="EOF" scheme="https://hscyber.github.io/tags/EOF/"/>
    
    <category term="read_csv" scheme="https://hscyber.github.io/tags/read-csv/"/>
    
  </entry>
  
</feed>
